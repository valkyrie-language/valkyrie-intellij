// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int TextCapture6 = 2;
    public static final int TextCapture3 = 4;
    public static final int TextCapture2 = 6;
    public static final int TextCapture1 = 8;
    public static final int IntegerHandler = 10;
    public static final int AfterNumber = 12;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2,  3,  3, 4, 4, 5, 5, 6, 6
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\1\u2100\1\u2300" +
                    "\1\u2400\1\u2100\1\u2500\1\u2600\1\u2700\1\u2100\1\u2800\1\u2900" +
                    "\2\u2100\31\u0100\1\u2a00\121\u0100\1\u2b00\4\u0100\1\u2c00\1\u0100" +
                    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\53\u0100\1\u3300" +
                    "\41\u2100\1\u0100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900" +
                    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u0100\1\u4000" +
                    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u2100\1\u4700" +
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00" +
                    "\1\u5000\1\u5100\1\u5200\1\u2100\1\u5300\1\u5400\1\u5500\1\u2100" +
                    "\3\u0100\1\u5600\1\u5700\1\u5800\12\u2100\4\u0100\1\u5900\17\u2100" +
                    "\2\u0100\1\u5a00\41\u2100\2\u0100\1\u5b00\1\u5c00\2\u2100\1\u5d00" +
                    "\1\u5e00\27\u0100\1\u5f00\2\u0100\1\u6000\45\u2100\1\u0100\1\u6100" +
                    "\1\u6200\11\u2100\1\u6300\24\u2100\1\u6400\1\u6500\1\u2100\1\u6600" +
                    "\1\u6700\1\u6800\1\u6900\2\u2100\1\u6a00\5\u2100\1\u6b00\1\u6c00" +
                    "\1\u6d00\5\u2100\1\u6e00\1\u6f00\4\u2100\1\u7000\21\u2100\246\u0100" +
                    "\1\u7100\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500" +
                    "\14\u2100\2\u0100\1\u7600\u0b06\u2100\1\u7700\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\13\33" +
                    "\1\34\1\33\1\35\14\33\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61" +
                    "\1\62\1\63\1\33\1\64\1\65\1\66\1\67\1\70" +
                    "\1\71\1\72\1\73\1\33\1\74\1\75\1\76\7\0" +
                    "\1\1\32\0\1\1\10\0\1\77\1\100\1\0\1\101" +
                    "\1\0\1\77\6\0\1\100\1\102\1\103\2\0\1\100" +
                    "\5\0\27\100\1\104\37\100\1\105\u01ca\100\4\0\14\100" +
                    "\16\0\5\100\7\0\1\100\1\0\1\100\21\0\160\103" +
                    "\5\100\1\0\2\100\3\0\3\100\1\0\1\100\6\0" +
                    "\1\100\1\103\3\100\1\0\1\100\1\0\24\100\1\0" +
                    "\123\100\1\0\213\100\1\0\5\103\2\0\246\100\1\0" +
                    "\46\100\2\0\1\100\6\0\51\100\10\0\55\103\1\0" +
                    "\1\103\1\0\2\103\1\0\2\103\1\0\1\103\10\0" +
                    "\33\100\4\0\4\100\35\0\13\103\5\0\53\100\37\103" +
                    "\4\0\2\100\1\103\143\100\1\0\1\100\7\103\2\0" +
                    "\6\103\2\100\2\103\1\0\4\103\2\100\12\103\3\100" +
                    "\2\0\1\100\20\0\1\100\1\103\36\100\33\103\2\0" +
                    "\131\100\13\103\1\100\16\0\12\103\41\100\11\103\2\100" +
                    "\4\0\1\100\2\0\1\103\2\0\26\100\4\103\1\100" +
                    "\11\103\1\100\3\103\1\100\5\103\22\0\31\100\3\103" +
                    "\4\0\13\100\65\0\25\100\1\0\10\100\25\0\17\103" +
                    "\1\0\41\103\66\100\3\103\1\100\22\103\1\100\7\103" +
                    "\12\100\2\103\2\0\12\103\1\0\20\100\3\103\1\0" +
                    "\10\100\2\0\2\100\2\0\26\100\1\0\7\100\1\0" +
                    "\1\100\3\0\4\100\2\0\1\103\1\100\7\103\2\0" +
                    "\2\103\2\0\3\103\1\100\10\0\1\103\4\0\2\100" +
                    "\1\0\3\100\2\103\2\0\12\103\2\100\12\0\1\100" +
                    "\1\0\1\103\2\0\3\103\1\0\6\100\4\0\2\100" +
                    "\2\0\26\100\1\0\7\100\1\0\2\100\1\0\2\100" +
                    "\1\0\2\100\2\0\1\103\1\0\5\103\4\0\2\103" +
                    "\2\0\3\103\3\0\1\103\7\0\4\100\1\0\1\100" +
                    "\7\0\14\103\3\100\1\103\13\0\3\103\1\0\11\100" +
                    "\1\0\3\100\1\0\26\100\1\0\7\100\1\0\2\100" +
                    "\1\0\5\100\2\0\1\103\1\100\10\103\1\0\3\103" +
                    "\1\0\3\103\2\0\1\100\17\0\2\100\2\103\2\0" +
                    "\12\103\11\0\1\100\6\103\1\0\3\103\1\0\10\100" +
                    "\2\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100" +
                    "\1\0\5\100\2\0\1\103\1\100\7\103\2\0\2\103" +
                    "\2\0\3\103\10\0\2\103\4\0\2\100\1\0\3\100" +
                    "\2\103\2\0\12\103\1\0\1\100\20\0\1\103\1\100" +
                    "\1\0\6\100\3\0\3\100\1\0\4\100\3\0\2\100" +
                    "\1\0\1\100\1\0\2\100\3\0\2\100\3\0\3\100" +
                    "\3\0\14\100\4\0\5\103\3\0\3\103\1\0\4\103" +
                    "\2\0\1\100\6\0\1\103\16\0\12\103\20\0\5\103" +
                    "\10\100\1\0\3\100\1\0\27\100\1\0\20\100\3\0" +
                    "\1\100\7\103\1\0\3\103\1\0\4\103\7\0\2\103" +
                    "\1\0\3\100\5\0\2\100\2\103\2\0\12\103\20\0" +
                    "\1\100\3\103\1\0\10\100\1\0\3\100\1\0\27\100" +
                    "\1\0\12\100\1\0\5\100\2\0\1\103\1\100\7\103" +
                    "\1\0\3\103\1\0\4\103\7\0\2\103\7\0\1\100" +
                    "\1\0\2\100\2\103\2\0\12\103\1\0\2\100\15\0" +
                    "\4\103\1\0\10\100\1\0\3\100\1\0\51\100\2\103" +
                    "\1\100\7\103\1\0\3\103\1\0\4\103\1\100\5\0" +
                    "\3\100\1\103\7\0\3\100\2\103\2\0\12\103\12\0" +
                    "\6\100\2\0\2\103\1\0\22\100\3\0\30\100\1\0" +
                    "\11\100\1\0\1\100\2\0\7\100\3\0\1\103\4\0" +
                    "\6\103\1\0\1\103\1\0\10\103\6\0\12\103\2\0" +
                    "\2\103\15\0\60\100\1\103\1\100\10\103\5\0\7\100" +
                    "\10\103\1\0\12\103\47\0\2\100\1\0\1\100\1\0" +
                    "\5\100\1\0\30\100\1\0\1\100\1\0\12\100\1\103" +
                    "\1\100\12\103\1\100\2\0\5\100\1\0\1\100\1\0" +
                    "\6\103\2\0\12\103\2\0\4\100\40\0\1\100\27\0" +
                    "\2\103\6\0\12\103\13\0\1\103\1\0\1\103\1\0" +
                    "\1\103\4\0\2\103\10\100\1\0\44\100\4\0\24\103" +
                    "\1\0\2\103\5\100\13\103\1\0\44\103\11\0\1\103" +
                    "\71\0\53\100\24\103\1\100\12\103\6\0\6\100\4\103" +
                    "\4\100\3\103\1\100\3\103\2\100\7\103\3\100\4\103" +
                    "\15\100\14\103\1\100\17\103\2\0\46\100\1\0\1\100" +
                    "\5\0\1\100\2\0\53\100\1\0\115\100\1\0\4\100" +
                    "\2\0\7\100\1\0\1\100\1\0\4\100\2\0\51\100" +
                    "\1\0\4\100\2\0\41\100\1\0\4\100\2\0\7\100" +
                    "\1\0\1\100\1\0\4\100\2\0\17\100\1\0\71\100" +
                    "\1\0\4\100\2\0\103\100\2\0\3\103\11\0\11\103" +
                    "\16\0\20\100\20\0\126\100\2\0\6\100\3\0\u016c\100" +
                    "\2\0\21\100\1\1\32\100\5\0\113\100\3\0\13\100" +
                    "\7\0\15\100\1\0\4\100\3\103\13\0\22\100\3\103" +
                    "\13\0\22\100\2\103\14\0\15\100\1\0\3\100\1\0" +
                    "\2\103\14\0\64\100\40\103\3\0\1\100\4\0\1\100" +
                    "\1\103\2\0\12\103\41\0\3\103\2\0\12\103\6\0" +
                    "\131\100\7\0\51\100\1\103\1\100\5\0\106\100\12\0" +
                    "\37\100\1\0\14\103\4\0\14\103\12\0\12\103\36\100" +
                    "\2\0\5\100\13\0\54\100\4\0\32\100\6\0\13\103" +
                    "\45\0\27\100\5\103\4\0\65\100\12\103\1\0\35\103" +
                    "\2\0\13\103\6\0\12\103\15\0\1\100\10\0\16\103" +
                    "\102\0\5\103\57\100\21\103\7\100\4\0\12\103\21\0" +
                    "\11\103\14\0\3\103\36\100\15\103\2\100\12\103\54\100" +
                    "\16\103\14\0\44\100\24\103\10\0\12\103\3\0\3\100" +
                    "\12\103\44\100\2\0\11\100\7\0\53\100\2\0\3\100" +
                    "\20\0\3\103\1\0\25\103\4\100\1\103\6\100\1\103" +
                    "\2\100\3\103\1\100\5\0\300\100\72\103\1\0\5\103" +
                    "\26\100\2\0\6\100\2\0\46\100\2\0\6\100\2\0" +
                    "\10\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0" +
                    "\37\100\2\0\65\100\1\0\7\100\1\0\1\100\3\0" +
                    "\3\100\1\0\7\100\3\0\4\100\2\0\6\100\4\0" +
                    "\15\100\5\0\3\100\1\0\7\100\3\0\13\1\32\0" +
                    "\1\106\1\107\1\0\2\1\5\0\1\1\13\0\1\110" +
                    "\3\0\2\103\3\0\1\111\1\112\1\113\4\0\1\114" +
                    "\6\0\1\115\1\0\1\103\7\0\1\116\2\0\1\1" +
                    "\21\0\1\100\15\0\1\100\20\0\15\100\63\0\15\103" +
                    "\4\0\1\103\3\0\14\103\21\0\1\100\1\117\3\0" +
                    "\1\100\1\0\1\120\12\100\1\0\1\100\2\0\6\100" +
                    "\6\0\1\100\1\0\1\100\1\0\1\100\1\0\20\100" +
                    "\2\0\4\100\5\0\5\100\4\0\1\100\21\0\51\100" +
                    "\7\0\1\121\101\0\1\122\41\0\1\123\20\0\1\124" +
                    "\17\0\1\111\4\0\1\125\1\126\1\127\12\0\1\130" +
                    "\1\131\15\0\1\24\1\132\50\0\1\133\3\0\1\134" +
                    "\1\135\4\0\1\136\1\137\117\0\1\140\1\141\1\142" +
                    "\32\0\1\143\1\144\56\0\1\145\1\146\1\147\1\150" +
                    "\121\0\1\151\u0203\0\1\102\206\0\1\152\1\153\14\0" +
                    "\1\154\214\0\1\155\1\156\1\157\1\160\256\0\1\123" +
                    "\51\0\1\161\35\0\1\134\1\135\201\0\57\100\1\0" +
                    "\57\100\1\0\205\100\6\0\4\100\3\103\2\100\14\0" +
                    "\46\100\1\0\1\100\5\0\1\100\2\0\70\100\7\0" +
                    "\1\100\17\0\1\103\27\100\11\0\7\100\1\0\7\100" +
                    "\1\0\7\100\1\0\7\100\1\0\7\100\1\0\7\100" +
                    "\1\0\7\100\1\0\7\100\1\0\40\103\54\0\1\132" +
                    "\22\0\1\162\300\0\1\1\1\0\1\163\2\0\3\100" +
                    "\31\0\11\100\6\103\1\0\5\100\2\0\5\100\4\0" +
                    "\126\100\2\0\2\103\2\0\3\100\1\0\132\100\1\0" +
                    "\4\100\5\0\53\100\1\0\136\100\21\0\33\100\65\0" +
                    "\306\100\112\0\360\100\20\0\215\100\103\0\56\100\2\0" +
                    "\15\100\3\0\20\100\12\103\2\100\24\0\57\100\1\103" +
                    "\4\0\12\103\1\0\37\100\2\103\120\100\2\103\45\0" +
                    "\11\100\2\0\147\100\2\0\65\100\2\0\5\100\60\0" +
                    "\13\100\1\103\3\100\1\103\4\100\1\103\27\100\5\103" +
                    "\30\0\64\100\14\0\2\103\62\100\22\103\12\0\12\103" +
                    "\6\0\22\103\6\100\3\0\1\100\1\0\2\100\13\103" +
                    "\34\100\10\103\2\0\27\100\15\103\14\0\35\100\3\0" +
                    "\4\103\57\100\16\103\16\0\1\100\12\103\6\0\5\100" +
                    "\1\103\12\100\12\103\5\100\1\0\51\100\16\103\11\0" +
                    "\3\100\1\103\10\100\2\103\2\0\12\103\6\0\27\100" +
                    "\3\0\1\100\3\103\62\100\1\103\1\100\3\103\2\100" +
                    "\2\103\5\100\2\103\1\100\1\103\1\100\30\0\3\100" +
                    "\2\0\13\100\5\103\2\0\3\100\2\103\12\0\6\100" +
                    "\2\0\6\100\2\0\6\100\11\0\7\100\1\0\7\100" +
                    "\1\0\53\100\1\0\14\100\10\0\163\100\10\103\1\0" +
                    "\2\103\2\0\12\103\6\0\244\100\14\0\27\100\4\0" +
                    "\61\100\4\0\156\100\2\0\152\100\46\0\7\100\14\0" +
                    "\5\100\5\0\1\100\1\103\12\100\1\0\15\100\1\0" +
                    "\5\100\1\0\1\100\1\0\2\100\1\0\2\100\1\0" +
                    "\154\100\41\0\213\100\6\0\332\100\22\0\100\100\2\0" +
                    "\66\100\50\0\12\100\6\0\20\103\20\0\20\103\3\0" +
                    "\2\103\30\0\3\103\41\0\1\100\1\0\1\100\3\0" +
                    "\1\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0" +
                    "\176\100\4\0\1\164\12\0\1\16\3\0\12\103\1\24" +
                    "\4\0\1\165\1\0\32\100\4\0\1\103\1\0\32\100" +
                    "\13\0\70\100\2\103\37\100\3\0\6\100\2\0\6\100" +
                    "\2\0\6\100\2\0\3\100\43\0\14\100\1\0\32\100" +
                    "\1\0\23\100\1\0\2\100\1\0\17\100\2\0\16\100" +
                    "\42\0\173\100\105\0\65\100\210\0\1\103\202\0\35\100" +
                    "\3\0\61\100\17\0\1\103\37\0\40\100\15\0\36\100" +
                    "\5\0\46\100\5\103\5\0\36\100\2\0\44\100\4\0" +
                    "\10\100\1\0\5\100\52\0\236\100\2\0\12\103\6\0" +
                    "\44\100\4\0\44\100\4\0\50\100\10\0\64\100\234\0" +
                    "\67\100\11\0\26\100\12\0\10\100\230\0\6\100\2\0" +
                    "\1\100\1\0\54\100\1\0\2\100\3\0\1\100\2\0" +
                    "\27\100\12\0\27\100\11\0\37\100\101\0\23\100\1\0" +
                    "\2\100\12\0\26\100\12\0\32\100\106\0\70\100\6\0" +
                    "\2\100\100\0\1\100\3\103\1\0\2\103\5\0\4\103" +
                    "\4\100\1\0\3\100\1\0\35\100\2\0\3\103\4\0" +
                    "\1\103\40\0\35\100\3\0\35\100\43\0\10\100\1\0" +
                    "\34\100\2\103\31\0\66\100\12\0\26\100\12\0\23\100" +
                    "\15\0\22\100\156\0\111\100\67\0\63\100\15\0\63\100" +
                    "\15\0\44\100\4\103\10\0\12\103\306\0\35\100\12\0" +
                    "\1\100\10\0\26\100\13\103\217\0\27\100\11\0\3\103" +
                    "\65\100\17\103\37\0\12\103\17\0\4\103\55\100\13\103" +
                    "\25\0\31\100\7\0\12\103\6\0\3\103\44\100\16\103" +
                    "\1\0\12\103\4\0\1\100\2\103\11\0\43\100\1\103" +
                    "\2\0\1\100\11\0\3\103\60\100\16\103\4\100\4\0" +
                    "\4\103\3\0\12\103\1\100\1\0\1\100\43\0\22\100" +
                    "\1\0\31\100\14\103\6\0\1\103\101\0\7\100\1\0" +
                    "\1\100\1\0\4\100\1\0\17\100\1\0\12\100\7\0" +
                    "\57\100\14\103\5\0\12\103\6\0\4\103\1\0\10\100" +
                    "\2\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100" +
                    "\1\0\5\100\1\0\2\103\1\100\7\103\2\0\2\103" +
                    "\2\0\3\103\2\0\1\100\6\0\1\103\5\0\5\100" +
                    "\2\103\2\0\7\103\3\0\5\103\213\0\65\100\22\103" +
                    "\4\100\5\0\12\103\4\0\1\103\1\100\40\0\60\100" +
                    "\24\103\2\100\1\0\1\100\10\0\12\103\246\0\57\100" +
                    "\7\103\2\0\11\103\27\0\4\100\2\103\42\0\60\100" +
                    "\21\103\3\0\1\100\13\0\12\103\46\0\53\100\15\103" +
                    "\1\100\7\0\12\103\66\0\33\100\2\0\17\103\4\0" +
                    "\12\103\306\0\54\100\17\103\145\0\100\100\12\103\25\0" +
                    "\1\100\240\0\10\100\2\0\47\100\7\103\2\0\7\103" +
                    "\1\100\1\0\1\100\1\103\33\0\1\100\12\103\50\100" +
                    "\7\103\1\100\4\103\10\0\1\103\10\0\1\100\13\103" +
                    "\56\100\20\103\3\0\1\100\42\0\71\100\7\0\11\100" +
                    "\1\0\45\100\10\103\1\0\10\103\1\100\17\0\12\103" +
                    "\30\0\36\100\2\0\26\103\1\0\16\103\111\0\7\100" +
                    "\1\0\2\100\1\0\46\100\6\103\3\0\1\103\1\0" +
                    "\2\103\1\0\7\103\1\100\1\103\10\0\12\103\6\0" +
                    "\6\100\1\0\2\100\1\0\40\100\5\103\1\0\2\103" +
                    "\1\0\5\103\1\100\7\0\12\103\u0136\0\23\100\4\103" +
                    "\11\0\232\100\146\0\157\100\21\0\304\100\274\0\57\100" +
                    "\321\0\107\100\271\0\71\100\7\0\37\100\1\0\12\103" +
                    "\146\0\36\100\2\0\5\103\13\0\60\100\7\103\11\0" +
                    "\4\100\14\0\12\103\11\0\25\100\5\0\23\100\260\0" +
                    "\100\100\200\0\113\100\4\0\1\103\1\100\67\103\7\0" +
                    "\4\103\15\100\100\0\2\100\1\0\1\100\34\0\370\100" +
                    "\10\0\363\100\15\0\37\100\61\0\3\100\21\0\4\100" +
                    "\10\0\u018c\100\4\0\153\100\5\0\15\100\3\0\11\100" +
                    "\7\0\12\100\3\0\2\103\306\0\5\103\3\0\6\103" +
                    "\10\0\10\103\2\0\7\103\36\0\4\103\224\0\3\103" +
                    "\273\0\125\100\1\0\107\100\1\0\2\100\2\0\1\100" +
                    "\2\0\2\100\2\0\4\100\1\0\14\100\1\0\1\100" +
                    "\1\0\7\100\1\0\101\100\1\0\4\100\2\0\10\100" +
                    "\1\0\7\100\1\0\34\100\1\0\4\100\1\0\5\100" +
                    "\1\0\1\100\3\0\7\100\1\0\u0154\100\2\0\31\100" +
                    "\1\0\31\100\1\0\37\100\1\0\31\100\1\0\37\100" +
                    "\1\0\31\100\1\0\37\100\1\0\31\100\1\0\37\100" +
                    "\1\0\31\100\1\0\10\100\2\0\151\103\4\0\62\103" +
                    "\10\0\1\103\16\0\1\103\26\0\5\103\1\0\17\103" +
                    "\120\0\7\103\1\0\21\103\2\0\7\103\1\0\2\103" +
                    "\1\0\5\103\325\0\55\100\3\0\7\103\7\100\2\0" +
                    "\12\103\4\0\1\100\u0171\0\54\100\16\103\6\0\305\100" +
                    "\13\0\7\103\51\0\104\100\7\103\1\100\4\0\12\103" +
                    "\246\0\4\100\1\0\33\100\1\0\2\100\1\0\1\100" +
                    "\2\0\1\100\1\0\12\100\1\0\4\100\1\0\1\100" +
                    "\1\0\1\100\6\0\1\100\4\0\1\100\1\0\1\100" +
                    "\1\0\1\100\1\0\3\100\1\0\2\100\1\0\1\100" +
                    "\2\0\1\100\1\0\1\100\1\0\1\100\1\0\1\100" +
                    "\1\0\1\100\1\0\2\100\1\0\1\100\2\0\4\100" +
                    "\1\0\7\100\1\0\4\100\1\0\4\100\1\0\1\100" +
                    "\1\0\12\100\1\0\21\100\5\0\3\100\1\0\5\100" +
                    "\1\0\21\100\104\0\327\100\51\0\65\100\13\0\336\100" +
                    "\2\0\u0182\100\16\0\u0131\100\37\0\36\100\342\0\360\103" +
                    "\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30720];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27" +
                    "\1\30\1\31\1\32\1\33\1\1\1\34\1\35\1\1" +
                    "\22\32\1\36\1\37\1\40\1\41\1\42\1\43\1\44" +
                    "\1\45\1\46\1\47\1\50\1\21\1\51\1\52\1\53" +
                    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63" +
                    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73" +
                    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103" +
                    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113" +
                    "\1\114\1\115\1\116\1\117\4\120\1\121\1\122\1\123" +
                    "\1\122\1\0\1\124\2\0\1\125\1\126\1\127\1\46" +
                    "\1\130\1\131\1\132\1\0\1\133\1\134\1\135\1\136" +
                    "\1\0\1\137\1\140\13\32\1\141\4\32\1\142\1\32" +
                    "\1\143\1\144\27\32\3\0\1\123\1\145\1\146\1\147" +
                    "\1\150\1\151\1\152\1\153\1\140\16\32\1\141\5\32" +
                    "\1\154\6\32\1\155\1\62\1\156\12\32\1\157\12\32" +
                    "\1\160\4\32\1\161\1\162\6\32\1\163\1\141\5\32" +
                    "\1\164\5\32\1\165\10\32\1\166\1\157\1\167\5\32" +
                    "\1\170\3\32\1\171\1\32\1\172\1\173\1\174\3\32" +
                    "\1\175\3\32\1\176\4\32\1\177\3\32\1\200\1\201" +
                    "\3\32\1\202\5\32\1\203\1\204\1\205\1\206\1\207" +
                    "\1\210\1\211\1\32\1\212\4\32\1\177\1\32\1\213" +
                    "\5\32\1\214\1\32\1\215\1\216\1\217\1\220\1\32" +
                    "\1\174\1\32\1\207\1\221\3\32\1\222\12\32\1\223" +
                    "\10\32\1\224\1\225\1\32\1\224\1\226";

    private static int[] zzUnpackAction() {
        int[] result = new int[380];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\166\0\354\0\u0162\0\u01d8\0\u024e\0\u02c4\0\u033a" +
                    "\0\u03b0\0\u033a\0\u0426\0\u033a\0\u033a\0\u049c\0\u0512\0\u0588" +
                    "\0\u033a\0\u033a\0\u05fe\0\u0674\0\u033a\0\u06ea\0\u0760\0\u07d6" +
                    "\0\u084c\0\u08c2\0\u0938\0\u033a\0\u09ae\0\u0a24\0\u0a9a\0\u0b10" +
                    "\0\u033a\0\u0b86\0\u033a\0\u0bfc\0\u033a\0\u033a\0\u0c72\0\u0ce8" +
                    "\0\u0d5e\0\u0dd4\0\u0e4a\0\u0ec0\0\u0f36\0\u0fac\0\u1022\0\u1098" +
                    "\0\u110e\0\u1184\0\u11fa\0\u1270\0\u12e6\0\u135c\0\u13d2\0\u1448" +
                    "\0\u14be\0\u033a\0\u1534\0\u033a\0\u15aa\0\u1620\0\u033a\0\u05fe" +
                    "\0\u033a\0\u033a\0\u033a\0\u033a\0\u1696\0\u033a\0\u033a\0\u033a" +
                    "\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a" +
                    "\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a" +
                    "\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a\0\u033a" +
                    "\0\u033a\0\u033a\0\u033a\0\u170c\0\u033a\0\u033a\0\u033a\0\u033a" +
                    "\0\u033a\0\u033a\0\u033a\0\u033a\0\u1782\0\u17f8\0\u186e\0\u18e4" +
                    "\0\u033a\0\u033a\0\u195a\0\u19d0\0\u1a46\0\u033a\0\u1abc\0\u1b32" +
                    "\0\u033a\0\u033a\0\u033a\0\u1ba8\0\u1c1e\0\u033a\0\u1c94\0\u1d0a" +
                    "\0\u033a\0\u1d80\0\u033a\0\u033a\0\u0c72\0\u033a\0\u1df6\0\u1e6c" +
                    "\0\u1ee2\0\u1f58\0\u1fce\0\u2044\0\u20ba\0\u2130\0\u21a6\0\u221c" +
                    "\0\u2292\0\u2308\0\u0b86\0\u237e\0\u23f4\0\u246a\0\u24e0\0\u0b86" +
                    "\0\u2556\0\u25cc\0\u0b86\0\u2642\0\u26b8\0\u272e\0\u27a4\0\u281a" +
                    "\0\u2890\0\u2906\0\u297c\0\u29f2\0\u2a68\0\u2ade\0\u2b54\0\u2bca" +
                    "\0\u2c40\0\u2cb6\0\u2d2c\0\u2da2\0\u2e18\0\u2e8e\0\u2f04\0\u2f7a" +
                    "\0\u2ff0\0\u3066\0\u30dc\0\u3152\0\u19d0\0\u033a\0\u033a\0\u033a" +
                    "\0\u033a\0\u033a\0\u033a\0\u1d0a\0\u033a\0\u033a\0\u31c8\0\u323e" +
                    "\0\u32b4\0\u332a\0\u33a0\0\u3416\0\u348c\0\u3502\0\u3578\0\u35ee" +
                    "\0\u3664\0\u36da\0\u3750\0\u37c6\0\u383c\0\u38b2\0\u3928\0\u399e" +
                    "\0\u3a14\0\u3a8a\0\u0b86\0\u3b00\0\u3b76\0\u3bec\0\u3c62\0\u3cd8" +
                    "\0\u3d4e\0\u0b86\0\u0b86\0\u0b86\0\u3dc4\0\u3e3a\0\u3eb0\0\u3f26" +
                    "\0\u3f9c\0\u4012\0\u4088\0\u40fe\0\u4174\0\u41ea\0\u4260\0\u42d6" +
                    "\0\u434c\0\u43c2\0\u4438\0\u44ae\0\u4524\0\u459a\0\u4610\0\u4686" +
                    "\0\u46fc\0\u0b86\0\u4772\0\u47e8\0\u485e\0\u48d4\0\u0b86\0\u0b86" +
                    "\0\u494a\0\u49c0\0\u4a36\0\u4aac\0\u4b22\0\u4b98\0\u0b86\0\u4c0e" +
                    "\0\u4c84\0\u4cfa\0\u4d70\0\u4de6\0\u4e5c\0\u0b86\0\u4ed2\0\u4f48" +
                    "\0\u4fbe\0\u5034\0\u50aa\0\u0b86\0\u5120\0\u5196\0\u520c\0\u5282" +
                    "\0\u52f8\0\u536e\0\u53e4\0\u545a\0\u0b86\0\u033a\0\u0b86\0\u54d0" +
                    "\0\u5546\0\u55bc\0\u5632\0\u56a8\0\u0b86\0\u571e\0\u5794\0\u580a" +
                    "\0\u0b86\0\u5880\0\u0b86\0\u0b86\0\u0b86\0\u58f6\0\u596c\0\u59e2" +
                    "\0\u0b86\0\u5a58\0\u5ace\0\u5b44\0\u0b86\0\u5bba\0\u5c30\0\u5ca6" +
                    "\0\u5d1c\0\u0b86\0\u5d92\0\u5e08\0\u5e7e\0\u0b86\0\u0b86\0\u5ef4" +
                    "\0\u5f6a\0\u5fe0\0\u0b86\0\u6056\0\u60cc\0\u6142\0\u61b8\0\u622e" +
                    "\0\u0b86\0\u0b86\0\u0b86\0\u0b86\0\u62a4\0\u0b86\0\u0b86\0\u631a" +
                    "\0\u0b86\0\u6390\0\u6406\0\u647c\0\u64f2\0\u6568\0\u65de\0\u0b86" +
                    "\0\u6654\0\u66ca\0\u6740\0\u67b6\0\u682c\0\u0b86\0\u68a2\0\u0b86" +
                    "\0\u0b86\0\u0b86\0\u0b86\0\u6918\0\u698e\0\u6a04\0\u033a\0\u0b86" +
                    "\0\u6a7a\0\u6af0\0\u6b66\0\u0b86\0\u6bdc\0\u6c52\0\u6cc8\0\u6d3e" +
                    "\0\u6db4\0\u6e2a\0\u6ea0\0\u6f16\0\u6f8c\0\u7002\0\u0b86\0\u7078" +
                    "\0\u70ee\0\u7164\0\u71da\0\u7250\0\u72c6\0\u733c\0\u73b2\0\u7428" +
                    "\0\u0b86\0\u749e\0\u033a\0\u0b86";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[380];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\10\2\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27" +
                    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37" +
                    "\1\40\1\41\3\42\1\43\1\44\1\45\1\46\1\42" +
                    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56" +
                    "\1\42\1\57\2\42\1\60\1\61\1\62\1\63\1\42" +
                    "\1\64\1\65\1\66\1\67\1\42\1\70\1\42\1\71" +
                    "\1\72\1\73\1\74\1\75\1\42\1\76\1\77\1\10" +
                    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107" +
                    "\1\110\1\16\1\111\1\112\1\113\1\114\1\115\1\116" +
                    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126" +
                    "\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136" +
                    "\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146" +
                    "\1\147\1\10\1\150\1\151\1\152\1\153\1\154\1\27" +
                    "\1\12\1\40\4\155\1\156\161\155\11\157\1\160\154\157" +
                    "\4\155\1\161\161\155\11\157\1\161\154\157\166\10\33\162" +
                    "\3\163\4\162\1\163\1\164\30\163\4\162\1\163\65\162" +
                    "\167\0\2\11\167\0\1\165\210\0\1\166\146\0\1\123" +
                    "\166\0\1\167\143\0\1\170\37\0\1\171\165\0\1\172" +
                    "\165\0\1\173\1\147\155\0\1\174\142\0\1\174\11\0" +
                    "\1\101\10\0\1\175\1\144\5\0\1\176\2\0\1\116" +
                    "\6\0\1\177\121\0\1\175\22\0\1\200\165\0\1\200" +
                    "\1\0\2\32\16\0\1\32\147\0\1\125\4\0\1\201" +
                    "\133\0\1\201\17\0\1\114\7\0\1\127\165\0\1\202" +
                    "\1\115\164\0\1\130\162\0\1\201\2\0\1\203\1\0" +
                    "\1\204\133\0\1\204\22\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\30\42\4\0\1\42\2\0\1\42\67\0" +
                    "\1\75\26\0\1\154\1\111\1\0\1\144\17\0\1\104" +
                    "\106\0\43\205\1\206\122\205\22\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\21\42\1\207\6\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\20\42\1\210\7\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\1\211" +
                    "\12\42\1\212\2\42\1\213\11\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\214\23\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\1\215\12\42" +
                    "\1\216\1\42\1\217\10\42\1\220\1\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\1\221\12\42\1\222\1\42\1\223\1\224\1\42" +
                    "\1\225\2\42\1\226\4\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\4\42" +
                    "\1\227\23\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\5\42\1\230\6\42" +
                    "\1\231\1\232\3\42\1\233\6\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\1\234\3\42\1\235\11\42\1\236\11\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\1\237\7\42\1\240\17\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\1\241\3\42\1\242\3\42\1\243\5\42\1\244\4\42" +
                    "\1\245\4\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\1\42\1\246\26\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\1\247\3\42\1\250\23\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\10\42\1\251\11\42\1\252\5\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\253\13\42\1\254\6\42\1\255" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\15\42\1\256\3\42\1\257\6\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\7\42\1\260\1\261\17\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\10\42\1\262\17\42\4\0\1\42\2\0" +
                    "\1\42\157\0\1\124\112\0\2\75\7\0\3\75\6\0" +
                    "\30\75\120\0\1\130\1\126\1\127\155\0\1\175\6\0" +
                    "\1\176\11\0\1\177\121\0\1\175\2\0\2\144\1\0" +
                    "\163\144\4\155\1\0\161\155\4\0\1\263\161\0\11\157" +
                    "\1\0\154\157\11\0\1\264\176\0\2\163\7\0\3\163" +
                    "\4\0\1\163\1\0\30\163\4\0\1\163\2\0\1\163" +
                    "\62\0\43\265\1\266\122\265\4\0\1\267\172\0\1\270" +
                    "\165\0\1\271\174\0\1\103\5\0\2\272\133\0\1\103" +
                    "\43\0\1\273\144\0\1\273\142\0\1\273\24\0\2\274" +
                    "\172\0\1\275\140\0\1\276\16\0\2\42\5\0\1\276" +
                    "\1\0\3\42\4\0\1\42\1\0\30\42\4\0\1\42" +
                    "\2\0\1\42\60\0\2\276\22\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\4\42\1\277\23\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\21\42\1\300\1\301\5\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\1\302\27\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\15\42\1\303\12\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\5\42\1\223\22\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\2\42\1\304\25\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\21\42" +
                    "\1\305\6\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\23\42\1\306\4\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\2\42\1\307\17\42\1\310\5\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\13\42\1\311\14\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\1\312\27\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\20\42\1\313" +
                    "\7\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\16\42\1\314\11\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\15\42\1\315\12\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\15\42\1\316\12\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\17\42\1\317" +
                    "\10\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\3\42\1\320\16\42\1\321" +
                    "\5\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\14\42\1\322\13\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\22\42\1\323\5\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\16\42\1\324\11\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\2\42\1\325" +
                    "\17\42\1\326\5\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\2\42\1\327" +
                    "\25\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\14\42\1\330\13\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\23\42\1\331\1\42\1\332\2\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\13\42\1\333\14\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\22\42\1\334\5\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\13\42\1\335" +
                    "\14\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\11\42\1\336\16\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\10\42\1\337\17\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\21\42\1\340\1\341\5\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\15\42" +
                    "\1\342\12\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\20\42\1\343\7\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\14\42\1\344\13\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\1\345\22\42\1\346\3\42\1\347\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\17\42\1\350\10\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\10\42" +
                    "\1\351\11\42\1\352\5\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\10\42" +
                    "\1\353\17\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\4\42\1\354\3\42" +
                    "\1\355\17\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\3\42\1\356\16\42" +
                    "\1\357\5\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\4\42\1\360\23\42" +
                    "\4\0\1\42\2\0\1\42\66\0\1\161\172\0\1\161" +
                    "\176\0\2\42\7\0\3\42\4\0\1\42\1\0\1\361" +
                    "\27\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\362\23\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\2\42\1\363\25\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\21\42\1\364\6\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\21\42\1\365" +
                    "\1\366\5\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\7\42\1\367\20\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\4\42\1\370\23\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\14\42\1\371\13\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\13\42" +
                    "\1\372\14\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\4\42\1\373\23\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\13\42\1\374\5\42\1\346\6\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\6\42\1\375\21\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\1\376\27\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\14\42\1\377" +
                    "\13\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\2\42\1\u0100\25\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u0101\23\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\13\42\1\u0102\14\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\23\42\1\u0103" +
                    "\4\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\u0104\23\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\1\42\1\u0105\26\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\17\42\1\u0106\10\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\20\42\1\u0107" +
                    "\7\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\2\42\1\u0108\25\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\20\42\1\u0109\7\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u010a\23\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\20\42\1\u010b" +
                    "\7\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\13\42\1\u010c\14\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u010d\23\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\21\42\1\u010e\6\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\23\42\1\u010f" +
                    "\4\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\23\42\1\u0110\4\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\6\42\1\u0111\21\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\23\42\1\u0112\4\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\17\42\1\u0113" +
                    "\10\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\10\42\1\u0114\17\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u0115\23\42\4\0\1\42\2\0" +
                    "\1\42\65\0\1\u0116\16\0\2\42\5\0\1\u0116\1\0" +
                    "\3\42\4\0\1\42\1\0\30\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u0117\16\42\1\u0118\4\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\16\42\1\u0119\3\42\1\u011a\5\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\10\42\1\u011b\17\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\15\42\1\u011c" +
                    "\12\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\15\42\1\u011d\2\42\1\u011e" +
                    "\7\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\13\42\1\u011f\14\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\6\42\1\u0120\21\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\7\42\1\u0121\20\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\13\42\1\u0122" +
                    "\14\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\12\42\1\u0123\15\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\7\42\1\u0124\20\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\21\42\1\u0125\6\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\22\42\1\u0126" +
                    "\5\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\10\42\1\u0127\17\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u0128\14\42\1\u0129\6\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\23\42\1\u012a\4\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\15\42\1\u012b\12\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\22\42\1\u012c" +
                    "\5\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\21\42\1\u012d\6\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\13\42\1\u012e\14\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\22\42\1\u012f\5\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\20\42\1\u0130" +
                    "\7\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\10\42\1\u0131\16\42\1\u0132" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\2\42\1\u0133\25\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\20\42\1\u0134\7\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\3\42" +
                    "\1\u0135\24\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\16\42\1\u0136\11\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\7\42\1\u0137\20\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\16\42\1\223\11\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\21\42" +
                    "\1\u0138\6\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\1\u0139\27\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\2\42\1\u013a\25\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u013b\23\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\14\42\1\u013c" +
                    "\13\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\20\42\1\u013d\7\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\13\42\1\u013e\14\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\2\42\1\u013f\25\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\13\42\1\u0140" +
                    "\14\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\22\42\1\u0141\5\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\21\42\1\u0117\6\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\15\42\1\u0142\12\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\4\42\1\u0143" +
                    "\23\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\13\42\1\u0144\14\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\6\42\1\u0145\21\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u0146\23\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\4\42\1\u0147" +
                    "\23\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\u0148\23\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\3\42\1\u0149\24\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\20\42\1\u014a\7\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\15\42\1\u014b" +
                    "\12\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\20\42\1\u014c\7\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\3\42\1\u014d\24\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\3\42\1\u014e\24\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\7\42\1\u014f" +
                    "\20\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\13\42\1\u0150\14\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\10\42\1\u0151\17\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\10\42\1\u0152\17\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\14\42\1\u0153" +
                    "\13\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\22\42\1\u0154\5\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\5\42\1\u0155\22\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\1\u0156\27\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\17\42\1\u0157\10\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\13\42\1\u0158\14\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\22\42\1\u0159\5\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\4\42" +
                    "\1\u015a\23\42\4\0\1\42\2\0\1\42\104\0\2\42" +
                    "\7\0\3\42\4\0\1\42\1\0\15\42\1\u015b\12\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\4\42\1\u015c\23\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\22\42\1\u015d\5\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\1\u015e" +
                    "\27\42\4\0\1\42\2\0\1\42\65\0\1\u015f\16\0" +
                    "\2\42\5\0\1\u015f\1\0\3\42\4\0\1\42\1\0" +
                    "\30\42\4\0\1\42\2\0\1\42\60\0\2\u015f\22\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\22\42\1\u0160" +
                    "\5\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\1\u0161\27\42\4\0\1\42" +
                    "\2\0\1\42\104\0\2\42\7\0\3\42\4\0\1\42" +
                    "\1\0\23\42\1\u0162\4\42\4\0\1\42\2\0\1\42" +
                    "\104\0\2\42\7\0\3\42\4\0\1\42\1\0\1\u0163" +
                    "\27\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\u0164\23\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\21\42\1\u0132\6\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\20\42\1\u0165\7\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\16\42\1\u0166" +
                    "\11\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\2\42\1\u0150\25\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u0167\23\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\10\42\1\u0168\17\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\1\u0169\27\42" +
                    "\4\0\1\42\2\0\1\42\104\0\2\42\7\0\3\42" +
                    "\4\0\1\42\1\0\1\u016a\27\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\22\42\1\u016b\5\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\23\42\1\u016c" +
                    "\4\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\22\42\1\u016d\5\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\10\42\1\u016e\17\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u016f\23\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\22\42\1\u0170" +
                    "\5\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\16\42\1\u0171\11\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\15\42\1\223\12\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\15\42\1\u0172\12\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\24\42\1\u011a" +
                    "\3\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\2\42\1\u0173\25\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\2\42\1\u0174\25\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\16\42\1\u0175\11\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\20\42\1\u0173" +
                    "\7\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\u0150\23\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\15\42\1\u0176\12\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u0129\23\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\23\42\1\u0177" +
                    "\4\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\22\42\1\u014e\5\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u0125\23\42\4\0\1\42\2\0" +
                    "\1\42\104\0\2\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u0178\23\42\4\0\1\42\2\0\1\42\104\0" +
                    "\2\42\7\0\3\42\4\0\1\42\1\0\15\42\1\u0179" +
                    "\12\42\4\0\1\42\2\0\1\42\104\0\2\42\7\0" +
                    "\3\42\4\0\1\42\1\0\22\42\1\u0150\5\42\4\0" +
                    "\1\42\2\0\1\42\104\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\6\42\1\u017a\21\42\4\0\1\42\2\0" +
                    "\1\42\65\0\1\u017b\16\0\2\42\5\0\1\u017b\1\0" +
                    "\3\42\4\0\1\42\1\0\30\42\4\0\1\42\2\0" +
                    "\1\42\60\0\2\u017b\22\0\2\42\7\0\3\42\4\0" +
                    "\1\42\1\0\7\42\1\u017c\20\42\4\0\1\42\2\0" +
                    "\1\42\62\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[29972];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\7\0\1\11\1\1\1\11\1\1\2\11\3\1\2\11" +
                    "\2\1\1\11\6\1\1\11\4\1\1\11\1\1\1\11" +
                    "\1\1\2\11\23\1\1\11\1\1\1\11\2\1\1\11" +
                    "\1\1\4\11\1\1\36\11\1\1\10\11\4\1\2\11" +
                    "\2\1\1\0\1\11\2\0\3\11\2\1\1\11\1\1" +
                    "\1\0\1\11\1\1\2\11\1\0\1\11\54\1\3\0" +
                    "\6\11\1\1\2\11\127\1\1\11\110\1\1\11\33\1" +
                    "\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[380];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 151:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 152:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 153:
                        break;
                    case 4: {
                        yybegin(TextCapture2);
                        return STRING_L;
                    }
                    // fall through
                    case 154:
                        break;
                    case 5: {
                        return HASH;
                    }
                    // fall through
                    case 155:
                        break;
                    case 6: {
                        return DOLLAR;
                    }
                    // fall through
                    case 156:
                        break;
                    case 7: {
                        return OP_REM;
                    }
                    // fall through
                    case 157:
                        break;
                    case 8: {
                        return OP_AND;
                    }
                    // fall through
                    case 158:
                        break;
                    case 9: {
                        yybegin(TextCapture1);
                        return STRING_L;
                    }
                    // fall through
                    case 159:
                        break;
                    case 10: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 160:
                        break;
                    case 11: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 161:
                        break;
                    case 12: {
                        return STAR;
                    }
                    // fall through
                    case 162:
                        break;
                    case 13: {
                        return OP_ADD;
                    }
                    // fall through
                    case 163:
                        break;
                    case 14: {
                        return COMMA;
                    }
                    // fall through
                    case 164:
                        break;
                    case 15: {
                        return OP_SUB;
                    }
                    // fall through
                    case 165:
                        break;
                    case 16: {
                        return DOT;
                    }
                    // fall through
                    case 166:
                        break;
                    case 17: {
                        return OP_DIV;
                    }
                    // fall through
                    case 167:
                        break;
                    case 18: {
                        yybegin(AfterNumber);
                        return INTEGER;
                    }
                    // fall through
                    case 168:
                        break;
                    case 19: {
                        return COLON;
                    }
                    // fall through
                    case 169:
                        break;
                    case 20: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 170:
                        break;
                    case 21: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 171:
                        break;
                    case 22: {
                        return EQUAL;
                    }
                    // fall through
                    case 172:
                        break;
                    case 23: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 173:
                        break;
                    case 24: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 174:
                        break;
                    case 25: {
                        return AT;
                    }
                    // fall through
                    case 175:
                        break;
                    case 26: {
                        return SYMBOL;
                    }
                    // fall through
                    case 176:
                        break;
                    case 27: {
                        return BRACKET_L;
            }
          // fall through
                    case 177:
                        break;
                    case 28: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 178:
                        break;
                    case 29: {
                        return OP_POW;
                    }
                    // fall through
                    case 179:
                        break;
                    case 30: {
                        return BRACE_L;
                    }
                    // fall through
                    case 180:
                        break;
                    case 31: {
                        return OP_OR;
                    }
                    // fall through
                    case 181:
                        break;
                    case 32: {
                        return BRACE_R;
                    }
                    // fall through
                    case 182:
                        break;
                    case 33: {
                        return COLOR;
                    }
                    // fall through
                    case 183:
                        break;
                    case 34: {
                        return OP_NOT;
                    }
                    // fall through
                    case 184:
                        break;
                    case 35: {
                        return OP_REFERENCE;
                    }
                    // fall through
                    case 185:
                        break;
                    case 36: {
                        return OP_MUL;
                    }
                    // fall through
                    case 186:
                        break;
                    case 37: {
                        return OP_DIV_REM;
                    }
                    // fall through
                    case 187:
                        break;
                    case 38: {
                        return ANY_LIST;
                    }
                    // fall through
                    case 188:
                        break;
                    case 39: {
                        return ANY_DICT;
                    }
                    // fall through
                    case 189:
                        break;
                    case 40: {
                        return OP_LABEL;
                    }
                    // fall through
                    case 190:
                        break;
                    case 41: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 191:
                        break;
                    case 42: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 192:
                        break;
                    case 43: {
                        return OP_DEREFERENCE;
                    }
                    // fall through
                    case 193:
                        break;
                    case 44: {
                        return NAME_SCOPE;
                    }
                    // fall through
                    case 194:
                        break;
                    case 45: {
                        return OP_CELSIUS;
                    }
                    // fall through
                    case 195:
                        break;
                    case 46: {
                        return OP_FAHRENHEIT;
                    }
                    // fall through
                    case 196:
                        break;
                    case 47: {
                        return BIND;
                    }
                    // fall through
                    case 197:
                        break;
                    case 48: {
                        return OP_ARROW2;
                    }
                    // fall through
                    case 198:
                        break;
                    case 49: {
                        return OP_MAP;
                    }
                    // fall through
                    case 199:
                        break;
                    case 50: {
                        return KW_NIL;
                    }
                    // fall through
                    case 200:
                        break;
                    case 51: {
                        return OP_SQRT;
                    }
                    // fall through
                    case 201:
                        break;
                    case 52: {
                        return OP_SURD3;
                    }
                    // fall through
                    case 202:
                        break;
                    case 53: {
                        return OP_SURD4;
                    }
                    // fall through
                    case 203:
                        break;
                    case 54: {
                        return LOGIC_AND;
                    }
                    // fall through
                    case 204:
                        break;
                    case 55: {
                        return LOGIC_OR;
                    }
                    // fall through
                    case 205:
                        break;
                    case 56: {
                        return NAME_SPLIT;
                    }
                    // fall through
                    case 206:
                        break;
                    case 57: {
                        return OP_NE;
                    }
                    // fall through
                    case 207:
                        break;
                    case 58: {
                        return OP_LEQ;
                    }
                    // fall through
                    case 208:
                        break;
                    case 59: {
                        return OP_GEQ;
                    }
                    // fall through
                    case 209:
                        break;
                    case 60: {
                        return OP_LL;
                    }
                    // fall through
                    case 210:
                        break;
                    case 61: {
                        return OP_GG;
                    }
                    // fall through
                    case 211:
                        break;
                    case 62: {
                        return LOGIC_XOR;
                    }
                    // fall through
                    case 212:
                        break;
                    case 63: {
                        return LOGIC_NAND;
                    }
                    // fall through
                    case 213:
                        break;
                    case 64: {
                        return LOGIC_NOR;
                    }
                    // fall through
                    case 214:
                        break;
                    case 65: {
                        return OP_LLL;
                    }
                    // fall through
                    case 215:
                        break;
                    case 66: {
                        return OP_GGG;
                    }
                    // fall through
                    case 216:
                        break;
                    case 67: {
                        return CEIL_L;
                    }
                    // fall through
                    case 217:
                        break;
                    case 68: {
                        return CEIL_R;
                    }
                    // fall through
                    case 218:
                        break;
                    case 69: {
                        return FLOOR_L;
                    }
                    // fall through
                    case 219:
                        break;
                    case 70: {
                        return FLOOR_R;
                    }
                    // fall through
                    case 220:
                        break;
                    case 71: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 221:
                        break;
                    case 72: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 222:
                        break;
                    case 73: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 223:
                        break;
                    case 74: {
                        return OP_ARROW1;
                    }
                    // fall through
                    case 224:
                        break;
                    case 75: {
                        return DOMAIN_R;
                    }
                    // fall through
                    case 225:
                        break;
                    case 76: {
                        return BUILDER_L;
                    }
                    // fall through
                    case 226:
                        break;
                    case 77: {
                        return BUILDER_R;
                    }
                    // fall through
                    case 227:
                        break;
                    case 78: {
                        return LOGIC_XAND;
                    }
                    // fall through
                    case 228:
                        break;
                    case 79: {
                        return OP_L10N;
                    }
                    // fall through
                    case 229:
                        break;
                    case 80: {
                        return STRING_TEXT;
                    }
                    // fall through
          case 230:
              break;
                    case 81: {
                        yybegin(YYINITIAL);
                        return STRING_R;
                    }
                    // fall through
                    case 231:
                        break;
                    case 82: {
                        yybegin(YYINITIAL);
                        yypushback(yylength());
                    }
                    // fall through
                    case 232:
                        break;
                    case 83: {
                        yybegin(YYINITIAL);
                        return NUMBER_SUFFIX;
                    }
                    // fall through
                    case 233:
                        break;
                    case 84: {
                        return OP_REM_ASSIGN;
                    }
                    // fall through
                    case 234:
                        break;
                    case 85: {
                        return OP_MUL_ASSIGN;
                    }
                    // fall through
                    case 235:
                        break;
                    case 86: {
                        return OP_ADD_ASSIGN;
                    }
                    // fall through
                    case 236:
                        break;
                    case 87: {
                        return OP_SUB_ASSIGN;
                    }
                    // fall through
                    case 237:
                        break;
                    case 88: {
                        return OP_DIV_FLOOR;
                    }
                    // fall through
                    case 238:
                        break;
                    case 89: {
                        return OP_DIV_ASSIGN;
                    }
                    // fall through
                    case 239:
                        break;
                    case 90: {
                        return OP_DIV_CEIL;
                    }
                    // fall through
                    case 240:
                        break;
                    case 91: {
                        return OP_UNWRAP_ELSE;
                    }
                    // fall through
                    case 241:
                        break;
                    case 92: {
                        return OP_EE;
            }
          // fall through
                    case 242:
                        break;
                    case 93: {
                        return OP_SET_THEN;
                    }
                    // fall through
                    case 243:
                        break;
                    case 94: {
                        return OP_UNWRAP_OR;
                    }
                    // fall through
                    case 244:
                        break;
                    case 95: {
                        return SYMBOW_RAW;
                    }
                    // fall through
                    case 245:
                        break;
                    case 96: {
                        return KW_AS;
                    }
                    // fall through
                    case 246:
                        break;
                    case 97: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 247:
                        break;
                    case 98: {
                        return KW_IF;
                    }
                    // fall through
                    case 248:
                        break;
                    case 99: {
                        return KW_IN;
                    }
                    // fall through
                    case 249:
                        break;
                    case 100: {
                        return KW_IS;
                    }
                    // fall through
                    case 250:
                        break;
                    case 101: {
                        yybegin(TextCapture6);
                        return STRING_L;
                    }
                    // fall through
                    case 251:
                        break;
                    case 102: {
                        yybegin(TextCapture3);
                        return STRING_L;
                    }
                    // fall through
                    case 252:
                        break;
                    case 103: {
                        return DOMAIN_L;
                    }
                    // fall through
                    case 253:
                        break;
                    case 104: {
                        return OP_UNTIL;
                    }
                    // fall through
                    case 254:
                        break;
                    case 105: {
                        return OP_DIV_ROUND;
                    }
                    // fall through
                    case 255:
                        break;
                    case 106: {
                        yybegin(AfterNumber);
                        return DECIMAL;
                    }
                    // fall through
                    case 256:
                        break;
                    case 107: {
                        return OP_ARROW3;
                    }
                    // fall through
                    case 257:
                        break;
                    case 108: {
                        return KW_LET;
                    }
                    // fall through
                    case 258:
                        break;
                    case 109: {
                        return KW_NEW;
            }
          // fall through
                    case 259:
                        break;
                    case 110: {
                        return KW_NOT;
                    }
                    // fall through
                    case 260:
                        break;
                    case 111: {
                        return KW_TRY;
                    }
                    // fall through
                    case 261:
                        break;
                    case 112: {
                        return KW_CASE;
                    }
                    // fall through
                    case 262:
                        break;
                    case 113: {
                        return KW_EACH;
                    }
                    // fall through
                    case 263:
                        break;
                    case 114: {
                        return KW_ELSE;
                    }
                    // fall through
                    case 264:
                        break;
                    case 115: {
                        return KW_FROM;
                    }
                    // fall through
                    case 265:
                        break;
                    case 116: {
                        return KW_LOOP;
                    }
                    // fall through
                    case 266:
                        break;
                    case 117: {
                        return KW_NULL;
                    }
                    // fall through
                    case 267:
                        break;
                    case 118: {
                        return KW_BOOLEAN;
                    }
                    // fall through
                    case 268:
                        break;
                    case 119: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 269:
                        break;
                    case 120: {
                        return KW_WHEN;
                    }
                    // fall through
                    case 270:
                        break;
                    case 121: {
                        return KW_WITH;
                    }
                    // fall through
                    case 271:
                        break;
                    case 122: {
                        return KW_BREAK;
                    }
                    // fall through
                    case 272:
                        break;
                    case 123: {
                        return KW_CATCH;
            }
          // fall through
                    case 273:
                        break;
                    case 124: {
                        return KW_CLASS;
            }
          // fall through
                    case 274:
                        break;
                    case 125: {
                        return KW_ENUMERATE;
            }
          // fall through
                    case 275:
                        break;
                    case 126: {
                        return KW_FLAGS;
            }
          // fall through
                    case 276:
                        break;
                    case 127: {
                        return KW_IMPLY;
            }
          // fall through
                    case 277:
                        break;
                    case 128: {
                        return KW_MACRO;
                    }
                    // fall through
                    case 278:
                        break;
                    case 129: {
                        return KW_MATCH;
            }
          // fall through
                    case 279:
                        break;
                    case 130: {
                        return KW_RAISE;
                    }
          // fall through
                    case 280:
                        break;
                    case 131: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 281:
                        break;
                    case 132: {
                        return KW_UNION;
                    }
                    // fall through
                    case 282:
                        break;
                    case 133: {
                        return KW_UNITE;
                    }
                    // fall through
                    case 283:
                        break;
                    case 134: {
                        return KW_UNTIL;
                    }
                    // fall through
                    case 284:
                        break;
                    case 135: {
                        return KW_USING;
            }
          // fall through
                    case 285:
                        break;
                    case 136: {
                        return KW_WHERE;
                    }
                    // fall through
                    case 286:
                        break;
                    case 137:
            { return KW_WHILE;
            }
          // fall through
                    case 287:
                        break;
                    case 138:
            { return KW_YIELD;
            }
          // fall through
                    case 288:
                        break;
                    case 139: {
                        return KW_TEMPLATE;
                    }
                    // fall through
                    case 289:
                        break;
                    case 140:
            { return KW_LAMBDA;
            }
          // fall through
                    case 290:
                        break;
                    case 141:
            { return KW_NEURAL;
            }
          // fall through
                    case 291:
                        break;
                    case 142:
            { return KW_OBJECT;
            }
          // fall through
                    case 292:
                        break;
                    case 143:
            { return KW_RESUME;
            }
          // fall through
                    case 293:
                        break;
                    case 144:
            { return KW_RETURN;
            }
          // fall through
                    case 294:
                        break;
                    case 145:
            { return KW_COMPONENT;
            }
          // fall through
                    case 295:
                        break;
                    case 146:
            { return KW_EXCLUDE;
            }
          // fall through
                    case 296:
                        break;
                    case 147: {
                        return KW_CONTINUE;
                    }
                    // fall through
                    case 297:
                        break;
                    case 148:
            { return KW_NAMESPACE;
            }
          // fall through
                    case 298:
                        break;
                    case 149:
            { return KW_SINGLETON;
            }
          // fall through
                    case 299: break;
          case 150:
            { return KW_THROUGH;
            }
          // fall through
          case 300: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
