// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;
import java.util.LinkedList;

public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CommentBlock = 2;
  public static final int TextCapture6 = 4;
  public static final int TextCapture3 = 6;
  public static final int TextCapture2 = 8;
  public static final int TextCapture1 = 10;
  public static final int AfterNumber = 12;
  public static final int AfterNumberBase = 14;
  public static final int AfterNumberExp = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\1\u2100\1\u2300"+
    "\1\u2400\1\u2100\1\u2500\1\u2600\1\u2700\1\u2100\1\u2800\1\u2900"+
    "\2\u2100\31\u0100\1\u2a00\121\u0100\1\u2b00\4\u0100\1\u2c00\1\u0100"+
    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\53\u0100\1\u3300"+
    "\10\u3400\31\u2100\1\u0100\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u0100"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u2100"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00"+
    "\1\u5000\1\u5100\1\u5200\1\u5300\1\u2100\1\u5400\1\u5500\1\u5600"+
    "\1\u2100\3\u0100\1\u5700\1\u5800\1\u5900\12\u2100\4\u0100\1\u5a00"+
    "\17\u2100\2\u0100\1\u5b00\41\u2100\2\u0100\1\u5c00\1\u5d00\2\u2100"+
    "\1\u5e00\1\u5f00\27\u0100\1\u6000\2\u0100\1\u6100\45\u2100\1\u0100"+
    "\1\u6200\1\u6300\11\u2100\1\u6400\24\u2100\1\u6500\1\u6600\1\u2100"+
    "\1\u6700\1\u6800\1\u6900\1\u6a00\2\u2100\1\u6b00\5\u2100\1\u6c00"+
    "\1\u6d00\1\u6e00\5\u2100\1\u6f00\1\u7000\4\u2100\1\u7100\21\u2100"+
    "\246\u0100\1\u7200\20\u0100\1\u7300\1\u7400\25\u0100\1\u7500\34\u0100"+
    "\1\u7600\14\u2100\2\u0100\1\u7700\u0b06\u2100\1\u7800\u02fe\u2100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\13\32\1\33"+
    "\1\32\1\34\14\32\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\32\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\6\0"+
    "\1\1\32\0\1\1\10\0\1\100\1\101\1\0\1\102"+
    "\1\0\1\100\6\0\1\101\1\103\1\104\2\0\1\101"+
    "\5\0\27\101\1\105\37\101\1\106\u01ca\101\4\0\14\101"+
    "\16\0\5\101\7\0\1\101\1\0\1\101\21\0\160\104"+
    "\5\101\1\0\2\101\3\0\3\101\1\0\1\101\6\0"+
    "\1\101\1\104\3\101\1\0\1\101\1\0\24\101\1\0"+
    "\123\101\1\0\213\101\1\0\5\104\2\0\246\101\1\0"+
    "\46\101\2\0\1\101\6\0\51\101\10\0\55\104\1\0"+
    "\1\104\1\0\2\104\1\0\2\104\1\0\1\104\10\0"+
    "\33\101\4\0\4\101\35\0\13\104\5\0\53\101\37\104"+
    "\4\0\2\101\1\104\143\101\1\0\1\101\7\104\2\0"+
    "\6\104\2\101\2\104\1\0\4\104\2\101\12\104\3\101"+
    "\2\0\1\101\20\0\1\101\1\104\36\101\33\104\2\0"+
    "\131\101\13\104\1\101\16\0\12\104\41\101\11\104\2\101"+
    "\4\0\1\101\2\0\1\104\2\0\26\101\4\104\1\101"+
    "\11\104\1\101\3\104\1\101\5\104\22\0\31\101\3\104"+
    "\4\0\13\101\65\0\25\101\1\0\10\101\25\0\17\104"+
    "\1\0\41\104\66\101\3\104\1\101\22\104\1\101\7\104"+
    "\12\101\2\104\2\0\12\104\1\0\20\101\3\104\1\0"+
    "\10\101\2\0\2\101\2\0\26\101\1\0\7\101\1\0"+
    "\1\101\3\0\4\101\2\0\1\104\1\101\7\104\2\0"+
    "\2\104\2\0\3\104\1\101\10\0\1\104\4\0\2\101"+
    "\1\0\3\101\2\104\2\0\12\104\2\101\12\0\1\101"+
    "\1\0\1\104\2\0\3\104\1\0\6\101\4\0\2\101"+
    "\2\0\26\101\1\0\7\101\1\0\2\101\1\0\2\101"+
    "\1\0\2\101\2\0\1\104\1\0\5\104\4\0\2\104"+
    "\2\0\3\104\3\0\1\104\7\0\4\101\1\0\1\101"+
    "\7\0\14\104\3\101\1\104\13\0\3\104\1\0\11\101"+
    "\1\0\3\101\1\0\26\101\1\0\7\101\1\0\2\101"+
    "\1\0\5\101\2\0\1\104\1\101\10\104\1\0\3\104"+
    "\1\0\3\104\2\0\1\101\17\0\2\101\2\104\2\0"+
    "\12\104\11\0\1\101\6\104\1\0\3\104\1\0\10\101"+
    "\2\0\2\101\2\0\26\101\1\0\7\101\1\0\2\101"+
    "\1\0\5\101\2\0\1\104\1\101\7\104\2\0\2\104"+
    "\2\0\3\104\10\0\2\104\4\0\2\101\1\0\3\101"+
    "\2\104\2\0\12\104\1\0\1\101\20\0\1\104\1\101"+
    "\1\0\6\101\3\0\3\101\1\0\4\101\3\0\2\101"+
    "\1\0\1\101\1\0\2\101\3\0\2\101\3\0\3\101"+
    "\3\0\14\101\4\0\5\104\3\0\3\104\1\0\4\104"+
    "\2\0\1\101\6\0\1\104\16\0\12\104\20\0\5\104"+
    "\10\101\1\0\3\101\1\0\27\101\1\0\20\101\3\0"+
    "\1\101\7\104\1\0\3\104\1\0\4\104\7\0\2\104"+
    "\1\0\3\101\5\0\2\101\2\104\2\0\12\104\20\0"+
    "\1\101\3\104\1\0\10\101\1\0\3\101\1\0\27\101"+
    "\1\0\12\101\1\0\5\101\2\0\1\104\1\101\7\104"+
    "\1\0\3\104\1\0\4\104\7\0\2\104\7\0\1\101"+
    "\1\0\2\101\2\104\2\0\12\104\1\0\2\101\15\0"+
    "\4\104\1\0\10\101\1\0\3\101\1\0\51\101\2\104"+
    "\1\101\7\104\1\0\3\104\1\0\4\104\1\101\5\0"+
    "\3\101\1\104\7\0\3\101\2\104\2\0\12\104\12\0"+
    "\6\101\2\0\2\104\1\0\22\101\3\0\30\101\1\0"+
    "\11\101\1\0\1\101\2\0\7\101\3\0\1\104\4\0"+
    "\6\104\1\0\1\104\1\0\10\104\6\0\12\104\2\0"+
    "\2\104\15\0\60\101\1\104\1\101\10\104\5\0\7\101"+
    "\10\104\1\0\12\104\47\0\2\101\1\0\1\101\1\0"+
    "\5\101\1\0\30\101\1\0\1\101\1\0\12\101\1\104"+
    "\1\101\12\104\1\101\2\0\5\101\1\0\1\101\1\0"+
    "\6\104\2\0\12\104\2\0\4\101\40\0\1\101\27\0"+
    "\2\104\6\0\12\104\13\0\1\104\1\0\1\104\1\0"+
    "\1\104\4\0\2\104\10\101\1\0\44\101\4\0\24\104"+
    "\1\0\2\104\5\101\13\104\1\0\44\104\11\0\1\104"+
    "\71\0\53\101\24\104\1\101\12\104\6\0\6\101\4\104"+
    "\4\101\3\104\1\101\3\104\2\101\7\104\3\101\4\104"+
    "\15\101\14\104\1\101\17\104\2\0\46\101\1\0\1\101"+
    "\5\0\1\101\2\0\53\101\1\0\115\101\1\0\4\101"+
    "\2\0\7\101\1\0\1\101\1\0\4\101\2\0\51\101"+
    "\1\0\4\101\2\0\41\101\1\0\4\101\2\0\7\101"+
    "\1\0\1\101\1\0\4\101\2\0\17\101\1\0\71\101"+
    "\1\0\4\101\2\0\103\101\2\0\3\104\11\0\11\104"+
    "\16\0\20\101\20\0\126\101\2\0\6\101\3\0\u016c\101"+
    "\2\0\21\101\1\1\32\101\5\0\113\101\3\0\13\101"+
    "\7\0\15\101\1\0\4\101\3\104\13\0\22\101\3\104"+
    "\13\0\22\101\2\104\14\0\15\101\1\0\3\101\1\0"+
    "\2\104\14\0\64\101\40\104\3\0\1\101\4\0\1\101"+
    "\1\104\2\0\12\104\41\0\3\104\2\0\12\104\6\0"+
    "\131\101\7\0\51\101\1\104\1\101\5\0\106\101\12\0"+
    "\37\101\1\0\14\104\4\0\14\104\12\0\12\104\36\101"+
    "\2\0\5\101\13\0\54\101\4\0\32\101\6\0\13\104"+
    "\45\0\27\101\5\104\4\0\65\101\12\104\1\0\35\104"+
    "\2\0\13\104\6\0\12\104\15\0\1\101\10\0\16\104"+
    "\102\0\5\104\57\101\21\104\7\101\4\0\12\104\21\0"+
    "\11\104\14\0\3\104\36\101\15\104\2\101\12\104\54\101"+
    "\16\104\14\0\44\101\24\104\10\0\12\104\3\0\3\101"+
    "\12\104\44\101\2\0\11\101\7\0\53\101\2\0\3\101"+
    "\20\0\3\104\1\0\25\104\4\101\1\104\6\101\1\104"+
    "\2\101\3\104\1\101\5\0\300\101\72\104\1\0\5\104"+
    "\26\101\2\0\6\101\2\0\46\101\2\0\6\101\2\0"+
    "\10\101\1\0\1\101\1\0\1\101\1\0\1\101\1\0"+
    "\37\101\2\0\65\101\1\0\7\101\1\0\1\101\3\0"+
    "\3\101\1\0\7\101\3\0\4\101\2\0\6\101\4\0"+
    "\15\101\5\0\3\101\1\0\7\101\3\0\13\1\32\0"+
    "\1\107\1\110\1\0\2\1\5\0\1\1\13\0\1\111"+
    "\3\0\2\104\1\0\1\112\1\0\1\113\1\114\1\115"+
    "\4\0\1\116\5\0\1\117\1\120\1\0\1\104\7\0"+
    "\1\121\2\0\1\1\21\0\1\101\15\0\1\101\20\0"+
    "\15\101\63\0\15\104\4\0\1\104\3\0\14\104\21\0"+
    "\1\101\1\122\3\0\1\101\1\0\1\123\12\101\1\0"+
    "\1\101\2\0\6\101\6\0\1\101\1\0\1\101\1\0"+
    "\1\101\1\0\20\101\2\0\4\101\5\0\5\101\4\0"+
    "\1\101\21\0\51\101\7\0\1\124\36\0\1\125\42\0"+
    "\1\126\41\0\1\127\20\0\1\130\17\0\1\113\4\0"+
    "\1\131\1\132\1\133\12\0\1\134\1\135\15\0\1\23"+
    "\1\136\50\0\1\137\3\0\1\140\1\141\4\0\1\142"+
    "\1\143\117\0\1\144\1\145\1\146\32\0\1\147\1\150"+
    "\56\0\1\151\1\152\1\153\1\154\121\0\1\5\u0203\0"+
    "\1\103\206\0\1\155\1\156\14\0\1\157\214\0\1\160"+
    "\1\161\1\162\1\163\256\0\1\127\51\0\1\164\35\0"+
    "\1\140\1\141\201\0\57\101\1\0\57\101\1\0\205\101"+
    "\6\0\4\101\3\104\2\101\14\0\46\101\1\0\1\101"+
    "\5\0\1\101\2\0\70\101\7\0\1\101\17\0\1\104"+
    "\27\101\11\0\7\101\1\0\7\101\1\0\7\101\1\0"+
    "\7\101\1\0\7\101\1\0\7\101\1\0\7\101\1\0"+
    "\7\101\1\0\40\104\54\0\1\136\22\0\1\165\300\0"+
    "\1\1\1\0\1\166\2\0\3\101\31\0\11\101\6\104"+
    "\1\0\5\101\2\0\5\101\4\0\126\101\2\0\2\104"+
    "\2\0\3\101\1\0\132\101\1\0\4\101\5\0\53\101"+
    "\1\0\136\101\21\0\33\101\65\0\306\101\112\0\360\101"+
    "\20\0\215\101\103\0\56\101\2\0\15\101\3\0\20\101"+
    "\12\104\2\101\24\0\57\101\1\104\4\0\12\104\1\0"+
    "\37\101\2\104\120\101\2\104\45\0\11\101\2\0\147\101"+
    "\2\0\65\101\2\0\5\101\60\0\13\101\1\104\3\101"+
    "\1\104\4\101\1\104\27\101\5\104\30\0\64\101\14\0"+
    "\2\104\62\101\22\104\12\0\12\104\6\0\22\104\6\101"+
    "\3\0\1\101\1\0\2\101\13\104\34\101\10\104\2\0"+
    "\27\101\15\104\14\0\35\101\3\0\4\104\57\101\16\104"+
    "\16\0\1\101\12\104\6\0\5\101\1\104\12\101\12\104"+
    "\5\101\1\0\51\101\16\104\11\0\3\101\1\104\10\101"+
    "\2\104\2\0\12\104\6\0\27\101\3\0\1\101\3\104"+
    "\62\101\1\104\1\101\3\104\2\101\2\104\5\101\2\104"+
    "\1\101\1\104\1\101\30\0\3\101\2\0\13\101\5\104"+
    "\2\0\3\101\2\104\12\0\6\101\2\0\6\101\2\0"+
    "\6\101\11\0\7\101\1\0\7\101\1\0\53\101\1\0"+
    "\14\101\10\0\163\101\10\104\1\0\2\104\2\0\12\104"+
    "\6\0\244\101\14\0\27\101\4\0\61\101\u0104\0\156\101"+
    "\2\0\152\101\46\0\7\101\14\0\5\101\5\0\1\101"+
    "\1\104\12\101\1\0\15\101\1\0\5\101\1\0\1\101"+
    "\1\0\2\101\1\0\2\101\1\0\154\101\41\0\213\101"+
    "\6\0\332\101\22\0\100\101\2\0\66\101\50\0\12\101"+
    "\6\0\20\104\20\0\20\104\3\0\2\104\30\0\3\104"+
    "\41\0\1\101\1\0\1\101\3\0\1\101\1\0\1\101"+
    "\1\0\1\101\1\0\1\101\1\0\176\101\4\0\1\167"+
    "\12\0\1\16\3\0\12\104\1\23\4\0\1\170\1\0"+
    "\32\101\4\0\1\104\1\0\32\101\13\0\70\101\2\104"+
    "\37\101\3\0\6\101\2\0\6\101\2\0\6\101\2\0"+
    "\3\101\43\0\14\101\1\0\32\101\1\0\23\101\1\0"+
    "\2\101\1\0\17\101\2\0\16\101\42\0\173\101\105\0"+
    "\65\101\210\0\1\104\202\0\35\101\3\0\61\101\17\0"+
    "\1\104\37\0\40\101\15\0\36\101\5\0\46\101\5\104"+
    "\5\0\36\101\2\0\44\101\4\0\10\101\1\0\5\101"+
    "\52\0\236\101\2\0\12\104\6\0\44\101\4\0\44\101"+
    "\4\0\50\101\10\0\64\101\234\0\67\101\11\0\26\101"+
    "\12\0\10\101\230\0\6\101\2\0\1\101\1\0\54\101"+
    "\1\0\2\101\3\0\1\101\2\0\27\101\12\0\27\101"+
    "\11\0\37\101\101\0\23\101\1\0\2\101\12\0\26\101"+
    "\12\0\32\101\106\0\70\101\6\0\2\101\100\0\1\101"+
    "\3\104\1\0\2\104\5\0\4\104\4\101\1\0\3\101"+
    "\1\0\35\101\2\0\3\104\4\0\1\104\40\0\35\101"+
    "\3\0\35\101\43\0\10\101\1\0\34\101\2\104\31\0"+
    "\66\101\12\0\26\101\12\0\23\101\15\0\22\101\156\0"+
    "\111\101\67\0\63\101\15\0\63\101\15\0\44\101\4\104"+
    "\10\0\12\104\306\0\35\101\12\0\1\101\10\0\26\101"+
    "\13\104\217\0\27\101\11\0\3\104\65\101\17\104\37\0"+
    "\12\104\17\0\4\104\55\101\13\104\25\0\31\101\7\0"+
    "\12\104\6\0\3\104\44\101\16\104\1\0\12\104\4\0"+
    "\1\101\2\104\11\0\43\101\1\104\2\0\1\101\11\0"+
    "\3\104\60\101\16\104\4\101\4\0\4\104\3\0\12\104"+
    "\1\101\1\0\1\101\43\0\22\101\1\0\31\101\14\104"+
    "\6\0\1\104\101\0\7\101\1\0\1\101\1\0\4\101"+
    "\1\0\17\101\1\0\12\101\7\0\57\101\14\104\5\0"+
    "\12\104\6\0\4\104\1\0\10\101\2\0\2\101\2\0"+
    "\26\101\1\0\7\101\1\0\2\101\1\0\5\101\1\0"+
    "\2\104\1\101\7\104\2\0\2\104\2\0\3\104\2\0"+
    "\1\101\6\0\1\104\5\0\5\101\2\104\2\0\7\104"+
    "\3\0\5\104\213\0\65\101\22\104\4\101\5\0\12\104"+
    "\4\0\1\104\1\101\40\0\60\101\24\104\2\101\1\0"+
    "\1\101\10\0\12\104\246\0\57\101\7\104\2\0\11\104"+
    "\27\0\4\101\2\104\42\0\60\101\21\104\3\0\1\101"+
    "\13\0\12\104\46\0\53\101\15\104\1\101\7\0\12\104"+
    "\66\0\33\101\2\0\17\104\4\0\12\104\306\0\54\101"+
    "\17\104\145\0\100\101\12\104\25\0\1\101\240\0\10\101"+
    "\2\0\47\101\7\104\2\0\7\104\1\101\1\0\1\101"+
    "\1\104\33\0\1\101\12\104\50\101\7\104\1\101\4\104"+
    "\10\0\1\104\10\0\1\101\13\104\56\101\20\104\3\0"+
    "\1\101\42\0\71\101\7\0\11\101\1\0\45\101\10\104"+
    "\1\0\10\104\1\101\17\0\12\104\30\0\36\101\2\0"+
    "\26\104\1\0\16\104\111\0\7\101\1\0\2\101\1\0"+
    "\46\101\6\104\3\0\1\104\1\0\2\104\1\0\7\104"+
    "\1\101\1\104\10\0\12\104\6\0\6\101\1\0\2\101"+
    "\1\0\40\101\5\104\1\0\2\104\1\0\5\104\1\101"+
    "\7\0\12\104\u0136\0\23\101\4\104\11\0\232\101\146\0"+
    "\157\101\21\0\304\101\274\0\57\101\321\0\107\101\271\0"+
    "\71\101\7\0\37\101\1\0\12\104\146\0\36\101\2\0"+
    "\5\104\13\0\60\101\7\104\11\0\4\101\14\0\12\104"+
    "\11\0\25\101\5\0\23\101\260\0\100\101\200\0\113\101"+
    "\4\0\1\104\1\101\67\104\7\0\4\104\15\101\100\0"+
    "\2\101\1\0\1\101\34\0\370\101\10\0\363\101\15\0"+
    "\37\101\61\0\3\101\21\0\4\101\10\0\u018c\101\4\0"+
    "\153\101\5\0\15\101\3\0\11\101\7\0\12\101\3\0"+
    "\2\104\306\0\5\104\3\0\6\104\10\0\10\104\2\0"+
    "\7\104\36\0\4\104\224\0\3\104\273\0\125\101\1\0"+
    "\107\101\1\0\2\101\2\0\1\101\2\0\2\101\2\0"+
    "\4\101\1\0\14\101\1\0\1\101\1\0\7\101\1\0"+
    "\101\101\1\0\4\101\2\0\10\101\1\0\7\101\1\0"+
    "\34\101\1\0\4\101\1\0\5\101\1\0\1\101\3\0"+
    "\7\101\1\0\u0154\101\2\0\31\101\1\0\31\101\1\0"+
    "\37\101\1\0\31\101\1\0\37\101\1\0\31\101\1\0"+
    "\37\101\1\0\31\101\1\0\37\101\1\0\31\101\1\0"+
    "\10\101\2\0\151\104\4\0\62\104\10\0\1\104\16\0"+
    "\1\104\26\0\5\104\1\0\17\104\120\0\7\104\1\0"+
    "\21\104\2\0\7\104\1\0\2\104\1\0\5\104\325\0"+
    "\55\101\3\0\7\104\7\101\2\0\12\104\4\0\1\101"+
    "\u0171\0\54\101\16\104\6\0\305\101\13\0\7\104\51\0"+
    "\104\101\7\104\1\101\4\0\12\104\246\0\4\101\1\0"+
    "\33\101\1\0\2\101\1\0\1\101\2\0\1\101\1\0"+
    "\12\101\1\0\4\101\1\0\1\101\1\0\1\101\6\0"+
    "\1\101\4\0\1\101\1\0\1\101\1\0\1\101\1\0"+
    "\3\101\1\0\2\101\1\0\1\101\2\0\1\101\1\0"+
    "\1\101\1\0\1\101\1\0\1\101\1\0\1\101\1\0"+
    "\2\101\1\0\1\101\2\0\4\101\1\0\7\101\1\0"+
    "\4\101\1\0\4\101\1\0\1\101\1\0\12\101\1\0"+
    "\21\101\5\0\3\101\1\0\5\101\1\0\21\101\104\0"+
    "\327\101\51\0\65\101\13\0\336\101\2\0\u0182\101\16\0"+
    "\u0131\101\37\0\36\101\342\0\360\104\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\1\1\34\1\35\1\1"+
    "\22\32\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\21\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\5\120\4\121\1\122\2\123"+
    "\1\124\3\123\1\1\1\125\1\126\2\1\1\127\1\130"+
    "\1\0\1\131\1\132\2\0\1\133\1\134\1\135\1\46"+
    "\1\136\1\137\1\140\2\0\1\141\1\142\1\143\1\144"+
    "\1\145\1\146\1\147\1\0\1\150\1\151\13\32\1\152"+
    "\4\32\1\153\1\32\1\154\1\155\30\32\1\143\1\156"+
    "\4\0\1\124\1\157\1\0\1\160\3\0\1\161\1\131"+
    "\1\162\1\163\1\164\1\165\1\166\1\143\1\167\1\170"+
    "\1\151\7\32\1\171\5\32\1\172\1\32\1\152\5\32"+
    "\1\173\7\32\1\174\1\63\1\175\12\32\1\176\11\32"+
    "\2\0\1\125\1\32\1\177\4\32\1\200\1\201\1\202"+
    "\5\32\1\203\1\152\5\32\1\172\6\32\1\204\10\32"+
    "\1\205\1\176\1\206\5\32\1\207\3\32\1\210\1\32"+
    "\1\157\1\211\1\212\1\213\3\32\1\202\3\32\1\214"+
    "\4\32\1\215\3\32\1\216\1\217\1\220\3\32\1\221"+
    "\5\32\1\222\1\223\1\224\1\225\1\226\1\227\1\230"+
    "\1\32\1\231\4\32\1\215\1\32\1\232\5\32\1\233"+
    "\1\32\1\234\1\235\1\236\1\237\1\32\1\213\1\32"+
    "\1\226\1\240\3\32\1\241\12\32\1\242\11\32\1\243"+
    "\1\244\1\32\1\243\1\245";

  private static int [] zzUnpackAction() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\171\0\362\0\u016b\0\u01e4\0\u025d\0\u02d6\0\u034f"+
    "\0\u03c8\0\u0441\0\u04ba\0\u0441\0\u0533\0\u05ac\0\u0625\0\u069e"+
    "\0\u0717\0\u0790\0\u0441\0\u0441\0\u0809\0\u0882\0\u0441\0\u08fb"+
    "\0\u0974\0\u09ed\0\u0a66\0\u0adf\0\u0441\0\u0b58\0\u0bd1\0\u0c4a"+
    "\0\u0cc3\0\u0d3c\0\u0db5\0\u0441\0\u0e2e\0\u0441\0\u0441\0\u0ea7"+
    "\0\u0f20\0\u0f99\0\u1012\0\u108b\0\u1104\0\u117d\0\u11f6\0\u126f"+
    "\0\u12e8\0\u1361\0\u13da\0\u1453\0\u14cc\0\u1545\0\u15be\0\u1637"+
    "\0\u16b0\0\u1729\0\u0441\0\u17a2\0\u0441\0\u181b\0\u1894\0\u0441"+
    "\0\u0809\0\u0441\0\u0441\0\u0441\0\u0441\0\u190d\0\u0441\0\u0441"+
    "\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441"+
    "\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441"+
    "\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441"+
    "\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u1986\0\u0441\0\u0441"+
    "\0\u0441\0\u0441\0\u0441\0\u0441\0\u0441\0\u19ff\0\u1a78\0\u1af1"+
    "\0\u0441\0\u1b6a\0\u1be3\0\u1c5c\0\u1cd5\0\u1d4e\0\u0441\0\u0441"+
    "\0\u1dc7\0\u1e40\0\u1eb9\0\u1f32\0\u1fab\0\u2024\0\u209d\0\u0441"+
    "\0\u2116\0\u218f\0\u218f\0\u0441\0\u2208\0\u2281\0\u0441\0\u22fa"+
    "\0\u2373\0\u0441\0\u0441\0\u0441\0\u23ec\0\u2465\0\u0441\0\u24de"+
    "\0\u2557\0\u25d0\0\u0441\0\u0441\0\u2649\0\u26c2\0\u0441\0\u0441"+
    "\0\u0441\0\u0ea7\0\u0441\0\u273b\0\u27b4\0\u282d\0\u28a6\0\u291f"+
    "\0\u2998\0\u2a11\0\u2a8a\0\u2b03\0\u2b7c\0\u2bf5\0\u2c6e\0\u0db5"+
    "\0\u2ce7\0\u2d60\0\u2dd9\0\u2e52\0\u0db5\0\u2ecb\0\u2f44\0\u0db5"+
    "\0\u2fbd\0\u3036\0\u30af\0\u3128\0\u31a1\0\u321a\0\u3293\0\u330c"+
    "\0\u3385\0\u33fe\0\u3477\0\u34f0\0\u3569\0\u35e2\0\u365b\0\u36d4"+
    "\0\u374d\0\u37c6\0\u383f\0\u38b8\0\u3931\0\u39aa\0\u3a23\0\u3a9c"+
    "\0\u3b15\0\u0441\0\u3b8e\0\u3c07\0\u3c80\0\u1eb9\0\u0441\0\u3cf9"+
    "\0\u3d72\0\u3d72\0\u3deb\0\u3e64\0\u3edd\0\u0441\0\u0441\0\u0441"+
    "\0\u0441\0\u0441\0\u0441\0\u3f56\0\u0441\0\u0441\0\u0441\0\u0441"+
    "\0\u3fcf\0\u4048\0\u40c1\0\u413a\0\u41b3\0\u422c\0\u42a5\0\u0db5"+
    "\0\u431e\0\u4397\0\u4410\0\u4489\0\u4502\0\u457b\0\u45f4\0\u466d"+
    "\0\u46e6\0\u475f\0\u47d8\0\u4851\0\u48ca\0\u0db5\0\u4943\0\u49bc"+
    "\0\u4a35\0\u4aae\0\u4b27\0\u4ba0\0\u4c19\0\u0db5\0\u0db5\0\u0db5"+
    "\0\u4c92\0\u4d0b\0\u4d84\0\u4dfd\0\u4e76\0\u4eef\0\u4f68\0\u4fe1"+
    "\0\u505a\0\u50d3\0\u514c\0\u51c5\0\u523e\0\u52b7\0\u5330\0\u53a9"+
    "\0\u5422\0\u549b\0\u5514\0\u558d\0\u1f32\0\u5606\0\u567f\0\u56f8"+
    "\0\u0db5\0\u5771\0\u57ea\0\u5863\0\u58dc\0\u0db5\0\u0db5\0\u5955"+
    "\0\u59ce\0\u5a47\0\u5ac0\0\u5b39\0\u5bb2\0\u0db5\0\u5c2b\0\u5ca4"+
    "\0\u5d1d\0\u5d96\0\u5e0f\0\u5e88\0\u0db5\0\u5f01\0\u5f7a\0\u5ff3"+
    "\0\u606c\0\u60e5\0\u615e\0\u0db5\0\u61d7\0\u6250\0\u62c9\0\u6342"+
    "\0\u63bb\0\u6434\0\u64ad\0\u6526\0\u0db5\0\u0441\0\u0db5\0\u659f"+
    "\0\u6618\0\u6691\0\u670a\0\u6783\0\u0db5\0\u67fc\0\u6875\0\u68ee"+
    "\0\u0db5\0\u6967\0\u69e0\0\u0db5\0\u0db5\0\u0db5\0\u6a59\0\u6ad2"+
    "\0\u6b4b\0\u0db5\0\u6bc4\0\u6c3d\0\u6cb6\0\u0db5\0\u6d2f\0\u6da8"+
    "\0\u6e21\0\u6e9a\0\u0db5\0\u6f13\0\u6f8c\0\u7005\0\u0db5\0\u0db5"+
    "\0\u0db5\0\u707e\0\u70f7\0\u7170\0\u0db5\0\u71e9\0\u7262\0\u72db"+
    "\0\u7354\0\u73cd\0\u0db5\0\u0db5\0\u0db5\0\u0db5\0\u7446\0\u0db5"+
    "\0\u0db5\0\u74bf\0\u0db5\0\u7538\0\u75b1\0\u762a\0\u76a3\0\u771c"+
    "\0\u7795\0\u0db5\0\u780e\0\u7887\0\u7900\0\u7979\0\u79f2\0\u0db5"+
    "\0\u7a6b\0\u0db5\0\u0db5\0\u0db5\0\u0db5\0\u7ae4\0\u7b5d\0\u7bd6"+
    "\0\u0441\0\u0db5\0\u7c4f\0\u7cc8\0\u7d41\0\u0db5\0\u7dba\0\u7e33"+
    "\0\u7eac\0\u7f25\0\u7f9e\0\u8017\0\u8090\0\u8109\0\u8182\0\u81fb"+
    "\0\u0db5\0\u8274\0\u82ed\0\u8366\0\u83df\0\u8458\0\u84d1\0\u854a"+
    "\0\u85c3\0\u863c\0\u86b5\0\u0db5\0\u872e\0\u0441\0\u0db5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\3\43\1\44\1\45\1\46\1\47\1\43\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\43"+
    "\1\60\2\43\1\61\1\62\1\63\1\64\1\43\1\65"+
    "\1\66\1\67\1\70\1\43\1\71\1\43\1\72\1\43"+
    "\1\73\1\74\1\75\1\12\1\76\1\43\1\77\1\100"+
    "\1\12\1\101\1\102\1\103\1\104\1\105\1\12\1\106"+
    "\1\107\1\110\1\111\1\12\1\20\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144"+
    "\1\145\1\146\1\147\1\150\1\12\1\151\1\152\1\153"+
    "\1\154\1\155\1\31\1\14\1\41\5\156\1\157\17\156"+
    "\1\160\1\156\1\161\125\156\1\162\13\156\4\163\1\164"+
    "\164\163\11\165\1\166\157\165\4\163\1\167\164\163\11\165"+
    "\1\167\157\165\14\170\1\171\15\170\3\172\4\170\1\172"+
    "\1\173\31\172\5\170\1\172\10\170\1\174\4\170\1\175"+
    "\51\170\14\12\1\176\5\12\1\177\7\12\3\177\6\12"+
    "\31\177\16\12\1\200\72\12\1\201\1\202\1\12\1\202"+
    "\2\12\1\203\74\12\1\204\51\12\172\0\2\13\172\0"+
    "\1\205\164\0\2\16\1\0\166\16\27\0\1\206\126\0"+
    "\1\206\40\0\1\207\152\0\1\125\171\0\1\210\146\0"+
    "\1\211\36\0\1\212\170\0\1\213\170\0\1\214\1\150"+
    "\161\0\1\215\145\0\1\215\11\0\1\102\10\0\1\216"+
    "\5\0\1\217\2\0\1\120\6\0\1\220\125\0\1\216"+
    "\22\0\1\221\1\0\1\33\16\0\1\222\152\0\1\127"+
    "\4\0\1\223\137\0\1\223\5\0\1\224\1\225\10\0"+
    "\1\115\6\0\1\131\170\0\1\226\1\117\167\0\1\132"+
    "\165\0\1\223\2\0\1\227\1\0\1\230\137\0\1\230"+
    "\20\0\1\116\17\0\1\231\152\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\31\43\5\0\1\43\2\0\1\43"+
    "\117\0\1\155\1\112\21\0\1\105\112\0\42\232\1\233"+
    "\126\232\22\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\21\43\1\234\7\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\20\43\1\235"+
    "\10\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\1\236\12\43\1\237\2\43"+
    "\1\240\12\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\4\43\1\241\24\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\1\242\12\43\1\243\1\43\1\244"+
    "\10\43\1\245\2\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\1\246\12\43"+
    "\1\247\1\43\1\250\1\251\1\43\1\252\2\43\1\253"+
    "\5\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\4\43\1\254\24\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\5\43\1\255\6\43\1\256\1\257\3\43"+
    "\1\260\7\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\1\261\3\43\1\262"+
    "\11\43\1\263\12\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\1\264\3\43"+
    "\1\265\3\43\1\266\20\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\1\267"+
    "\3\43\1\270\3\43\1\271\5\43\1\272\4\43\1\273"+
    "\5\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\1\43\1\274\27\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\1\275\3\43\1\276\24\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\10\43\1\277\11\43\1\300\6\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\4\43\1\301\13\43\1\302\6\43\1\303\1\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\15\43\1\304\3\43\1\305\7\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\7\43\1\306\1\307\20\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\10\43\1\310\20\43\5\0\1\43\2\0"+
    "\1\43\161\0\1\126\115\0\1\76\7\0\3\76\6\0"+
    "\31\76\122\0\1\132\1\130\1\131\161\0\1\216\5\0"+
    "\1\217\11\0\1\220\125\0\1\216\7\0\1\224\1\311"+
    "\162\0\5\156\1\0\17\156\1\0\1\156\1\0\141\156"+
    "\27\0\1\312\126\0\1\312\17\0\1\224\163\0\5\156"+
    "\1\224\17\156\1\0\1\156\1\0\141\156\4\163\1\0"+
    "\164\163\4\0\1\313\164\0\11\165\1\0\157\165\11\0"+
    "\1\314\173\0\1\315\176\0\1\172\7\0\3\172\4\0"+
    "\1\172\1\0\31\172\5\0\1\172\2\0\1\172\64\0"+
    "\42\316\1\317\126\316\22\0\1\320\7\0\3\320\6\0"+
    "\31\320\112\0\1\321\1\0\1\321\2\0\1\322\162\0"+
    "\1\323\174\0\1\324\1\0\1\177\7\0\3\177\4\0"+
    "\1\325\1\0\31\177\111\0\1\204\176\0\1\203\152\0"+
    "\1\326\203\0\2\327\5\0\1\327\12\0\1\327\35\0"+
    "\1\327\102\0\1\330\170\0\1\331\177\0\1\104\4\0"+
    "\2\332\137\0\1\104\42\0\1\333\150\0\1\333\145\0"+
    "\1\333\24\0\1\334\170\0\1\33\165\0\2\335\5\0"+
    "\1\335\1\336\11\0\1\335\35\0\1\335\120\0\1\337"+
    "\144\0\1\340\16\0\1\43\5\0\1\340\1\0\3\43"+
    "\4\0\1\43\1\0\31\43\5\0\1\43\2\0\1\43"+
    "\62\0\2\340\22\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\4\43\1\341\24\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\21\43"+
    "\1\342\1\343\6\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\1\344\30\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\15\43\1\345\13\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\5\43\1\250\23\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\2\43"+
    "\1\346\26\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\21\43\1\347\7\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\3\43\1\350\17\43\1\351\5\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\2\43\1\352\17\43\1\353\6\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\13\43\1\354\15\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\1\355\30\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\20\43\1\356"+
    "\10\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\16\43\1\357\12\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\15\43\1\360\13\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\15\43\1\361\13\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\17\43\1\362"+
    "\11\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\3\43\1\363\16\43\1\364"+
    "\6\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\14\43\1\365\14\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\22\43\1\366\6\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\16\43\1\367\12\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\2\43\1\370"+
    "\17\43\1\371\6\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\30\43\1\372"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\2\43\1\373\26\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\14\43\1\374\14\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\23\43"+
    "\1\375\1\43\1\376\3\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\13\43"+
    "\1\377\15\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\22\43\1\u0100\6\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\13\43\1\u0101\15\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\11\43\1\u0102\17\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\10\43"+
    "\1\u0103\20\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\21\43\1\u0104\1\u0105"+
    "\6\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\15\43\1\u0106\13\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\20\43\1\u0107\10\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\14\43\1\u0108\14\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\1\u0109\22\43"+
    "\1\u010a\3\43\1\u010b\1\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\17\43"+
    "\1\u010c\11\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\10\43\1\u010d\11\43"+
    "\1\u010e\6\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\10\43\1\u010f\20\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u0110\3\43\1\u0111\20\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\3\43\1\u0112\16\43\1\u0113\6\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u0114\24\43\5\0\1\43"+
    "\2\0\1\43\103\0\2\335\5\0\1\335\12\0\1\335"+
    "\35\0\1\335\75\0\1\167\175\0\1\167\173\0\1\u0115"+
    "\1\321\1\0\1\321\2\0\1\322\166\0\1\u0116\1\0"+
    "\1\320\7\0\3\320\4\0\1\u0115\1\0\31\320\117\0"+
    "\1\322\162\0\1\200\176\0\1\u0117\7\0\3\u0117\6\0"+
    "\31\u0117\117\0\1\177\7\0\3\177\6\0\31\177\117\0"+
    "\1\334\16\0\1\221\151\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\1\u0118\30\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\4\43"+
    "\1\u0119\24\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\2\43\1\u011a\26\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\21\43\1\u011b\7\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\21\43\1\u011c\1\u011d\6\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\7\43\1\u011e\21\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\4\43\1\u011f"+
    "\24\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\14\43\1\u0120\14\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\13\43\1\u0121\15\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\4\43\1\u0122\24\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\13\43\1\u0123"+
    "\5\43\1\u010a\7\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\6\43\1\u0124"+
    "\22\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\1\u0125\30\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\14\43\1\u0126\14\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\2\43"+
    "\1\u0127\26\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\4\43\1\u0128\24\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\13\43\1\u0129\15\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\23\43\1\u012a\5\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\4\43"+
    "\1\u012b\24\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\1\43\1\u012c\27\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\17\43\1\u012d\11\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\20\43\1\u012e\10\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\2\43"+
    "\1\u012f\26\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\30\43\1\u0130\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\20\43\1\u0131\10\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\4\43\1\u0132\24\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\20\43\1\u0133"+
    "\10\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\13\43\1\u0134\15\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\4\43\1\u0135\24\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\21\43\1\u0136\7\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\23\43\1\u0137"+
    "\5\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\23\43\1\u0138\5\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\6\43\1\u0139\22\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\23\43\1\u013a\5\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\17\43\1\u013b"+
    "\11\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\10\43\1\u013c\20\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\4\43\1\u013d\24\43\5\0\1\43\2\0"+
    "\1\43\67\0\1\u013e\16\0\1\43\5\0\1\u013e\1\0"+
    "\3\43\4\0\1\43\1\0\31\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\4\43\1\u013f\16\43\1\u0140\5\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\16\43\1\u0141\3\43\1\u0142\6\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\10\43\1\u0143\20\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\15\43\1\u0144"+
    "\13\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\15\43\1\u0145\2\43\1\u0146"+
    "\10\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\13\43\1\u0147\15\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\6\43\1\u0148\22\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\7\43\1\u0149\21\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\13\43\1\u014a"+
    "\15\43\5\0\1\43\2\0\1\43\106\0\1\u014b\7\0"+
    "\3\u014b\6\0\31\u014b\117\0\1\u0117\7\0\3\u0117\4\0"+
    "\1\324\1\0\31\u0117\117\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\12\43\1\u014c\16\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\7\43\1\u014d\21\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\21\43\1\u014e"+
    "\7\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\22\43\1\u014f\6\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\10\43\1\u0150\20\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\4\43\1\u0151\14\43\1\u0152\7\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\23\43\1\u0153\5\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\15\43\1\u0154"+
    "\13\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\22\43\1\u0155\6\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\21\43\1\u0156\7\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\13\43\1\u0157\15\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\22\43\1\u0158"+
    "\6\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\20\43\1\u0159\10\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\10\43\1\u015a\16\43\1\u015b\1\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\2\43\1\u015c\26\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\20\43\1\u015d\10\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\3\43\1\u015e"+
    "\25\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\16\43\1\u015f\12\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\7\43\1\u0160\21\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\16\43\1\u0161\12\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\16\43\1\250"+
    "\12\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\21\43\1\u0162\7\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\1\u0163\30\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\2\43"+
    "\1\u0164\26\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\4\43\1\u0165\24\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\14\43\1\u0166\14\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\20\43\1\u0167\10\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\13\43"+
    "\1\u0168\15\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\2\43\1\u0169\26\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\13\43\1\u016a\15\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\22\43\1\u016b\6\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\21\43"+
    "\1\u013f\7\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\15\43\1\u016c\13\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u016d\22\43\1\u016d\1\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\13\43\1\u016e\15\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\6\43\1\u016f\22\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\4\43"+
    "\1\u0170\24\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\4\43\1\u0171\24\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u0172\24\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\3\43\1\u0173\25\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\u014b\7\0\3\u014b\4\0\1\u0116\1\0\31\u014b"+
    "\117\0\1\43\7\0\3\43\4\0\1\43\1\0\20\43"+
    "\1\u0174\10\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\15\43\1\u0175\13\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\20\43\1\u0176\10\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\3\43\1\u0177\25\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\3\43"+
    "\1\u0178\25\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\7\43\1\u0179\21\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\13\43\1\u017a\15\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\10\43\1\u017b\20\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\10\43"+
    "\1\u017c\20\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\14\43\1\u017d\14\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\22\43\1\u017e\6\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\5\43\1\u017f\23\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\1\u0180"+
    "\30\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\17\43\1\u0181\11\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\13\43\1\u0182\15\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\22\43\1\u0183\6\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\4\43\1\u0184"+
    "\24\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\15\43\1\u0185\13\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\4\43\1\u0186\24\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\22\43\1\u0187\6\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\1\u0188\30\43"+
    "\5\0\1\43\2\0\1\43\67\0\1\u0189\16\0\1\43"+
    "\5\0\1\u0189\1\0\3\43\4\0\1\43\1\0\31\43"+
    "\5\0\1\43\2\0\1\43\62\0\2\u0189\22\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\22\43\1\u018a\6\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\1\u018b\30\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\23\43\1\u018c\5\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\1\u018d\30\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u018e\24\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\21\43\1\u015b\7\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\20\43"+
    "\1\u018f\10\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\16\43\1\u0190\12\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\2\43\1\u017a\26\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\4\43\1\u0191\24\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\10\43"+
    "\1\u0192\20\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\1\u0193\30\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\1\u0194\30\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\22\43"+
    "\1\u0195\6\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\23\43\1\u0196\5\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\22\43\1\u0197\6\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\10\43\1\u0198\20\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\4\43"+
    "\1\u0199\24\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\22\43\1\u019a\6\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\16\43\1\u019b\12\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\15\43\1\250\13\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\15\43"+
    "\1\u019c\13\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\24\43\1\u019d\4\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\2\43\1\u019e\26\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\2\43\1\u019f\26\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\16\43"+
    "\1\u01a0\12\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\20\43\1\u019e\10\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u015f\24\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\15\43\1\u01a1\13\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\4\43"+
    "\1\u0152\24\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\23\43\1\u01a2\5\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\22\43\1\u0178\6\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\4\43\1\u016d\24\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\4\43"+
    "\1\u014e\24\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\4\43\1\u01a3\24\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\15\43\1\u01a4\13\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\22\43\1\u017a\6\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\6\43"+
    "\1\u01a5\22\43\5\0\1\43\2\0\1\43\67\0\1\u01a6"+
    "\16\0\1\43\5\0\1\u01a6\1\0\3\43\4\0\1\43"+
    "\1\0\31\43\5\0\1\43\2\0\1\43\62\0\2\u01a6"+
    "\22\0\1\43\7\0\3\43\4\0\1\43\1\0\7\43"+
    "\1\u01a7\21\43\5\0\1\43\2\0\1\43\64\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[34727];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\1\11\6\1\2\11\2\1\1\11"+
    "\5\1\1\11\6\1\1\11\1\1\2\11\23\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\4\11\1\1\37\11"+
    "\1\1\7\11\3\1\1\11\5\1\2\11\7\1\1\11"+
    "\3\1\1\11\1\0\1\1\1\11\2\0\3\11\2\1"+
    "\1\11\1\1\2\0\2\11\2\1\3\11\1\0\1\11"+
    "\56\1\1\11\4\0\1\11\1\1\1\0\1\1\3\0"+
    "\6\11\1\1\4\11\64\1\2\0\47\1\1\11\112\1"+
    "\1\11\34\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private final LinkedList<Integer> states = new LinkedList();

    private void yypushstate(int state) {
        states.addFirst(yystate());
        yybegin(state);
    }
    private void yypopstate() {
        final int state = states.removeFirst();
        yybegin(state);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ValkyrieLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.intellij.psi.tree.IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 166: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 167: break;
          case 3:
            { return OP_BANG;
            }
          // fall through
          case 168: break;
          case 4:
            { yybegin(TextCapture2);
          return STRING_L;
            }
          // fall through
          case 169: break;
          case 5:
            { return COMMENT_LINE;
            }
          // fall through
          case 170: break;
          case 6:
            { return DOLLAR;
            }
          // fall through
          case 171: break;
          case 7:
            { return OP_REM;
            }
          // fall through
          case 172: break;
          case 8:
            { return OP_AND;
            }
          // fall through
          case 173: break;
          case 9:
            { yybegin(TextCapture1);
          return STRING_L;
            }
          // fall through
          case 174: break;
          case 10:
            { return PARENTHESIS_L;
            }
          // fall through
          case 175: break;
          case 11:
            { return PARENTHESIS_R;
            }
          // fall through
          case 176: break;
          case 12:
            { return STAR;
            }
          // fall through
          case 177: break;
          case 13:
            { return OP_ADD;
            }
          // fall through
          case 178: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 179: break;
          case 15:
            { return OP_SUB;
            }
          // fall through
          case 180: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 181: break;
          case 17:
            { return OP_DIV;
            }
          // fall through
          case 182: break;
          case 18:
            { yybegin(AfterNumber);return INTEGER;
            }
          // fall through
          case 183: break;
          case 19:
            { return COLON;
            }
          // fall through
          case 184: break;
          case 20:
            { return SEMICOLON;
            }
          // fall through
          case 185: break;
          case 21:
            { return ANGLE_L;
            }
          // fall through
          case 186: break;
          case 22:
            { return EQUAL;
            }
          // fall through
          case 187: break;
          case 23:
            { return ANGLE_R;
            }
          // fall through
          case 188: break;
          case 24:
            { return OP_AND_THEN;
            }
          // fall through
          case 189: break;
          case 25:
            { return OP_MACRO;
            }
          // fall through
          case 190: break;
          case 26:
            { return SYMBOL;
            }
          // fall through
          case 191: break;
          case 27:
            { return BRACKET_L;
            }
          // fall through
          case 192: break;
          case 28:
            { return BRACKET_R;
            }
          // fall through
          case 193: break;
          case 29:
            { return OP_POW;
            }
          // fall through
          case 194: break;
          case 30:
            { return BRACE_L;
            }
          // fall through
          case 195: break;
          case 31:
            { return OP_OR;
            }
          // fall through
          case 196: break;
          case 32:
            { return BRACE_R;
            }
          // fall through
          case 197: break;
          case 33:
            { return COLOR;
            }
          // fall through
          case 198: break;
          case 34:
            { return OP_NOT;
            }
          // fall through
          case 199: break;
          case 35:
            { return OP_REFERENCE;
            }
          // fall through
          case 200: break;
          case 36:
            { return OP_MUL;
            }
          // fall through
          case 201: break;
          case 37:
            { return OP_DIV_REM;
            }
          // fall through
          case 202: break;
          case 38:
            { return ANY_LIST;
            }
          // fall through
          case 203: break;
          case 39:
            { return ANY_DICT;
            }
          // fall through
          case 204: break;
          case 40:
            { return OP_LABEL;
            }
          // fall through
          case 205: break;
          case 41:
            { return OFFSET_L;
            }
          // fall through
          case 206: break;
          case 42:
            { return OFFSET_R;
            }
          // fall through
          case 207: break;
          case 43:
            { return OP_DEREFERENCE;
            }
          // fall through
          case 208: break;
          case 44:
            { return NAME_SCOPE;
            }
          // fall through
          case 209: break;
          case 45:
            { return OP_CELSIUS;
            }
          // fall through
          case 210: break;
          case 46:
            { return OP_FAHRENHEIT;
            }
          // fall through
          case 211: break;
          case 47:
            { return BIND;
            }
          // fall through
          case 212: break;
          case 48:
            { return OP_MACRO_LOWER;
            }
          // fall through
          case 213: break;
          case 49:
            { return OP_ARROW2;
            }
          // fall through
          case 214: break;
          case 50:
            { return OP_MAP;
            }
          // fall through
          case 215: break;
          case 51:
            { return KW_NIL;
            }
          // fall through
          case 216: break;
          case 52:
            { return OP_SQRT;
            }
          // fall through
          case 217: break;
          case 53:
            { return OP_SURD3;
            }
          // fall through
          case 218: break;
          case 54:
            { return OP_SURD4;
            }
          // fall through
          case 219: break;
          case 55:
            { return LOGIC_AND;
            }
          // fall through
          case 220: break;
          case 56:
            { return LOGIC_OR;
            }
          // fall through
          case 221: break;
          case 57:
            { return NAME_SPLIT;
            }
          // fall through
          case 222: break;
          case 58:
            { return OP_NE;
            }
          // fall through
          case 223: break;
          case 59:
            { return OP_LEQ;
            }
          // fall through
          case 224: break;
          case 60:
            { return OP_GEQ;
            }
          // fall through
          case 225: break;
          case 61:
            { return OP_LL;
            }
          // fall through
          case 226: break;
          case 62:
            { return OP_GG;
            }
          // fall through
          case 227: break;
          case 63:
            { return LOGIC_XOR;
            }
          // fall through
          case 228: break;
          case 64:
            { return LOGIC_NAND;
            }
          // fall through
          case 229: break;
          case 65:
            { return LOGIC_NOR;
            }
          // fall through
          case 230: break;
          case 66:
            { return OP_LLL;
            }
          // fall through
          case 231: break;
          case 67:
            { return OP_GGG;
            }
          // fall through
          case 232: break;
          case 68:
            { return CEIL_L;
            }
          // fall through
          case 233: break;
          case 69:
            { return CEIL_R;
            }
          // fall through
          case 234: break;
          case 70:
            { return FLOOR_L;
            }
          // fall through
          case 235: break;
          case 71:
            { return FLOOR_R;
            }
          // fall through
          case 236: break;
          case 72:
            { return GENERIC_L;
            }
          // fall through
          case 237: break;
          case 73:
            { return GENERIC_R;
            }
          // fall through
          case 238: break;
          case 74:
            { return OP_ARROW1;
            }
          // fall through
          case 239: break;
          case 75:
            { return DOMAIN_R;
            }
          // fall through
          case 240: break;
          case 76:
            { return BUILDER_L;
            }
          // fall through
          case 241: break;
          case 77:
            { return BUILDER_R;
            }
          // fall through
          case 242: break;
          case 78:
            { return LOGIC_XAND;
            }
          // fall through
          case 243: break;
          case 79:
            { return OP_L10N;
            }
          // fall through
          case 244: break;
          case 80:
            { 
            }
          // fall through
          case 245: break;
          case 81:
            { return STRING_TEXT;
            }
          // fall through
          case 246: break;
          case 82:
            { yybegin(YYINITIAL);
        return STRING_R;
            }
          // fall through
          case 247: break;
          case 83:
            { yybegin(YYINITIAL);yypushback(yylength());
            }
          // fall through
          case 248: break;
          case 84:
            { yybegin(YYINITIAL);return NUMBER_SUFFIX;
            }
          // fall through
          case 249: break;
          case 85:
            { yybegin(AfterNumber); return NUMBER_BASE;
            }
          // fall through
          case 250: break;
          case 86:
            { return OP_BASE;
            }
          // fall through
          case 251: break;
          case 87:
            { yybegin(AfterNumber); return NUMBER_EXPONENT;
            }
          // fall through
          case 252: break;
          case 88:
            { return OP_EXPONENT;
            }
          // fall through
          case 253: break;
          case 89:
            { return TEMPLATE_R;
            }
          // fall through
          case 254: break;
          case 90:
            { return OP_REM_ASSIGN;
            }
          // fall through
          case 255: break;
          case 91:
            { return OP_MUL_ASSIGN;
            }
          // fall through
          case 256: break;
          case 92:
            { return OP_ADD_ASSIGN;
            }
          // fall through
          case 257: break;
          case 93:
            { return OP_SUB_ASSIGN;
            }
          // fall through
          case 258: break;
          case 94:
            { return OP_DIV_FLOOR;
            }
          // fall through
          case 259: break;
          case 95:
            { return OP_DIV_ASSIGN;
            }
          // fall through
          case 260: break;
          case 96:
            { return OP_DIV_CEIL;
            }
          // fall through
          case 261: break;
          case 97:
            { return OP_UNWRAP_ELSE;
            }
          // fall through
          case 262: break;
          case 98:
            { yypushstate(CommentBlock);
            }
          // fall through
          case 263: break;
          case 99:
            { return TEMPLATE_L;
            }
          // fall through
          case 264: break;
          case 100:
            { return OP_EE;
            }
          // fall through
          case 265: break;
          case 101:
            { return OP_SET_THEN;
            }
          // fall through
          case 266: break;
          case 102:
            { return OP_UNWRAP_OR;
            }
          // fall through
          case 267: break;
          case 103:
            { return OP_MACRO_UPPER;
            }
          // fall through
          case 268: break;
          case 104:
            { return SYMBOW_RAW;
            }
          // fall through
          case 269: break;
          case 105:
            { return KW_AS;
            }
          // fall through
          case 270: break;
          case 106:
            { return KW_MICRO;
            }
          // fall through
          case 271: break;
          case 107:
            { return KW_IF;
            }
          // fall through
          case 272: break;
          case 108:
            { return KW_IN;
            }
          // fall through
          case 273: break;
          case 109:
            { return KW_IS;
            }
          // fall through
          case 274: break;
          case 110:
            { yypopstate();
        if (yystate() != CommentBlock) {
            return COMMENT_BLOCK;
        }
            }
          // fall through
          case 275: break;
          case 111:
            { yybegin(AfterNumberBase);yypushback(yylength());
            }
          // fall through
          case 276: break;
          case 112:
            { yybegin(AfterNumberExp);yypushback(yylength());
            }
          // fall through
          case 277: break;
          case 113:
            { yybegin(TextCapture6);
          return STRING_L;
            }
          // fall through
          case 278: break;
          case 114:
            { yybegin(TextCapture3);
          return STRING_L;
            }
          // fall through
          case 279: break;
          case 115:
            { return DOMAIN_L;
            }
          // fall through
          case 280: break;
          case 116:
            { return OP_UNTIL;
            }
          // fall through
          case 281: break;
          case 117:
            { return OP_DIV_ROUND;
            }
          // fall through
          case 282: break;
          case 118:
            { yybegin(AfterNumber);return DECIMAL;
            }
          // fall through
          case 283: break;
          case 119:
            { return OP_END;
            }
          // fall through
          case 284: break;
          case 120:
            { return OP_ARROW3;
            }
          // fall through
          case 285: break;
          case 121:
            { return KW_END;
            }
          // fall through
          case 286: break;
          case 122:
            { return KW_LOOP;
            }
          // fall through
          case 287: break;
          case 123:
            { return KW_LET;
            }
          // fall through
          case 288: break;
          case 124:
            { return KW_NEW;
            }
          // fall through
          case 289: break;
          case 125:
            { return KW_NOT;
            }
          // fall through
          case 290: break;
          case 126:
            { return KW_TRY;
            }
          // fall through
          case 291: break;
          case 127:
            { return KW_CASE;
            }
          // fall through
          case 292: break;
          case 128:
            { return KW_EACH;
            }
          // fall through
          case 293: break;
          case 129:
            { return KW_ELSE;
            }
          // fall through
          case 294: break;
          case 130:
            { return KW_ENUMERATE;
            }
          // fall through
          case 295: break;
          case 131:
            { return KW_FROM;
            }
          // fall through
          case 296: break;
          case 132:
            { return KW_NULL;
            }
          // fall through
          case 297: break;
          case 133:
            { return KW_BOOLEAN;
            }
          // fall through
          case 298: break;
          case 134:
            { return KW_TYPE;
            }
          // fall through
          case 299: break;
          case 135:
            { return KW_WHEN;
            }
          // fall through
          case 300: break;
          case 136:
            { return KW_WITH;
            }
          // fall through
          case 301: break;
          case 137:
            { return KW_BREAK;
            }
          // fall through
          case 302: break;
          case 138:
            { return KW_CATCH;
            }
          // fall through
          case 303: break;
          case 139:
            { return KW_CLASS;
            }
          // fall through
          case 304: break;
          case 140:
            { return KW_FLAGS;
            }
          // fall through
          case 305: break;
          case 141:
            { return KW_IMPLY;
            }
          // fall through
          case 306: break;
          case 142:
            { return KW_MACRO;
            }
          // fall through
          case 307: break;
          case 143:
            { return KW_MATCH;
            }
          // fall through
          case 308: break;
          case 144:
            { return KW_MEZZO;
            }
          // fall through
          case 309: break;
          case 145:
            { return KW_RAISE;
            }
          // fall through
          case 310: break;
          case 146:
            { return KW_TRAIT;
            }
          // fall through
          case 311: break;
          case 147:
            { return KW_UNION;
            }
          // fall through
          case 312: break;
          case 148:
            { return KW_UNITE;
            }
          // fall through
          case 313: break;
          case 149:
            { return KW_UNTIL;
            }
          // fall through
          case 314: break;
          case 150:
            { return KW_USING;
            }
          // fall through
          case 315: break;
          case 151:
            { return KW_WHERE;
            }
          // fall through
          case 316: break;
          case 152:
            { return KW_WHILE;
            }
          // fall through
          case 317: break;
          case 153:
            { return KW_YIELD;
            }
          // fall through
          case 318: break;
          case 154:
            { return KW_TEMPLATE;
            }
          // fall through
          case 319: break;
          case 155:
            { return KW_LAMBDA;
            }
          // fall through
          case 320: break;
          case 156:
            { return KW_NEURAL;
            }
          // fall through
          case 321: break;
          case 157:
            { return KW_OBJECT;
            }
          // fall through
          case 322: break;
          case 158:
            { return KW_RESUME;
            }
          // fall through
          case 323: break;
          case 159:
            { return KW_RETURN;
            }
          // fall through
          case 324: break;
          case 160:
            { return KW_COMPONENT;
            }
          // fall through
          case 325: break;
          case 161:
            { return KW_EXCLUDE;
            }
          // fall through
          case 326: break;
          case 162:
            { return KW_CONTINUE;
            }
          // fall through
          case 327: break;
          case 163:
            { return KW_NAMESPACE;
            }
          // fall through
          case 328: break;
          case 164:
            { return KW_SINGLETON;
            }
          // fall through
          case 329: break;
          case 165:
            { return KW_THROUGH;
            }
          // fall through
          case 330: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
