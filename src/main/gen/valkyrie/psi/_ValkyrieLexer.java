// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\4\u2100\1\u2300" +
                    "\1\u2400\2\u2100\1\u2500\1\u2600\2\u2100\31\u0100\1\u2700\121\u0100" +
                    "\1\u2800\4\u0100\1\u2900\1\u0100\1\u2a00\1\u2b00\1\u2c00\1\u2d00" +
                    "\1\u2e00\1\u2f00\53\u0100\1\u3000\10\u3100\31\u2100\1\u0100\1\u3200" +
                    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00" +
                    "\1\u3b00\1\u3c00\1\u3d00\1\u0100\1\u3e00\1\u3f00\1\u4000\1\u4100" +
                    "\1\u4200\1\u4300\1\u4400\1\u2100\1\u4500\1\u4600\1\u4700\1\u4800" +
                    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u5000" +
                    "\1\u2100\1\u5100\1\u5200\1\u5300\1\u2100\3\u0100\1\u5400\1\u5500" +
                    "\1\u5600\12\u2100\4\u0100\1\u5700\17\u2100\2\u0100\1\u5800\41\u2100" +
                    "\2\u0100\1\u5900\1\u5a00\2\u2100\1\u5b00\1\u5c00\27\u0100\1\u5d00" +
                    "\2\u0100\1\u5e00\45\u2100\1\u0100\1\u5f00\1\u6000\11\u2100\1\u6100" +
                    "\24\u2100\1\u6200\1\u6300\1\u2100\1\u6400\1\u6500\1\u6600\1\u6700" +
                    "\2\u2100\1\u6800\5\u2100\1\u6900\1\u6a00\1\u6b00\5\u2100\1\u6c00" +
                    "\1\u6d00\4\u2100\1\u6e00\21\u2100\246\u0100\1\u6f00\20\u0100\1\u7000" +
                    "\1\u7100\25\u0100\1\u7200\34\u0100\1\u7300\14\u2100\2\u0100\1\u7400" +
                    "\u0b06\u2100\1\u7500\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\1\17\12\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\32\30\1\31\1\32" +
                    "\1\33\1\34\1\30\1\35\1\36\1\30\1\37\1\40" +
                    "\1\41\1\42\1\43\1\44\1\45\2\30\1\46\1\47" +
                    "\1\50\1\51\1\52\1\30\1\53\1\54\1\55\1\56" +
                    "\1\57\1\60\1\61\1\62\1\30\1\63\1\64\1\65" +
                    "\1\66\6\0\1\1\32\0\1\1\11\0\1\30\12\0" +
                    "\1\30\1\0\1\67\2\0\1\30\5\0\27\30\1\0" +
                    "\37\30\1\0\u01ca\30\4\0\14\30\16\0\5\30\7\0" +
                    "\1\30\1\0\1\30\21\0\160\67\5\30\1\0\2\30" +
                    "\3\0\3\30\1\0\1\30\6\0\1\30\1\67\3\30" +
                    "\1\0\1\30\1\0\24\30\1\0\123\30\1\0\213\30" +
                    "\1\0\5\67\2\0\246\30\1\0\46\30\2\0\1\30" +
                    "\6\0\51\30\10\0\55\67\1\0\1\67\1\0\2\67" +
                    "\1\0\2\67\1\0\1\67\10\0\33\30\4\0\4\30" +
                    "\35\0\13\67\5\0\53\30\37\67\4\0\2\30\1\67" +
                    "\143\30\1\0\1\30\7\67\2\0\6\67\2\30\2\67" +
                    "\1\0\4\67\2\30\12\67\3\30\2\0\1\30\20\0" +
                    "\1\30\1\67\36\30\33\67\2\0\131\30\13\67\1\30" +
                    "\16\0\12\67\41\30\11\67\2\30\4\0\1\30\2\0" +
                    "\1\67\2\0\26\30\4\67\1\30\11\67\1\30\3\67" +
                    "\1\30\5\67\22\0\31\30\3\67\4\0\13\30\65\0" +
                    "\25\30\1\0\10\30\25\0\17\67\1\0\41\67\66\30" +
                    "\3\67\1\30\22\67\1\30\7\67\12\30\2\67\2\0" +
                    "\12\67\1\0\20\30\3\67\1\0\10\30\2\0\2\30" +
                    "\2\0\26\30\1\0\7\30\1\0\1\30\3\0\4\30" +
                    "\2\0\1\67\1\30\7\67\2\0\2\67\2\0\3\67" +
                    "\1\30\10\0\1\67\4\0\2\30\1\0\3\30\2\67" +
                    "\2\0\12\67\2\30\12\0\1\30\1\0\1\67\2\0" +
                    "\3\67\1\0\6\30\4\0\2\30\2\0\26\30\1\0" +
                    "\7\30\1\0\2\30\1\0\2\30\1\0\2\30\2\0" +
                    "\1\67\1\0\5\67\4\0\2\67\2\0\3\67\3\0" +
                    "\1\67\7\0\4\30\1\0\1\30\7\0\14\67\3\30" +
                    "\1\67\13\0\3\67\1\0\11\30\1\0\3\30\1\0" +
                    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0" +
                    "\1\67\1\30\10\67\1\0\3\67\1\0\3\67\2\0" +
                    "\1\30\17\0\2\30\2\67\2\0\12\67\11\0\1\30" +
                    "\6\67\1\0\3\67\1\0\10\30\2\0\2\30\2\0" +
                    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0" +
                    "\1\67\1\30\7\67\2\0\2\67\2\0\3\67\10\0" +
                    "\2\67\4\0\2\30\1\0\3\30\2\67\2\0\12\67" +
                    "\1\0\1\30\20\0\1\67\1\30\1\0\6\30\3\0" +
                    "\3\30\1\0\4\30\3\0\2\30\1\0\1\30\1\0" +
                    "\2\30\3\0\2\30\3\0\3\30\3\0\14\30\4\0" +
                    "\5\67\3\0\3\67\1\0\4\67\2\0\1\30\6\0" +
                    "\1\67\16\0\12\67\20\0\5\67\10\30\1\0\3\30" +
                    "\1\0\27\30\1\0\20\30\3\0\1\30\7\67\1\0" +
                    "\3\67\1\0\4\67\7\0\2\67\1\0\3\30\5\0" +
                    "\2\30\2\67\2\0\12\67\20\0\1\30\3\67\1\0" +
                    "\10\30\1\0\3\30\1\0\27\30\1\0\12\30\1\0" +
                    "\5\30\2\0\1\67\1\30\7\67\1\0\3\67\1\0" +
                    "\4\67\7\0\2\67\7\0\1\30\1\0\2\30\2\67" +
                    "\2\0\12\67\1\0\2\30\15\0\4\67\1\0\10\30" +
                    "\1\0\3\30\1\0\51\30\2\67\1\30\7\67\1\0" +
                    "\3\67\1\0\4\67\1\30\5\0\3\30\1\67\7\0" +
                    "\3\30\2\67\2\0\12\67\12\0\6\30\2\0\2\67" +
                    "\1\0\22\30\3\0\30\30\1\0\11\30\1\0\1\30" +
                    "\2\0\7\30\3\0\1\67\4\0\6\67\1\0\1\67" +
                    "\1\0\10\67\6\0\12\67\2\0\2\67\15\0\60\30" +
                    "\1\67\1\30\10\67\5\0\7\30\10\67\1\0\12\67" +
                    "\47\0\2\30\1\0\1\30\1\0\5\30\1\0\30\30" +
                    "\1\0\1\30\1\0\12\30\1\67\1\30\12\67\1\30" +
                    "\2\0\5\30\1\0\1\30\1\0\6\67\2\0\12\67" +
                    "\2\0\4\30\40\0\1\30\27\0\2\67\6\0\12\67" +
                    "\13\0\1\67\1\0\1\67\1\0\1\67\4\0\2\67" +
                    "\10\30\1\0\44\30\4\0\24\67\1\0\2\67\5\30" +
                    "\13\67\1\0\44\67\11\0\1\67\71\0\53\30\24\67" +
                    "\1\30\12\67\6\0\6\30\4\67\4\30\3\67\1\30" +
                    "\3\67\2\30\7\67\3\30\4\67\15\30\14\67\1\30" +
                    "\17\67\2\0\46\30\1\0\1\30\5\0\1\30\2\0" +
                    "\53\30\1\0\115\30\1\0\4\30\2\0\7\30\1\0" +
                    "\1\30\1\0\4\30\2\0\51\30\1\0\4\30\2\0" +
                    "\41\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0" +
                    "\4\30\2\0\17\30\1\0\71\30\1\0\4\30\2\0" +
                    "\103\30\2\0\3\67\11\0\11\67\16\0\20\30\20\0" +
                    "\126\30\2\0\6\30\3\0\u016c\30\2\0\21\30\1\1" +
                    "\32\30\5\0\113\30\3\0\13\30\7\0\15\30\1\0" +
                    "\4\30\3\67\13\0\22\30\3\67\13\0\22\30\2\67" +
                    "\14\0\15\30\1\0\3\30\1\0\2\67\14\0\64\30" +
                    "\40\67\3\0\1\30\4\0\1\30\1\67\2\0\12\67" +
                    "\41\0\3\67\2\0\12\67\6\0\131\30\7\0\51\30" +
                    "\1\67\1\30\5\0\106\30\12\0\37\30\1\0\14\67" +
                    "\4\0\14\67\12\0\12\67\36\30\2\0\5\30\13\0" +
                    "\54\30\4\0\32\30\6\0\13\67\45\0\27\30\5\67" +
                    "\4\0\65\30\12\67\1\0\35\67\2\0\13\67\6\0" +
                    "\12\67\15\0\1\30\10\0\16\67\102\0\5\67\57\30" +
                    "\21\67\7\30\4\0\12\67\21\0\11\67\14\0\3\67" +
                    "\36\30\15\67\2\30\12\67\54\30\16\67\14\0\44\30" +
                    "\24\67\10\0\12\67\3\0\3\30\12\67\44\30\2\0" +
                    "\11\30\7\0\53\30\2\0\3\30\20\0\3\67\1\0" +
                    "\25\67\4\30\1\67\6\30\1\67\2\30\3\67\1\30" +
                    "\5\0\300\30\72\67\1\0\5\67\26\30\2\0\6\30" +
                    "\2\0\46\30\2\0\6\30\2\0\10\30\1\0\1\30" +
                    "\1\0\1\30\1\0\1\30\1\0\37\30\2\0\65\30" +
                    "\1\0\7\30\1\0\1\30\3\0\3\30\1\0\7\30" +
                    "\3\0\4\30\2\0\6\30\4\0\15\30\5\0\3\30" +
                    "\1\0\7\30\3\0\13\1\35\0\2\1\5\0\1\1" +
                    "\17\0\2\67\4\0\1\70\1\71\15\0\1\67\12\0" +
                    "\1\1\21\0\1\30\15\0\1\30\20\0\15\30\63\0" +
                    "\15\67\4\0\1\67\3\0\14\67\21\0\1\30\4\0" +
                    "\1\30\2\0\12\30\1\0\1\30\2\0\6\30\6\0" +
                    "\1\30\1\0\1\30\1\0\1\30\1\0\20\30\2\0" +
                    "\4\30\5\0\5\30\4\0\1\30\21\0\51\30\255\0" +
                    "\1\72\1\73\u0125\0\1\74\u028a\0\1\75\1\76\26\0" +
                    "\57\30\1\0\57\30\1\0\205\30\6\0\4\30\3\67" +
                    "\2\30\14\0\46\30\1\0\1\30\5\0\1\30\2\0" +
                    "\70\30\7\0\1\30\17\0\1\67\27\30\11\0\7\30" +
                    "\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30" +
                    "\1\0\7\30\1\0\7\30\1\0\7\30\1\0\40\67" +
                    "\1\1\4\0\3\30\31\0\11\30\6\67\1\0\5\30" +
                    "\2\0\5\30\4\0\126\30\2\0\2\67\2\0\3\30" +
                    "\1\0\132\30\1\0\4\30\5\0\53\30\1\0\136\30" +
                    "\21\0\33\30\65\0\306\30\112\0\360\30\20\0\215\30" +
                    "\103\0\56\30\2\0\15\30\3\0\20\30\12\67\2\30" +
                    "\24\0\57\30\1\67\4\0\12\67\1\0\37\30\2\67" +
                    "\120\30\2\67\45\0\11\30\2\0\147\30\2\0\65\30" +
                    "\2\0\5\30\60\0\13\30\1\67\3\30\1\67\4\30" +
                    "\1\67\27\30\5\67\30\0\64\30\14\0\2\67\62\30" +
                    "\22\67\12\0\12\67\6\0\22\67\6\30\3\0\1\30" +
                    "\1\0\2\30\13\67\34\30\10\67\2\0\27\30\15\67" +
                    "\14\0\35\30\3\0\4\67\57\30\16\67\16\0\1\30" +
                    "\12\67\6\0\5\30\1\67\12\30\12\67\5\30\1\0" +
                    "\51\30\16\67\11\0\3\30\1\67\10\30\2\67\2\0" +
                    "\12\67\6\0\27\30\3\0\1\30\3\67\62\30\1\67" +
                    "\1\30\3\67\2\30\2\67\5\30\2\67\1\30\1\67" +
                    "\1\30\30\0\3\30\2\0\13\30\5\67\2\0\3\30" +
                    "\2\67\12\0\6\30\2\0\6\30\2\0\6\30\11\0" +
                    "\7\30\1\0\7\30\1\0\53\30\1\0\14\30\10\0" +
                    "\163\30\10\67\1\0\2\67\2\0\12\67\6\0\244\30" +
                    "\14\0\27\30\4\0\61\30\u0104\0\156\30\2\0\152\30" +
                    "\46\0\7\30\14\0\5\30\5\0\1\30\1\67\12\30" +
                    "\1\0\15\30\1\0\5\30\1\0\1\30\1\0\2\30" +
                    "\1\0\2\30\1\0\154\30\41\0\213\30\6\0\332\30" +
                    "\22\0\100\30\2\0\66\30\50\0\12\30\6\0\20\67" +
                    "\20\0\20\67\3\0\2\67\30\0\3\67\41\0\1\30" +
                    "\1\0\1\30\3\0\1\30\1\0\1\30\1\0\1\30" +
                    "\1\0\1\30\1\0\176\30\23\0\12\67\7\0\32\30" +
                    "\4\0\1\67\1\0\32\30\13\0\70\30\2\67\37\30" +
                    "\3\0\6\30\2\0\6\30\2\0\6\30\2\0\3\30" +
                    "\43\0\14\30\1\0\32\30\1\0\23\30\1\0\2\30" +
                    "\1\0\17\30\2\0\16\30\42\0\173\30\105\0\65\30" +
                    "\210\0\1\67\202\0\35\30\3\0\61\30\17\0\1\67" +
                    "\37\0\40\30\15\0\36\30\5\0\46\30\5\67\5\0" +
                    "\36\30\2\0\44\30\4\0\10\30\1\0\5\30\52\0" +
                    "\236\30\2\0\12\67\6\0\44\30\4\0\44\30\4\0" +
                    "\50\30\10\0\64\30\234\0\67\30\11\0\26\30\12\0" +
                    "\10\30\230\0\6\30\2\0\1\30\1\0\54\30\1\0" +
                    "\2\30\3\0\1\30\2\0\27\30\12\0\27\30\11\0" +
                    "\37\30\101\0\23\30\1\0\2\30\12\0\26\30\12\0" +
                    "\32\30\106\0\70\30\6\0\2\30\100\0\1\30\3\67" +
                    "\1\0\2\67\5\0\4\67\4\30\1\0\3\30\1\0" +
                    "\35\30\2\0\3\67\4\0\1\67\40\0\35\30\3\0" +
                    "\35\30\43\0\10\30\1\0\34\30\2\67\31\0\66\30" +
                    "\12\0\26\30\12\0\23\30\15\0\22\30\156\0\111\30" +
                    "\67\0\63\30\15\0\63\30\15\0\44\30\4\67\10\0" +
                    "\12\67\306\0\35\30\12\0\1\30\10\0\26\30\13\67" +
                    "\217\0\27\30\11\0\3\67\65\30\17\67\37\0\12\67" +
                    "\17\0\4\67\55\30\13\67\25\0\31\30\7\0\12\67" +
                    "\6\0\3\67\44\30\16\67\1\0\12\67\4\0\1\30" +
                    "\2\67\11\0\43\30\1\67\2\0\1\30\11\0\3\67" +
                    "\60\30\16\67\4\30\4\0\4\67\3\0\12\67\1\30" +
                    "\1\0\1\30\43\0\22\30\1\0\31\30\14\67\6\0" +
                    "\1\67\101\0\7\30\1\0\1\30\1\0\4\30\1\0" +
                    "\17\30\1\0\12\30\7\0\57\30\14\67\5\0\12\67" +
                    "\6\0\4\67\1\0\10\30\2\0\2\30\2\0\26\30" +
                    "\1\0\7\30\1\0\2\30\1\0\5\30\1\0\2\67" +
                    "\1\30\7\67\2\0\2\67\2\0\3\67\2\0\1\30" +
                    "\6\0\1\67\5\0\5\30\2\67\2\0\7\67\3\0" +
                    "\5\67\213\0\65\30\22\67\4\30\5\0\12\67\4\0" +
                    "\1\67\1\30\40\0\60\30\24\67\2\30\1\0\1\30" +
                    "\10\0\12\67\246\0\57\30\7\67\2\0\11\67\27\0" +
                    "\4\30\2\67\42\0\60\30\21\67\3\0\1\30\13\0" +
                    "\12\67\46\0\53\30\15\67\1\30\7\0\12\67\66\0" +
                    "\33\30\2\0\17\67\4\0\12\67\306\0\54\30\17\67" +
                    "\145\0\100\30\12\67\25\0\1\30\240\0\10\30\2\0" +
                    "\47\30\7\67\2\0\7\67\1\30\1\0\1\30\1\67" +
                    "\33\0\1\30\12\67\50\30\7\67\1\30\4\67\10\0" +
                    "\1\67\10\0\1\30\13\67\56\30\20\67\3\0\1\30" +
                    "\42\0\71\30\7\0\11\30\1\0\45\30\10\67\1\0" +
                    "\10\67\1\30\17\0\12\67\30\0\36\30\2\0\26\67" +
                    "\1\0\16\67\111\0\7\30\1\0\2\30\1\0\46\30" +
                    "\6\67\3\0\1\67\1\0\2\67\1\0\7\67\1\30" +
                    "\1\67\10\0\12\67\6\0\6\30\1\0\2\30\1\0" +
                    "\40\30\5\67\1\0\2\67\1\0\5\67\1\30\7\0" +
                    "\12\67\u0136\0\23\30\4\67\11\0\232\30\146\0\157\30" +
                    "\21\0\304\30\274\0\57\30\321\0\107\30\271\0\71\30" +
                    "\7\0\37\30\1\0\12\67\146\0\36\30\2\0\5\67" +
                    "\13\0\60\30\7\67\11\0\4\30\14\0\12\67\11\0" +
                    "\25\30\5\0\23\30\260\0\100\30\200\0\113\30\4\0" +
                    "\1\67\1\30\67\67\7\0\4\67\15\30\100\0\2\30" +
                    "\1\0\1\30\34\0\370\30\10\0\363\30\15\0\37\30" +
                    "\61\0\3\30\21\0\4\30\10\0\u018c\30\4\0\153\30" +
                    "\5\0\15\30\3\0\11\30\7\0\12\30\3\0\2\67" +
                    "\306\0\5\67\3\0\6\67\10\0\10\67\2\0\7\67" +
                    "\36\0\4\67\224\0\3\67\273\0\125\30\1\0\107\30" +
                    "\1\0\2\30\2\0\1\30\2\0\2\30\2\0\4\30" +
                    "\1\0\14\30\1\0\1\30\1\0\7\30\1\0\101\30" +
                    "\1\0\4\30\2\0\10\30\1\0\7\30\1\0\34\30" +
                    "\1\0\4\30\1\0\5\30\1\0\1\30\3\0\7\30" +
                    "\1\0\u0154\30\2\0\31\30\1\0\31\30\1\0\37\30" +
                    "\1\0\31\30\1\0\37\30\1\0\31\30\1\0\37\30" +
                    "\1\0\31\30\1\0\37\30\1\0\31\30\1\0\10\30" +
                    "\2\0\151\67\4\0\62\67\10\0\1\67\16\0\1\67" +
                    "\26\0\5\67\1\0\17\67\120\0\7\67\1\0\21\67" +
                    "\2\0\7\67\1\0\2\67\1\0\5\67\325\0\55\30" +
                    "\3\0\7\67\7\30\2\0\12\67\4\0\1\30\u0171\0" +
                    "\54\30\16\67\6\0\305\30\13\0\7\67\51\0\104\30" +
                    "\7\67\1\30\4\0\12\67\246\0\4\30\1\0\33\30" +
                    "\1\0\2\30\1\0\1\30\2\0\1\30\1\0\12\30" +
                    "\1\0\4\30\1\0\1\30\1\0\1\30\6\0\1\30" +
                    "\4\0\1\30\1\0\1\30\1\0\1\30\1\0\3\30" +
                    "\1\0\2\30\1\0\1\30\2\0\1\30\1\0\1\30" +
                    "\1\0\1\30\1\0\1\30\1\0\1\30\1\0\2\30" +
                    "\1\0\1\30\2\0\4\30\1\0\7\30\1\0\4\30" +
                    "\1\0\4\30\1\0\1\30\1\0\12\30\1\0\21\30" +
                    "\5\0\3\30\1\0\5\30\1\0\21\30\104\0\327\30" +
                    "\51\0\65\30\13\0\336\30\2\0\u0182\30\16\0\u0131\30" +
                    "\37\0\36\30\342\0\360\67\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30208];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1" +
                    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\1\1\30\1\31\1\1\16\26\1\32" +
                    "\1\33\1\34\1\35\1\36\1\37\1\17\1\40\1\41" +
                    "\1\42\1\43\1\0\1\44\2\0\1\45\1\46\2\0" +
                    "\1\47\1\50\10\26\1\51\2\26\1\52\1\26\1\53" +
                    "\1\54\16\26\1\44\1\0\1\50\11\26\1\55\1\51" +
                    "\3\26\1\56\3\26\1\57\1\60\4\26\1\61\6\26" +
                    "\1\62\1\63\2\26\1\64\1\65\4\26\1\51\6\26" +
                    "\1\66\2\26\1\67\1\70\5\26\1\71\1\26\1\72" +
                    "\1\73\1\26\1\65\2\26\1\74\1\75\2\26\1\76" +
                    "\2\26\1\77\2\26\1\100\1\101\1\102\1\103\1\104" +
                    "\2\26\1\76\5\26\1\73\1\104\1\26\1\105\12\26" +
                    "\2\106";

    private static int[] zzUnpackAction() {
        int[] result = new int[202];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\77\0\176\0\77\0\275\0\77\0\77\0\374" +
                    "\0\77\0\77\0\77\0\77\0\77\0\u013b\0\77\0\u017a" +
                    "\0\77\0\u01b9\0\77\0\77\0\77\0\77\0\77\0\77" +
                    "\0\u01f8\0\77\0\u0237\0\77\0\77\0\u0276\0\u02b5\0\u02f4" +
                    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec" +
                    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\77\0\77\0\77\0\77" +
                    "\0\77\0\77\0\77\0\77\0\u0627\0\77\0\77\0\275" +
                    "\0\77\0\u0666\0\374\0\77\0\77\0\u06a5\0\u0276\0\77" +
                    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d" +
                    "\0\u08dc\0\u01f8\0\u091b\0\u095a\0\u01f8\0\u0999\0\u09d8\0\u01f8" +
                    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0" +
                    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\275\0\u0d89" +
                    "\0\77\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42" +
                    "\0\u0f81\0\u0fc0\0\u01f8\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u01f8" +
                    "\0\u10fb\0\u113a\0\u1179\0\u01f8\0\u01f8\0\u11b8\0\u11f7\0\u1236" +
                    "\0\u1275\0\u01f8\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef" +
                    "\0\77\0\u01f8\0\u142e\0\u146d\0\u01f8\0\u14ac\0\u14eb\0\u152a" +
                    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722" +
                    "\0\u1761\0\u01f8\0\u17a0\0\u17df\0\u01f8\0\u01f8\0\u181e\0\u185d" +
                    "\0\u189c\0\u18db\0\u191a\0\u01f8\0\u1959\0\u01f8\0\u01f8\0\u1998" +
                    "\0\u01f8\0\u19d7\0\u1a16\0\u01f8\0\u01f8\0\u1a55\0\u1a94\0\u01f8" +
                    "\0\u1ad3\0\u1b12\0\u01f8\0\u1b51\0\u1b90\0\u01f8\0\u01f8\0\u01f8" +
                    "\0\u01f8\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49" +
                    "\0\u1d88\0\u1dc7\0\u1e06\0\77\0\u1e45\0\u01f8\0\u1e84\0\u1ec3" +
                    "\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb" +
                    "\0\u20fa\0\77";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[202];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\2\31\1\44\1\45\1\46\1\47\3\31" +
                    "\1\50\1\51\1\52\1\53\1\54\2\31\1\55\1\56" +
                    "\1\57\1\60\1\2\1\61\1\62\1\63\1\64\1\65" +
                    "\1\66\1\67\100\0\2\3\74\0\4\70\1\71\25\70" +
                    "\1\72\44\70\7\73\1\74\67\73\25\0\1\75\63\0" +
                    "\1\76\105\0\1\64\75\0\1\31\7\0\1\31\5\0" +
                    "\25\31\4\0\1\31\41\0\1\65\44\0\35\77\1\100" +
                    "\41\77\20\0\1\31\7\0\1\31\5\0\16\31\1\101" +
                    "\6\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\1\102\7\31\1\103\14\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\3\31\1\104\21\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\10\31\1\105\1\31" +
                    "\1\106\10\31\1\107\1\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\1\110\7\31\1\111\1\31\1\112" +
                    "\1\113\4\31\1\114\4\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\4\31\1\115\4\31\1\116\1\117" +
                    "\3\31\1\120\6\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\3\31\1\121\21\31\4\0\1\31\27\0" +
                    "\1\31\7\0\1\31\5\0\1\122\6\31\1\123\15\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\1\124" +
                    "\6\31\1\125\3\31\1\126\4\31\1\127\4\31\4\0" +
                    "\1\31\27\0\1\31\7\0\1\31\5\0\17\31\1\130" +
                    "\5\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\15\31\1\131\6\31\1\132\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\12\31\1\133\3\31\1\134\6\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\1\135" +
                    "\24\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\6\31\1\136\16\31\4\0\1\31\7\0\2\65\1\0" +
                    "\74\65\4\70\1\137\25\70\1\72\44\70\12\76\1\140" +
                    "\64\76\3\0\1\141\14\0\1\31\5\0\1\141\1\0" +
                    "\1\31\5\0\25\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\16\31\1\142\1\143\5\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\1\144\24\31\4\0" +
                    "\1\31\27\0\1\31\7\0\1\31\5\0\4\31\1\112" +
                    "\20\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\16\31\1\145\6\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\20\31\1\146\4\31\4\0\1\31\27\0" +
                    "\1\31\7\0\1\31\5\0\1\31\1\147\15\31\1\150" +
                    "\5\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\10\31\1\151\14\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\1\152\24\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\15\31\1\153\7\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\12\31\1\154\12\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\14\31" +
                    "\1\155\10\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\2\31\1\156\14\31\1\157\5\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\17\31\1\160\5\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\1\31" +
                    "\1\161\15\31\1\162\5\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\1\31\1\161\23\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\11\31\1\163\13\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\10\31" +
                    "\1\164\14\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\17\31\1\165\5\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\10\31\1\166\14\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\15\31\1\167\7\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\1\170" +
                    "\17\31\1\171\3\31\1\172\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\14\31\1\173\10\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\7\31\1\174\7\31" +
                    "\1\175\5\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\7\31\1\176\15\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\10\31\1\160\4\31\1\160\7\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\3\31" +
                    "\1\177\3\31\1\200\15\31\4\0\1\31\7\0\12\76" +
                    "\1\140\4\76\1\201\57\76\20\0\1\31\7\0\1\31" +
                    "\5\0\3\31\1\202\21\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\1\31\1\203\23\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\16\31\1\204\6\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\3\31" +
                    "\1\205\21\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\11\31\1\206\13\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\10\31\1\207\14\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\3\31\1\210\21\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\16\31" +
                    "\1\211\6\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\5\31\1\212\17\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\1\31\1\213\23\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\10\31\1\214\14\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\20\31" +
                    "\1\215\4\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\3\31\1\216\21\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\15\31\1\217\7\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\1\31\1\220\23\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\3\31" +
                    "\1\221\21\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\10\31\1\222\14\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\20\31\1\223\4\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\7\31\1\224\15\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\3\31" +
                    "\1\225\21\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\3\31\1\226\14\31\1\227\4\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\13\31\1\230\3\31" +
                    "\1\231\5\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\7\31\1\232\15\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\12\31\1\233\12\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\12\31\1\234\12\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\10\31" +
                    "\1\235\14\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\6\31\1\236\16\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\16\31\1\237\6\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\3\31\1\240\12\31" +
                    "\1\241\6\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\20\31\1\242\4\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\12\31\1\243\12\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\3\31\1\244\21\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\16\31" +
                    "\1\245\6\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\17\31\1\246\5\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\7\31\1\247\14\31\1\250\4\0" +
                    "\1\31\27\0\1\31\7\0\1\31\5\0\1\31\1\251" +
                    "\23\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\15\31\1\252\7\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\13\31\1\112\11\31\4\0\1\31\27\0" +
                    "\1\31\7\0\1\31\5\0\6\31\1\253\16\31\4\0" +
                    "\1\31\27\0\1\31\7\0\1\31\5\0\16\31\1\254" +
                    "\6\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\1\31\1\255\23\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\17\31\1\256\5\31\4\0\1\31\27\0" +
                    "\1\31\7\0\1\31\5\0\16\31\1\226\6\31\4\0" +
                    "\1\31\27\0\1\31\7\0\1\31\5\0\12\31\1\257" +
                    "\12\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\3\31\1\260\21\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\10\31\1\261\14\31\4\0\1\31\27\0" +
                    "\1\31\7\0\1\31\5\0\5\31\1\262\17\31\4\0" +
                    "\1\31\27\0\1\31\7\0\1\31\5\0\3\31\1\261" +
                    "\21\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\15\31\1\263\7\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\2\31\1\264\22\31\4\0\1\31\27\0" +
                    "\1\31\7\0\1\31\5\0\2\31\1\265\22\31\4\0" +
                    "\1\31\27\0\1\31\7\0\1\31\5\0\7\31\1\266" +
                    "\15\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\11\31\1\267\13\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\17\31\1\270\5\31\4\0\1\31\27\0" +
                    "\1\31\7\0\1\31\5\0\4\31\1\271\20\31\4\0" +
                    "\1\31\27\0\1\31\7\0\1\31\5\0\14\31\1\272" +
                    "\10\31\4\0\1\31\27\0\1\31\7\0\1\31\5\0" +
                    "\17\31\1\273\5\31\4\0\1\31\12\0\1\274\14\0" +
                    "\1\31\5\0\1\274\1\0\1\31\5\0\25\31\4\0" +
                    "\1\31\27\0\1\31\7\0\1\31\5\0\1\275\24\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\3\31" +
                    "\1\276\21\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\16\31\1\250\6\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\13\31\1\277\11\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\3\31\1\300\21\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\7\31" +
                    "\1\301\15\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\1\302\24\31\4\0\1\31\27\0\1\31\7\0" +
                    "\1\31\5\0\1\303\24\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\20\31\1\304\4\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\17\31\1\305\5\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\12\31" +
                    "\1\112\12\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\12\31\1\306\12\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\21\31\1\231\3\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\1\31\1\307\23\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\1\31" +
                    "\1\310\23\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\15\31\1\307\7\31\4\0\1\31\27\0\1\31" +
                    "\7\0\1\31\5\0\3\31\1\241\21\31\4\0\1\31" +
                    "\27\0\1\31\7\0\1\31\5\0\17\31\1\265\5\31" +
                    "\4\0\1\31\27\0\1\31\7\0\1\31\5\0\3\31" +
                    "\1\237\21\31\4\0\1\31\27\0\1\31\7\0\1\31" +
                    "\5\0\3\31\1\311\21\31\4\0\1\31\12\0\1\312" +
                    "\14\0\1\31\5\0\1\312\1\0\1\31\5\0\25\31" +
                    "\4\0\1\31\7\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[8505];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\1\1\1\11\1\1\2\11\1\1\5\11" +
                    "\1\1\1\11\1\1\1\11\1\1\6\11\1\1\1\11" +
                    "\1\1\2\11\17\1\10\11\1\1\2\11\1\0\1\11" +
                    "\2\0\2\11\2\0\1\11\37\1\1\0\1\11\37\1" +
                    "\1\11\72\1\1\11\15\1\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[202];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 71:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 72:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 73:
                        break;
                    case 4: {
                        return HASH;
                    }
                    // fall through
                    case 74:
                        break;
                    case 5: {
                        return DOLLAR;
                    }
                    // fall through
                    case 75:
                        break;
                    case 6: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 76:
                        break;
                    case 7: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 77:
                        break;
                    case 8: {
                        return STAR;
                    }
                    // fall through
                    case 78:
                        break;
                    case 9: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 79:
                        break;
                    case 10: {
                        return COMMA;
                    }
                    // fall through
                    case 80:
                        break;
                    case 11: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 81:
                        break;
                    case 12: {
                        return DOT;
                    }
                    // fall through
                    case 82:
                        break;
                    case 13: {
                        return SLASH;
                    }
                    // fall through
                    case 83:
                        break;
                    case 14: {
                        return INTEGER;
                    }
                    // fall through
                    case 84:
                        break;
                    case 15: {
                        return COLON;
                    }
                    // fall through
                    case 85:
                        break;
                    case 16: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 86:
                        break;
                    case 17: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 87:
                        break;
                    case 18: {
                        return EQUAL;
                    }
                    // fall through
                    case 88:
                        break;
                    case 19: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 89:
                        break;
                    case 20: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 90:
                        break;
                    case 21: {
                        return AT;
                    }
                    // fall through
                    case 91:
                        break;
                    case 22: {
                        return SYMBOL;
                    }
                    // fall through
                    case 92:
                        break;
                    case 23: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 93:
                        break;
                    case 24: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 94:
                        break;
                    case 25: {
                        return OP_REMARK;
                    }
                    // fall through
                    case 95:
                        break;
                    case 26: {
                        return BRACE_L;
                    }
                    // fall through
                    case 96:
                        break;
                    case 27: {
                        return OP_OR;
                    }
                    // fall through
                    case 97:
                        break;
                    case 28: {
                        return BRACE_R;
                    }
                    // fall through
                    case 98:
                        break;
                    case 29: {
                        return OP_CONCAT;
                    }
                    // fall through
                    case 99:
                        break;
                    case 30: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 100:
                        break;
                    case 31: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 101:
                        break;
                    case 32: {
                        return PROPORTION;
                    }
                    // fall through
                    case 102:
                        break;
                    case 33: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 103:
                        break;
                    case 34: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 104:
                        break;
                    case 35: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 105:
                        break;
                    case 36: {
                        return TEXT_DOUBLE;
                    }
                    // fall through
                    case 106:
                        break;
                    case 37: {
                        return TEXT_SINGLE;
                    }
                    // fall through
                    case 107:
                        break;
                    case 38: {
                        return OP_TO;
                    }
                    // fall through
                    case 108:
                        break;
                    case 39: {
                        return SYMBOW_RAW;
                    }
                    // fall through
                    case 109:
                        break;
                    case 40: {
                        return KW_AS;
                    }
                    // fall through
                    case 110:
                        break;
                    case 41: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 111:
                        break;
                    case 42: {
                        return KW_IF;
                    }
                    // fall through
                    case 112:
                        break;
                    case 43: {
                        return KW_IN;
                    }
                    // fall through
                    case 113:
                        break;
                    case 44: {
                        return KW_IS;
                    }
                    // fall through
                    case 114:
                        break;
                    case 45: {
                        return KW_FOR;
                    }
                    // fall through
                    case 115:
                        break;
                    case 46: {
                        return KW_LET;
                    }
                    // fall through
                    case 116:
                        break;
                    case 47: {
                        return KW_NIL;
                    }
                    // fall through
                    case 117:
                        break;
                    case 48: {
                        return KW_NOT;
                    }
                    // fall through
                    case 118:
                        break;
                    case 49: {
                        return KW_TRY;
                    }
                    // fall through
                    case 119:
                        break;
                    case 50: {
                        return COMMENT_BLOCK;
                    }
                    // fall through
                    case 120:
                        break;
                    case 51: {
                        return KW_CASE;
            }
          // fall through
                    case 121: break;
                    case 52: {
                        return KW_ELSE;
                    }
                    // fall through
                    case 122:
                        break;
                    case 53: {
                        return KW_ENUMERATE;
                    }
                    // fall through
                    case 123:
                        break;
                    case 54: {
                        return KW_NULL;
                    }
                    // fall through
                    case 124:
                        break;
                    case 55: {
                        return KW_TRUE;
                    }
                    // fall through
                    case 125:
                        break;
                    case 56: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 126:
                        break;
                    case 57: {
                        return KW_WHEN;
                    }
                    // fall through
                    case 127:
                        break;
                    case 58: {
                        return KW_CATCH;
                    }
                    // fall through
                    case 128:
                        break;
                    case 59: {
                        return KW_CLASS;
                    }
                    // fall through
                    case 129:
                        break;
                    case 60: {
                        return KW_FALSE;
                    }
                    // fall through
                    case 130:
                        break;
                    case 61: {
                        return KW_FLAGS;
                    }
                    // fall through
                    case 131:
                        break;
                    case 62: {
                        return KW_IMPLY;
                    }
                    // fall through
                    case 132:
                        break;
                    case 63: {
                        return KW_MATCH;
                    }
                    // fall through
                    case 133:
                        break;
                    case 64: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 134:
                        break;
                    case 65: {
                        return KW_UNION;
                    }
                    // fall through
                    case 135:
                        break;
                    case 66: {
                        return KW_UNITE;
                    }
                    // fall through
                    case 136:
                        break;
                    case 67: {
                        return KW_WHILE;
                    }
                    // fall through
                    case 137:
                        break;
                    case 68: {
                        return KW_USING;
                    }
                    // fall through
                    case 138:
                        break;
                    case 69:
            { return KW_EXCLUDE;
            }
          // fall through
                    case 139: break;
          case 70:
            { return KW_NAMESPACE;
            }
          // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
