// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int TextCapture6 = 2;
    public static final int TextCapture3 = 4;
    public static final int TextCapture2 = 6;
    public static final int TextCapture1 = 8;
    public static final int AfterNumber = 10;
    public static final int AfterNumberBase = 12;
    public static final int AfterNumberExp = 14;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3,  4,  4, 5, 5, 6, 6, 7, 7
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\1\u2100\1\u2300" +
                    "\1\u2400\1\u2100\1\u2500\1\u2600\1\u2700\1\u2100\1\u2800\1\u2900" +
                    "\2\u2100\31\u0100\1\u2a00\121\u0100\1\u2b00\4\u0100\1\u2c00\1\u0100" +
                    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\53\u0100\1\u3300" +
                    "\41\u2100\1\u0100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900" +
                    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u0100\1\u4000" +
                    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u2100\1\u4700" +
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00" +
                    "\1\u5000\1\u5100\1\u5200\1\u2100\1\u5300\1\u5400\1\u5500\1\u2100" +
                    "\3\u0100\1\u5600\1\u5700\1\u5800\12\u2100\4\u0100\1\u5900\17\u2100" +
                    "\2\u0100\1\u5a00\41\u2100\2\u0100\1\u5b00\1\u5c00\2\u2100\1\u5d00" +
                    "\1\u5e00\27\u0100\1\u5f00\2\u0100\1\u6000\45\u2100\1\u0100\1\u6100" +
                    "\1\u6200\11\u2100\1\u6300\24\u2100\1\u6400\1\u6500\1\u2100\1\u6600" +
                    "\1\u6700\1\u6800\1\u6900\2\u2100\1\u6a00\5\u2100\1\u6b00\1\u6c00" +
                    "\1\u6d00\5\u2100\1\u6e00\1\u6f00\4\u2100\1\u7000\21\u2100\246\u0100" +
                    "\1\u7100\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500" +
                    "\14\u2100\2\u0100\1\u7600\u0b06\u2100\1\u7700\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\13\32\1\33" +
                    "\1\32\1\34\14\32\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61" +
                    "\1\62\1\32\1\63\1\64\1\65\1\66\1\67\1\70" +
                    "\1\71\1\72\1\32\1\73\1\74\1\75\7\0\1\1" +
                    "\32\0\1\1\10\0\1\76\1\77\1\0\1\100\1\0" +
                    "\1\76\6\0\1\77\1\101\1\102\2\0\1\77\5\0" +
                    "\27\77\1\103\37\77\1\104\u01ca\77\4\0\14\77\16\0" +
                    "\5\77\7\0\1\77\1\0\1\77\21\0\160\102\5\77" +
                    "\1\0\2\77\3\0\3\77\1\0\1\77\6\0\1\77" +
                    "\1\102\3\77\1\0\1\77\1\0\24\77\1\0\123\77" +
                    "\1\0\213\77\1\0\5\102\2\0\246\77\1\0\46\77" +
                    "\2\0\1\77\6\0\51\77\10\0\55\102\1\0\1\102" +
                    "\1\0\2\102\1\0\2\102\1\0\1\102\10\0\33\77" +
                    "\4\0\4\77\35\0\13\102\5\0\53\77\37\102\4\0" +
                    "\2\77\1\102\143\77\1\0\1\77\7\102\2\0\6\102" +
                    "\2\77\2\102\1\0\4\102\2\77\12\102\3\77\2\0" +
                    "\1\77\20\0\1\77\1\102\36\77\33\102\2\0\131\77" +
                    "\13\102\1\77\16\0\12\102\41\77\11\102\2\77\4\0" +
                    "\1\77\2\0\1\102\2\0\26\77\4\102\1\77\11\102" +
                    "\1\77\3\102\1\77\5\102\22\0\31\77\3\102\4\0" +
                    "\13\77\65\0\25\77\1\0\10\77\25\0\17\102\1\0" +
                    "\41\102\66\77\3\102\1\77\22\102\1\77\7\102\12\77" +
                    "\2\102\2\0\12\102\1\0\20\77\3\102\1\0\10\77" +
                    "\2\0\2\77\2\0\26\77\1\0\7\77\1\0\1\77" +
                    "\3\0\4\77\2\0\1\102\1\77\7\102\2\0\2\102" +
                    "\2\0\3\102\1\77\10\0\1\102\4\0\2\77\1\0" +
                    "\3\77\2\102\2\0\12\102\2\77\12\0\1\77\1\0" +
                    "\1\102\2\0\3\102\1\0\6\77\4\0\2\77\2\0" +
                    "\26\77\1\0\7\77\1\0\2\77\1\0\2\77\1\0" +
                    "\2\77\2\0\1\102\1\0\5\102\4\0\2\102\2\0" +
                    "\3\102\3\0\1\102\7\0\4\77\1\0\1\77\7\0" +
                    "\14\102\3\77\1\102\13\0\3\102\1\0\11\77\1\0" +
                    "\3\77\1\0\26\77\1\0\7\77\1\0\2\77\1\0" +
                    "\5\77\2\0\1\102\1\77\10\102\1\0\3\102\1\0" +
                    "\3\102\2\0\1\77\17\0\2\77\2\102\2\0\12\102" +
                    "\11\0\1\77\6\102\1\0\3\102\1\0\10\77\2\0" +
                    "\2\77\2\0\26\77\1\0\7\77\1\0\2\77\1\0" +
                    "\5\77\2\0\1\102\1\77\7\102\2\0\2\102\2\0" +
                    "\3\102\10\0\2\102\4\0\2\77\1\0\3\77\2\102" +
                    "\2\0\12\102\1\0\1\77\20\0\1\102\1\77\1\0" +
                    "\6\77\3\0\3\77\1\0\4\77\3\0\2\77\1\0" +
                    "\1\77\1\0\2\77\3\0\2\77\3\0\3\77\3\0" +
                    "\14\77\4\0\5\102\3\0\3\102\1\0\4\102\2\0" +
                    "\1\77\6\0\1\102\16\0\12\102\20\0\5\102\10\77" +
                    "\1\0\3\77\1\0\27\77\1\0\20\77\3\0\1\77" +
                    "\7\102\1\0\3\102\1\0\4\102\7\0\2\102\1\0" +
                    "\3\77\5\0\2\77\2\102\2\0\12\102\20\0\1\77" +
                    "\3\102\1\0\10\77\1\0\3\77\1\0\27\77\1\0" +
                    "\12\77\1\0\5\77\2\0\1\102\1\77\7\102\1\0" +
                    "\3\102\1\0\4\102\7\0\2\102\7\0\1\77\1\0" +
                    "\2\77\2\102\2\0\12\102\1\0\2\77\15\0\4\102" +
                    "\1\0\10\77\1\0\3\77\1\0\51\77\2\102\1\77" +
                    "\7\102\1\0\3\102\1\0\4\102\1\77\5\0\3\77" +
                    "\1\102\7\0\3\77\2\102\2\0\12\102\12\0\6\77" +
                    "\2\0\2\102\1\0\22\77\3\0\30\77\1\0\11\77" +
                    "\1\0\1\77\2\0\7\77\3\0\1\102\4\0\6\102" +
                    "\1\0\1\102\1\0\10\102\6\0\12\102\2\0\2\102" +
                    "\15\0\60\77\1\102\1\77\10\102\5\0\7\77\10\102" +
                    "\1\0\12\102\47\0\2\77\1\0\1\77\1\0\5\77" +
                    "\1\0\30\77\1\0\1\77\1\0\12\77\1\102\1\77" +
                    "\12\102\1\77\2\0\5\77\1\0\1\77\1\0\6\102" +
                    "\2\0\12\102\2\0\4\77\40\0\1\77\27\0\2\102" +
                    "\6\0\12\102\13\0\1\102\1\0\1\102\1\0\1\102" +
                    "\4\0\2\102\10\77\1\0\44\77\4\0\24\102\1\0" +
                    "\2\102\5\77\13\102\1\0\44\102\11\0\1\102\71\0" +
                    "\53\77\24\102\1\77\12\102\6\0\6\77\4\102\4\77" +
                    "\3\102\1\77\3\102\2\77\7\102\3\77\4\102\15\77" +
                    "\14\102\1\77\17\102\2\0\46\77\1\0\1\77\5\0" +
                    "\1\77\2\0\53\77\1\0\115\77\1\0\4\77\2\0" +
                    "\7\77\1\0\1\77\1\0\4\77\2\0\51\77\1\0" +
                    "\4\77\2\0\41\77\1\0\4\77\2\0\7\77\1\0" +
                    "\1\77\1\0\4\77\2\0\17\77\1\0\71\77\1\0" +
                    "\4\77\2\0\103\77\2\0\3\102\11\0\11\102\16\0" +
                    "\20\77\20\0\126\77\2\0\6\77\3\0\u016c\77\2\0" +
                    "\21\77\1\1\32\77\5\0\113\77\3\0\13\77\7\0" +
                    "\15\77\1\0\4\77\3\102\13\0\22\77\3\102\13\0" +
                    "\22\77\2\102\14\0\15\77\1\0\3\77\1\0\2\102" +
                    "\14\0\64\77\40\102\3\0\1\77\4\0\1\77\1\102" +
                    "\2\0\12\102\41\0\3\102\2\0\12\102\6\0\131\77" +
                    "\7\0\51\77\1\102\1\77\5\0\106\77\12\0\37\77" +
                    "\1\0\14\102\4\0\14\102\12\0\12\102\36\77\2\0" +
                    "\5\77\13\0\54\77\4\0\32\77\6\0\13\102\45\0" +
                    "\27\77\5\102\4\0\65\77\12\102\1\0\35\102\2\0" +
                    "\13\102\6\0\12\102\15\0\1\77\10\0\16\102\102\0" +
                    "\5\102\57\77\21\102\7\77\4\0\12\102\21\0\11\102" +
                    "\14\0\3\102\36\77\15\102\2\77\12\102\54\77\16\102" +
                    "\14\0\44\77\24\102\10\0\12\102\3\0\3\77\12\102" +
                    "\44\77\2\0\11\77\7\0\53\77\2\0\3\77\20\0" +
                    "\3\102\1\0\25\102\4\77\1\102\6\77\1\102\2\77" +
                    "\3\102\1\77\5\0\300\77\72\102\1\0\5\102\26\77" +
                    "\2\0\6\77\2\0\46\77\2\0\6\77\2\0\10\77" +
                    "\1\0\1\77\1\0\1\77\1\0\1\77\1\0\37\77" +
                    "\2\0\65\77\1\0\7\77\1\0\1\77\3\0\3\77" +
                    "\1\0\7\77\3\0\4\77\2\0\6\77\4\0\15\77" +
                    "\5\0\3\77\1\0\7\77\3\0\13\1\32\0\1\105" +
                    "\1\106\1\0\2\1\5\0\1\1\13\0\1\107\3\0" +
                    "\2\102\1\0\1\110\1\0\1\111\1\112\1\113\4\0" +
                    "\1\114\5\0\1\115\1\116\1\0\1\102\7\0\1\117" +
                    "\2\0\1\1\21\0\1\77\15\0\1\77\20\0\15\77" +
                    "\63\0\15\102\4\0\1\102\3\0\14\102\21\0\1\77" +
                    "\1\120\3\0\1\77\1\0\1\121\12\77\1\0\1\77" +
                    "\2\0\6\77\6\0\1\77\1\0\1\77\1\0\1\77" +
                    "\1\0\20\77\2\0\4\77\5\0\5\77\4\0\1\77" +
                    "\21\0\51\77\7\0\1\122\36\0\1\123\42\0\1\124" +
                    "\41\0\1\125\20\0\1\126\17\0\1\111\4\0\1\127" +
                    "\1\130\1\131\12\0\1\132\1\133\15\0\1\23\1\134" +
                    "\50\0\1\135\3\0\1\136\1\137\4\0\1\140\1\141" +
                    "\117\0\1\142\1\143\1\144\32\0\1\145\1\146\56\0" +
                    "\1\147\1\150\1\151\1\152\121\0\1\153\u0203\0\1\101" +
                    "\206\0\1\154\1\155\14\0\1\156\214\0\1\157\1\160" +
                    "\1\161\1\162\256\0\1\125\51\0\1\163\35\0\1\136" +
                    "\1\137\201\0\57\77\1\0\57\77\1\0\205\77\6\0" +
                    "\4\77\3\102\2\77\14\0\46\77\1\0\1\77\5\0" +
                    "\1\77\2\0\70\77\7\0\1\77\17\0\1\102\27\77" +
                    "\11\0\7\77\1\0\7\77\1\0\7\77\1\0\7\77" +
                    "\1\0\7\77\1\0\7\77\1\0\7\77\1\0\7\77" +
                    "\1\0\40\102\54\0\1\134\22\0\1\164\300\0\1\1" +
                    "\1\0\1\165\2\0\3\77\31\0\11\77\6\102\1\0" +
                    "\5\77\2\0\5\77\4\0\126\77\2\0\2\102\2\0" +
                    "\3\77\1\0\132\77\1\0\4\77\5\0\53\77\1\0" +
                    "\136\77\21\0\33\77\65\0\306\77\112\0\360\77\20\0" +
                    "\215\77\103\0\56\77\2\0\15\77\3\0\20\77\12\102" +
                    "\2\77\24\0\57\77\1\102\4\0\12\102\1\0\37\77" +
                    "\2\102\120\77\2\102\45\0\11\77\2\0\147\77\2\0" +
                    "\65\77\2\0\5\77\60\0\13\77\1\102\3\77\1\102" +
                    "\4\77\1\102\27\77\5\102\30\0\64\77\14\0\2\102" +
                    "\62\77\22\102\12\0\12\102\6\0\22\102\6\77\3\0" +
                    "\1\77\1\0\2\77\13\102\34\77\10\102\2\0\27\77" +
                    "\15\102\14\0\35\77\3\0\4\102\57\77\16\102\16\0" +
                    "\1\77\12\102\6\0\5\77\1\102\12\77\12\102\5\77" +
                    "\1\0\51\77\16\102\11\0\3\77\1\102\10\77\2\102" +
                    "\2\0\12\102\6\0\27\77\3\0\1\77\3\102\62\77" +
                    "\1\102\1\77\3\102\2\77\2\102\5\77\2\102\1\77" +
                    "\1\102\1\77\30\0\3\77\2\0\13\77\5\102\2\0" +
                    "\3\77\2\102\12\0\6\77\2\0\6\77\2\0\6\77" +
                    "\11\0\7\77\1\0\7\77\1\0\53\77\1\0\14\77" +
                    "\10\0\163\77\10\102\1\0\2\102\2\0\12\102\6\0" +
                    "\244\77\14\0\27\77\4\0\61\77\4\0\156\77\2\0" +
                    "\152\77\46\0\7\77\14\0\5\77\5\0\1\77\1\102" +
                    "\12\77\1\0\15\77\1\0\5\77\1\0\1\77\1\0" +
                    "\2\77\1\0\2\77\1\0\154\77\41\0\213\77\6\0" +
                    "\332\77\22\0\100\77\2\0\66\77\50\0\12\77\6\0" +
                    "\20\102\20\0\20\102\3\0\2\102\30\0\3\102\41\0" +
                    "\1\77\1\0\1\77\3\0\1\77\1\0\1\77\1\0" +
                    "\1\77\1\0\1\77\1\0\176\77\4\0\1\166\12\0" +
                    "\1\16\3\0\12\102\1\23\4\0\1\167\1\0\32\77" +
                    "\4\0\1\102\1\0\32\77\13\0\70\77\2\102\37\77" +
                    "\3\0\6\77\2\0\6\77\2\0\6\77\2\0\3\77" +
                    "\43\0\14\77\1\0\32\77\1\0\23\77\1\0\2\77" +
                    "\1\0\17\77\2\0\16\77\42\0\173\77\105\0\65\77" +
                    "\210\0\1\102\202\0\35\77\3\0\61\77\17\0\1\102" +
                    "\37\0\40\77\15\0\36\77\5\0\46\77\5\102\5\0" +
                    "\36\77\2\0\44\77\4\0\10\77\1\0\5\77\52\0" +
                    "\236\77\2\0\12\102\6\0\44\77\4\0\44\77\4\0" +
                    "\50\77\10\0\64\77\234\0\67\77\11\0\26\77\12\0" +
                    "\10\77\230\0\6\77\2\0\1\77\1\0\54\77\1\0" +
                    "\2\77\3\0\1\77\2\0\27\77\12\0\27\77\11\0" +
                    "\37\77\101\0\23\77\1\0\2\77\12\0\26\77\12\0" +
                    "\32\77\106\0\70\77\6\0\2\77\100\0\1\77\3\102" +
                    "\1\0\2\102\5\0\4\102\4\77\1\0\3\77\1\0" +
                    "\35\77\2\0\3\102\4\0\1\102\40\0\35\77\3\0" +
                    "\35\77\43\0\10\77\1\0\34\77\2\102\31\0\66\77" +
                    "\12\0\26\77\12\0\23\77\15\0\22\77\156\0\111\77" +
                    "\67\0\63\77\15\0\63\77\15\0\44\77\4\102\10\0" +
                    "\12\102\306\0\35\77\12\0\1\77\10\0\26\77\13\102" +
                    "\217\0\27\77\11\0\3\102\65\77\17\102\37\0\12\102" +
                    "\17\0\4\102\55\77\13\102\25\0\31\77\7\0\12\102" +
                    "\6\0\3\102\44\77\16\102\1\0\12\102\4\0\1\77" +
                    "\2\102\11\0\43\77\1\102\2\0\1\77\11\0\3\102" +
                    "\60\77\16\102\4\77\4\0\4\102\3\0\12\102\1\77" +
                    "\1\0\1\77\43\0\22\77\1\0\31\77\14\102\6\0" +
                    "\1\102\101\0\7\77\1\0\1\77\1\0\4\77\1\0" +
                    "\17\77\1\0\12\77\7\0\57\77\14\102\5\0\12\102" +
                    "\6\0\4\102\1\0\10\77\2\0\2\77\2\0\26\77" +
                    "\1\0\7\77\1\0\2\77\1\0\5\77\1\0\2\102" +
                    "\1\77\7\102\2\0\2\102\2\0\3\102\2\0\1\77" +
                    "\6\0\1\102\5\0\5\77\2\102\2\0\7\102\3\0" +
                    "\5\102\213\0\65\77\22\102\4\77\5\0\12\102\4\0" +
                    "\1\102\1\77\40\0\60\77\24\102\2\77\1\0\1\77" +
                    "\10\0\12\102\246\0\57\77\7\102\2\0\11\102\27\0" +
                    "\4\77\2\102\42\0\60\77\21\102\3\0\1\77\13\0" +
                    "\12\102\46\0\53\77\15\102\1\77\7\0\12\102\66\0" +
                    "\33\77\2\0\17\102\4\0\12\102\306\0\54\77\17\102" +
                    "\145\0\100\77\12\102\25\0\1\77\240\0\10\77\2\0" +
                    "\47\77\7\102\2\0\7\102\1\77\1\0\1\77\1\102" +
                    "\33\0\1\77\12\102\50\77\7\102\1\77\4\102\10\0" +
                    "\1\102\10\0\1\77\13\102\56\77\20\102\3\0\1\77" +
                    "\42\0\71\77\7\0\11\77\1\0\45\77\10\102\1\0" +
                    "\10\102\1\77\17\0\12\102\30\0\36\77\2\0\26\102" +
                    "\1\0\16\102\111\0\7\77\1\0\2\77\1\0\46\77" +
                    "\6\102\3\0\1\102\1\0\2\102\1\0\7\102\1\77" +
                    "\1\102\10\0\12\102\6\0\6\77\1\0\2\77\1\0" +
                    "\40\77\5\102\1\0\2\102\1\0\5\102\1\77\7\0" +
                    "\12\102\u0136\0\23\77\4\102\11\0\232\77\146\0\157\77" +
                    "\21\0\304\77\274\0\57\77\321\0\107\77\271\0\71\77" +
                    "\7\0\37\77\1\0\12\102\146\0\36\77\2\0\5\102" +
                    "\13\0\60\77\7\102\11\0\4\77\14\0\12\102\11\0" +
                    "\25\77\5\0\23\77\260\0\100\77\200\0\113\77\4\0" +
                    "\1\102\1\77\67\102\7\0\4\102\15\77\100\0\2\77" +
                    "\1\0\1\77\34\0\370\77\10\0\363\77\15\0\37\77" +
                    "\61\0\3\77\21\0\4\77\10\0\u018c\77\4\0\153\77" +
                    "\5\0\15\77\3\0\11\77\7\0\12\77\3\0\2\102" +
                    "\306\0\5\102\3\0\6\102\10\0\10\102\2\0\7\102" +
                    "\36\0\4\102\224\0\3\102\273\0\125\77\1\0\107\77" +
                    "\1\0\2\77\2\0\1\77\2\0\2\77\2\0\4\77" +
                    "\1\0\14\77\1\0\1\77\1\0\7\77\1\0\101\77" +
                    "\1\0\4\77\2\0\10\77\1\0\7\77\1\0\34\77" +
                    "\1\0\4\77\1\0\5\77\1\0\1\77\3\0\7\77" +
                    "\1\0\u0154\77\2\0\31\77\1\0\31\77\1\0\37\77" +
                    "\1\0\31\77\1\0\37\77\1\0\31\77\1\0\37\77" +
                    "\1\0\31\77\1\0\37\77\1\0\31\77\1\0\10\77" +
                    "\2\0\151\102\4\0\62\102\10\0\1\102\16\0\1\102" +
                    "\26\0\5\102\1\0\17\102\120\0\7\102\1\0\21\102" +
                    "\2\0\7\102\1\0\2\102\1\0\5\102\325\0\55\77" +
                    "\3\0\7\102\7\77\2\0\12\102\4\0\1\77\u0171\0" +
                    "\54\77\16\102\6\0\305\77\13\0\7\102\51\0\104\77" +
                    "\7\102\1\77\4\0\12\102\246\0\4\77\1\0\33\77" +
                    "\1\0\2\77\1\0\1\77\2\0\1\77\1\0\12\77" +
                    "\1\0\4\77\1\0\1\77\1\0\1\77\6\0\1\77" +
                    "\4\0\1\77\1\0\1\77\1\0\1\77\1\0\3\77" +
                    "\1\0\2\77\1\0\1\77\2\0\1\77\1\0\1\77" +
                    "\1\0\1\77\1\0\1\77\1\0\1\77\1\0\2\77" +
                    "\1\0\1\77\2\0\4\77\1\0\7\77\1\0\4\77" +
                    "\1\0\4\77\1\0\1\77\1\0\12\77\1\0\21\77" +
                    "\5\0\3\77\1\0\5\77\1\0\21\77\104\0\327\77" +
                    "\51\0\65\77\13\0\336\77\2\0\u0182\77\16\0\u0131\77" +
                    "\37\0\36\77\342\0\360\102\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30720];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27" +
                    "\1\30\1\31\1\32\1\33\1\1\1\34\1\35\1\1" +
                    "\22\32\1\36\1\37\1\40\1\41\1\42\1\43\1\44" +
                    "\1\45\1\46\1\47\1\50\1\21\1\51\1\52\1\53" +
                    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63" +
                    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73" +
                    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103" +
                    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113" +
                    "\1\114\1\115\1\116\1\117\4\120\1\121\2\122\1\123" +
                    "\3\122\1\1\1\124\1\125\2\1\1\126\1\127\1\0" +
                    "\1\130\2\0\1\131\1\132\1\133\1\46\1\134\1\135" +
                    "\1\136\2\0\1\137\1\140\1\141\1\142\1\0\1\143" +
                    "\1\144\13\32\1\145\4\32\1\146\1\32\1\147\1\150" +
                    "\27\32\4\0\1\123\1\151\1\0\1\152\3\0\1\153" +
                    "\1\154\1\155\1\156\1\157\1\160\1\161\1\144\16\32" +
                    "\1\145\5\32\1\162\6\32\1\163\1\63\1\164\12\32" +
                    "\1\165\11\32\2\0\1\124\1\32\1\166\4\32\1\167" +
                    "\1\170\6\32\1\171\1\145\5\32\1\172\5\32\1\173" +
                    "\10\32\1\174\1\165\1\175\5\32\1\176\3\32\1\177" +
                    "\1\32\1\151\1\200\1\201\1\202\3\32\1\203\3\32" +
                    "\1\204\4\32\1\205\3\32\1\206\1\207\3\32\1\210" +
                    "\5\32\1\211\1\212\1\213\1\214\1\215\1\216\1\217" +
                    "\1\32\1\220\4\32\1\205\1\32\1\221\5\32\1\222" +
                    "\1\32\1\223\1\224\1\225\1\226\1\32\1\202\1\32" +
                    "\1\215\1\227\3\32\1\230\12\32\1\231\10\32\1\232" +
                    "\1\233\1\32\1\232\1\234";

    private static int[] zzUnpackAction() {
        int[] result = new int[402];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\170\0\360\0\u0168\0\u01e0\0\u0258\0\u02d0\0\u0348" +
                    "\0\u03c0\0\u0438\0\u03c0\0\u04b0\0\u0528\0\u03c0\0\u05a0\0\u0618" +
                    "\0\u0690\0\u03c0\0\u03c0\0\u0708\0\u0780\0\u03c0\0\u07f8\0\u0870" +
                    "\0\u08e8\0\u0960\0\u09d8\0\u03c0\0\u0a50\0\u0ac8\0\u0b40\0\u0bb8" +
                    "\0\u0c30\0\u0ca8\0\u03c0\0\u0d20\0\u03c0\0\u03c0\0\u0d98\0\u0e10" +
                    "\0\u0e88\0\u0f00\0\u0f78\0\u0ff0\0\u1068\0\u10e0\0\u1158\0\u11d0" +
                    "\0\u1248\0\u12c0\0\u1338\0\u13b0\0\u1428\0\u14a0\0\u1518\0\u1590" +
                    "\0\u1608\0\u03c0\0\u1680\0\u03c0\0\u16f8\0\u1770\0\u03c0\0\u0708" +
                    "\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u17e8\0\u03c0\0\u03c0\0\u03c0" +
                    "\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0" +
                    "\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0" +
                    "\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0" +
                    "\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0" +
                    "\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u1860\0\u18d8\0\u1950\0\u19c8" +
                    "\0\u03c0\0\u03c0\0\u1a40\0\u1ab8\0\u1b30\0\u1ba8\0\u1c20\0\u1c98" +
                    "\0\u1d10\0\u03c0\0\u1d88\0\u1e00\0\u1e00\0\u03c0\0\u1e78\0\u03c0" +
                    "\0\u1ef0\0\u1f68\0\u03c0\0\u03c0\0\u03c0\0\u1fe0\0\u2058\0\u03c0" +
                    "\0\u20d0\0\u2148\0\u21c0\0\u03c0\0\u2238\0\u03c0\0\u03c0\0\u0d98" +
                    "\0\u03c0\0\u22b0\0\u2328\0\u23a0\0\u2418\0\u2490\0\u2508\0\u2580" +
                    "\0\u25f8\0\u2670\0\u26e8\0\u2760\0\u27d8\0\u0ca8\0\u2850\0\u28c8" +
                    "\0\u2940\0\u29b8\0\u0ca8\0\u2a30\0\u2aa8\0\u0ca8\0\u2b20\0\u2b98" +
                    "\0\u2c10\0\u2c88\0\u2d00\0\u2d78\0\u2df0\0\u2e68\0\u2ee0\0\u2f58" +
                    "\0\u2fd0\0\u3048\0\u30c0\0\u3138\0\u31b0\0\u3228\0\u32a0\0\u3318" +
                    "\0\u3390\0\u3408\0\u3480\0\u34f8\0\u3570\0\u35e8\0\u3660\0\u36d8" +
                    "\0\u1b30\0\u03c0\0\u3750\0\u37c8\0\u37c8\0\u3840\0\u38b8\0\u3930" +
                    "\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u39a8\0\u03c0\0\u03c0" +
                    "\0\u3a20\0\u3a98\0\u3b10\0\u3b88\0\u3c00\0\u3c78\0\u3cf0\0\u3d68" +
                    "\0\u3de0\0\u3e58\0\u3ed0\0\u3f48\0\u3fc0\0\u4038\0\u40b0\0\u4128" +
                    "\0\u41a0\0\u4218\0\u4290\0\u4308\0\u0ca8\0\u4380\0\u43f8\0\u4470" +
                    "\0\u44e8\0\u4560\0\u45d8\0\u0ca8\0\u0ca8\0\u0ca8\0\u4650\0\u46c8" +
                    "\0\u4740\0\u47b8\0\u4830\0\u48a8\0\u4920\0\u4998\0\u4a10\0\u4a88" +
                    "\0\u4b00\0\u4b78\0\u4bf0\0\u4c68\0\u4ce0\0\u4d58\0\u4dd0\0\u4e48" +
                    "\0\u4ec0\0\u4f38\0\u1ba8\0\u4fb0\0\u5028\0\u50a0\0\u0ca8\0\u5118" +
                    "\0\u5190\0\u5208\0\u5280\0\u0ca8\0\u0ca8\0\u52f8\0\u5370\0\u53e8" +
                    "\0\u5460\0\u54d8\0\u5550\0\u0ca8\0\u55c8\0\u5640\0\u56b8\0\u5730" +
                    "\0\u57a8\0\u5820\0\u0ca8\0\u5898\0\u5910\0\u5988\0\u5a00\0\u5a78" +
                    "\0\u0ca8\0\u5af0\0\u5b68\0\u5be0\0\u5c58\0\u5cd0\0\u5d48\0\u5dc0" +
                    "\0\u5e38\0\u0ca8\0\u03c0\0\u0ca8\0\u5eb0\0\u5f28\0\u5fa0\0\u6018" +
                    "\0\u6090\0\u0ca8\0\u6108\0\u6180\0\u61f8\0\u0ca8\0\u6270\0\u62e8" +
                    "\0\u0ca8\0\u0ca8\0\u0ca8\0\u6360\0\u63d8\0\u6450\0\u0ca8\0\u64c8" +
                    "\0\u6540\0\u65b8\0\u0ca8\0\u6630\0\u66a8\0\u6720\0\u6798\0\u0ca8" +
                    "\0\u6810\0\u6888\0\u6900\0\u0ca8\0\u0ca8\0\u6978\0\u69f0\0\u6a68" +
                    "\0\u0ca8\0\u6ae0\0\u6b58\0\u6bd0\0\u6c48\0\u6cc0\0\u0ca8\0\u0ca8" +
                    "\0\u0ca8\0\u0ca8\0\u6d38\0\u0ca8\0\u0ca8\0\u6db0\0\u0ca8\0\u6e28" +
                    "\0\u6ea0\0\u6f18\0\u6f90\0\u7008\0\u7080\0\u0ca8\0\u70f8\0\u7170" +
                    "\0\u71e8\0\u7260\0\u72d8\0\u0ca8\0\u7350\0\u0ca8\0\u0ca8\0\u0ca8" +
                    "\0\u0ca8\0\u73c8\0\u7440\0\u74b8\0\u03c0\0\u0ca8\0\u7530\0\u75a8" +
                    "\0\u7620\0\u0ca8\0\u7698\0\u7710\0\u7788\0\u7800\0\u7878\0\u78f0" +
                    "\0\u7968\0\u79e0\0\u7a58\0\u7ad0\0\u0ca8\0\u7b48\0\u7bc0\0\u7c38" +
                    "\0\u7cb0\0\u7d28\0\u7da0\0\u7e18\0\u7e90\0\u7f08\0\u0ca8\0\u7f80" +
                    "\0\u03c0\0\u0ca8";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[402];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\11\2\12\1\13\1\14\1\15\1\16\1\17\1\20" +
                    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30" +
                    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
                    "\1\41\3\42\1\43\1\44\1\45\1\46\1\42\1\47" +
                    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\42" +
                    "\1\57\2\42\1\60\1\61\1\62\1\63\1\42\1\64" +
                    "\1\65\1\66\1\67\1\42\1\70\1\42\1\71\1\72" +
                    "\1\73\1\74\1\75\1\42\1\76\1\77\1\11\1\100" +
                    "\1\101\1\102\1\103\1\104\1\11\1\105\1\106\1\107" +
                    "\1\110\1\11\1\17\1\111\1\112\1\113\1\114\1\115" +
                    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125" +
                    "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135" +
                    "\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\15" +
                    "\1\145\1\146\1\147\1\11\1\150\1\151\1\152\1\153" +
                    "\1\154\1\30\1\13\1\40\4\155\1\156\163\155\11\157" +
                    "\1\160\156\157\4\155\1\161\163\155\11\157\1\161\156\157" +
                    "\14\162\1\163\15\162\3\164\4\162\1\164\1\165\30\164" +
                    "\4\162\1\164\10\162\1\166\4\162\1\167\52\162\14\11" +
                    "\1\170\5\11\1\171\7\11\3\171\6\11\30\171\15\11" +
                    "\1\172\73\11\1\173\1\174\1\11\1\174\2\11\1\175" +
                    "\72\11\1\176\52\11\171\0\2\12\171\0\1\177\163\0" +
                    "\2\15\1\0\165\15\26\0\1\200\151\0\1\124\170\0" +
                    "\1\201\145\0\1\202\36\0\1\203\167\0\1\204\167\0" +
                    "\1\205\1\147\160\0\1\206\144\0\1\206\11\0\1\101" +
                    "\10\0\1\207\5\0\1\210\2\0\1\117\6\0\1\211" +
                    "\124\0\1\207\22\0\1\212\1\0\1\32\16\0\1\213" +
                    "\151\0\1\126\4\0\1\214\136\0\1\214\17\0\1\114" +
                    "\6\0\1\130\167\0\1\215\1\116\166\0\1\131\164\0" +
                    "\1\214\2\0\1\216\1\0\1\217\136\0\1\217\31\0" +
                    "\1\115\160\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\30\42\4\0\1\42\2\0\1\42\72\0\1\75\25\0" +
                    "\1\154\1\111\21\0\1\104\111\0\42\220\1\221\125\220" +
                    "\22\0\1\42\7\0\3\42\4\0\1\42\1\0\21\42" +
                    "\1\222\6\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\20\42\1\223\7\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\1\224\12\42\1\225\2\42\1\226" +
                    "\11\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\227\23\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\1\230\12\42\1\231\1\42\1\232\10\42" +
                    "\1\233\1\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\1\234\12\42\1\235" +
                    "\1\42\1\236\1\237\1\42\1\240\2\42\1\241\4\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\4\42\1\242\23\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\5\42\1\243\6\42\1\244\1\245\3\42\1\246" +
                    "\6\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\1\247\3\42\1\250\11\42" +
                    "\1\251\11\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\1\252\7\42\1\253" +
                    "\17\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\1\254\3\42\1\255\3\42" +
                    "\1\256\5\42\1\257\4\42\1\260\4\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\1\42\1\261\26\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\1\262" +
                    "\3\42\1\263\23\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\10\42\1\264" +
                    "\11\42\1\265\5\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\4\42\1\266" +
                    "\13\42\1\267\6\42\1\270\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\15\42" +
                    "\1\271\3\42\1\272\6\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\7\42" +
                    "\1\273\1\274\17\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\10\42\1\275" +
                    "\17\42\4\0\1\42\2\0\1\42\161\0\1\125\115\0" +
                    "\1\75\7\0\3\75\6\0\30\75\122\0\1\131\1\127" +
                    "\1\130\160\0\1\207\5\0\1\210\11\0\1\211\124\0" +
                    "\1\207\2\0\4\155\1\0\163\155\4\0\1\276\163\0" +
                    "\11\157\1\0\156\157\11\0\1\277\172\0\1\300\175\0" +
                    "\1\164\7\0\3\164\4\0\1\164\1\0\30\164\4\0" +
                    "\1\164\2\0\1\164\65\0\42\301\1\302\125\301\22\0" +
                    "\1\303\7\0\3\303\6\0\30\303\112\0\1\304\1\0" +
                    "\1\304\2\0\1\305\161\0\1\306\173\0\1\307\1\0" +
                    "\1\171\7\0\3\171\4\0\1\310\1\0\30\171\111\0" +
                    "\1\176\175\0\1\175\151\0\1\311\174\0\1\312\167\0" +
                    "\1\313\176\0\1\103\4\0\2\314\136\0\1\103\42\0" +
                    "\1\315\147\0\1\315\144\0\1\315\24\0\1\316\167\0" +
                    "\1\32\174\0\1\317\143\0\1\320\16\0\1\42\5\0" +
                    "\1\320\1\0\3\42\4\0\1\42\1\0\30\42\4\0" +
                    "\1\42\2\0\1\42\63\0\2\320\22\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\321\23\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\21\42\1\322\1\323\5\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\1\324\27\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\15\42\1\325" +
                    "\12\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\5\42\1\236\22\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\2\42\1\326\25\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\21\42\1\327\6\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\23\42\1\330" +
                    "\4\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\2\42\1\331\17\42\1\332" +
                    "\5\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\13\42\1\333\14\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\1\334\27\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\20\42" +
                    "\1\335\7\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\16\42\1\336\11\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\15\42\1\337\12\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\15\42\1\340\12\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\17\42" +
                    "\1\341\10\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\3\42\1\342\16\42" +
                    "\1\343\5\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\14\42\1\344\13\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\22\42\1\345\5\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\16\42\1\346\11\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\2\42" +
                    "\1\347\17\42\1\350\5\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\2\42" +
                    "\1\351\25\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\14\42\1\352\13\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\23\42\1\353\1\42\1\354\2\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\13\42\1\355\14\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\22\42\1\356\5\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\13\42" +
                    "\1\357\14\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\11\42\1\360\16\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\10\42\1\361\17\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\21\42\1\362\1\363\5\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\15\42\1\364\12\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\20\42\1\365" +
                    "\7\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\14\42\1\366\13\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\1\367\22\42\1\370\3\42\1\371\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\17\42\1\372\10\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\10\42\1\373\11\42\1\374\5\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\10\42\1\375\17\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\4\42\1\376" +
                    "\3\42\1\377\17\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\3\42\1\u0100" +
                    "\16\42\1\u0101\5\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\4\42\1\u0102" +
                    "\23\42\4\0\1\42\2\0\1\42\71\0\1\161\174\0" +
                    "\1\161\172\0\1\u0103\1\304\1\0\1\304\2\0\1\305" +
                    "\165\0\1\u0104\1\0\1\303\7\0\3\303\4\0\1\u0103" +
                    "\1\0\30\303\117\0\1\305\161\0\1\172\175\0\1\u0105" +
                    "\7\0\3\u0105\6\0\30\u0105\117\0\1\171\7\0\3\171" +
                    "\6\0\30\171\117\0\1\316\16\0\1\212\150\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\1\u0106\27\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u0107\23\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\2\42\1\u0108\25\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\21\42\1\u0109" +
                    "\6\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\21\42\1\u010a\1\u010b\5\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\7\42\1\u010c\20\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\4\42\1\u010d\23\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\14\42" +
                    "\1\u010e\13\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\13\42\1\u010f\14\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\4\42\1\u0110\23\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\13\42\1\u0111\5\42\1\370\6\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\6\42\1\u0112\21\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\1\u0113" +
                    "\27\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\14\42\1\u0114\13\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\2\42\1\u0115\25\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u0116\23\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\13\42\1\u0117" +
                    "\14\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\23\42\1\u0118\4\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u0119\23\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\1\42\1\u011a\26\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\17\42\1\u011b" +
                    "\10\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\20\42\1\u011c\7\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\2\42\1\u011d\25\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\20\42\1\u011e\7\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\4\42\1\u011f" +
                    "\23\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\20\42\1\u0120\7\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\13\42\1\u0121\14\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u0122\23\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\21\42\1\u0123" +
                    "\6\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\23\42\1\u0124\4\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\23\42\1\u0125\4\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\6\42\1\u0126\21\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\23\42\1\u0127" +
                    "\4\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\17\42\1\u0128\10\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\10\42\1\u0129\17\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u012a\23\42\4\0\1\42\2\0\1\42\70\0" +
                    "\1\u012b\16\0\1\42\5\0\1\u012b\1\0\3\42\4\0" +
                    "\1\42\1\0\30\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\4\42\1\u012c" +
                    "\16\42\1\u012d\4\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\16\42\1\u012e" +
                    "\3\42\1\u012f\5\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\10\42\1\u0130" +
                    "\17\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\15\42\1\u0131\12\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\15\42\1\u0132\2\42\1\u0133\7\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\13\42\1\u0134\14\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\6\42\1\u0135\21\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\7\42\1\u0136" +
                    "\20\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\13\42\1\u0137\14\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\u0138\7\0\3\u0138\6\0" +
                    "\30\u0138\117\0\1\u0105\7\0\3\u0105\4\0\1\307\1\0" +
                    "\30\u0105\117\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\12\42\1\u0139\15\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\7\42\1\u013a" +
                    "\20\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\21\42\1\u013b\6\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\22\42\1\u013c\5\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\10\42\1\u013d\17\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\4\42\1\u013e" +
                    "\14\42\1\u013f\6\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\23\42\1\u0140" +
                    "\4\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\15\42\1\u0141\12\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\22\42\1\u0142\5\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\21\42\1\u0143\6\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\13\42\1\u0144" +
                    "\14\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\22\42\1\u0145\5\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\20\42\1\u0146\7\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\10\42\1\u0147\16\42\1\u0148\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\2\42" +
                    "\1\u0149\25\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\20\42\1\u014a\7\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\3\42\1\u014b\24\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\16\42\1\u014c\11\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\7\42" +
                    "\1\u014d\20\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\16\42\1\236\11\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\21\42\1\u014e\6\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\1\u014f\27\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\2\42\1\u0150" +
                    "\25\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\u0151\23\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\14\42\1\u0152\13\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\20\42\1\u0153\7\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\13\42\1\u0154" +
                    "\14\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\2\42\1\u0155\25\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\13\42\1\u0156\14\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\22\42\1\u0157\5\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\21\42\1\u012c" +
                    "\6\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\15\42\1\u0158\12\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u0159\23\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\13\42\1\u015a\14\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\6\42\1\u015b" +
                    "\21\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\u015c\23\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\4\42\1\u015d\23\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u015e\23\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\3\42\1\u015f" +
                    "\24\42\4\0\1\42\2\0\1\42\107\0\1\u0138\7\0" +
                    "\3\u0138\4\0\1\u0104\1\0\30\u0138\117\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\20\42\1\u0160\7\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\15\42\1\u0161\12\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\20\42\1\u0162\7\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\3\42\1\u0163" +
                    "\24\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\3\42\1\u0164\24\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\7\42\1\u0165\20\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\13\42\1\u0166\14\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\10\42\1\u0167" +
                    "\17\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\10\42\1\u0168\17\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\14\42\1\u0169\13\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\22\42\1\u016a\5\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\5\42\1\u016b" +
                    "\22\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\1\u016c\27\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\17\42\1\u016d\10\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\13\42" +
                    "\1\u016e\14\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\22\42\1\u016f\5\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\4\42\1\u0170\23\42\4\0\1\42" +
                    "\2\0\1\42\107\0\1\42\7\0\3\42\4\0\1\42" +
                    "\1\0\15\42\1\u0171\12\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\4\42" +
                    "\1\u0172\23\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\22\42\1\u0173\5\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\1\u0174\27\42\4\0\1\42\2\0" +
                    "\1\42\70\0\1\u0175\16\0\1\42\5\0\1\u0175\1\0" +
                    "\3\42\4\0\1\42\1\0\30\42\4\0\1\42\2\0" +
                    "\1\42\63\0\2\u0175\22\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\22\42\1\u0176\5\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\1\u0177\27\42\4\0\1\42\2\0\1\42\107\0\1\42" +
                    "\7\0\3\42\4\0\1\42\1\0\23\42\1\u0178\4\42" +
                    "\4\0\1\42\2\0\1\42\107\0\1\42\7\0\3\42" +
                    "\4\0\1\42\1\0\1\u0179\27\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u017a\23\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\21\42\1\u0148" +
                    "\6\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\20\42\1\u017b\7\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\16\42\1\u017c\11\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\2\42\1\u0166\25\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\4\42\1\u017d" +
                    "\23\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\10\42\1\u017e\17\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\1\u017f\27\42\4\0\1\42\2\0\1\42" +
                    "\107\0\1\42\7\0\3\42\4\0\1\42\1\0\1\u0180" +
                    "\27\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\22\42\1\u0181\5\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\23\42\1\u0182\4\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\22\42\1\u0183\5\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\10\42\1\u0184" +
                    "\17\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\u0185\23\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\22\42\1\u0186\5\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\16\42\1\u0187\11\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\15\42\1\236" +
                    "\12\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\15\42\1\u0188\12\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\24\42\1\u012f\3\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\2\42\1\u0189\25\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\2\42\1\u018a" +
                    "\25\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\16\42\1\u018b\11\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\20\42\1\u0189\7\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\4\42\1\u014c\23\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\15\42\1\u018c" +
                    "\12\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\u013f\23\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\23\42\1\u018d\4\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\22\42\1\u0164\5\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\4\42\1\u013b" +
                    "\23\42\4\0\1\42\2\0\1\42\107\0\1\42\7\0" +
                    "\3\42\4\0\1\42\1\0\4\42\1\u018e\23\42\4\0" +
                    "\1\42\2\0\1\42\107\0\1\42\7\0\3\42\4\0" +
                    "\1\42\1\0\15\42\1\u018f\12\42\4\0\1\42\2\0" +
                    "\1\42\107\0\1\42\7\0\3\42\4\0\1\42\1\0" +
                    "\22\42\1\u0166\5\42\4\0\1\42\2\0\1\42\107\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\6\42\1\u0190" +
                    "\21\42\4\0\1\42\2\0\1\42\70\0\1\u0191\16\0" +
                    "\1\42\5\0\1\u0191\1\0\3\42\4\0\1\42\1\0" +
                    "\30\42\4\0\1\42\2\0\1\42\63\0\2\u0191\22\0" +
                    "\1\42\7\0\3\42\4\0\1\42\1\0\7\42\1\u0192" +
                    "\20\42\4\0\1\42\2\0\1\42\65\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[32760];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\10\0\1\11\1\1\1\11\2\1\1\11\3\1\2\11" +
                    "\2\1\1\11\5\1\1\11\6\1\1\11\1\1\2\11" +
                    "\23\1\1\11\1\1\1\11\2\1\1\11\1\1\4\11" +
                    "\1\1\47\11\4\1\2\11\7\1\1\11\3\1\1\11" +
                    "\1\0\1\11\2\0\3\11\2\1\1\11\1\1\2\0" +
                    "\1\11\1\1\2\11\1\0\1\11\54\1\4\0\1\11" +
                    "\1\1\1\0\1\1\3\0\5\11\1\1\2\11\62\1" +
                    "\2\0\46\1\1\11\111\1\1\11\33\1\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[402];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 157:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 158:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 159:
                        break;
                    case 4: {
                        yybegin(TextCapture2);
                        return STRING_L;
                    }
                    // fall through
                    case 160:
                        break;
                    case 5: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 161:
                        break;
                    case 6: {
                        return DOLLAR;
                    }
                    // fall through
                    case 162:
                        break;
                    case 7: {
                        return OP_REM;
                    }
                    // fall through
                    case 163:
                        break;
                    case 8: {
                        return OP_AND;
                    }
                    // fall through
                    case 164:
                        break;
                    case 9: {
                        yybegin(TextCapture1);
                        return STRING_L;
                    }
                    // fall through
                    case 165:
                        break;
                    case 10: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 166:
                        break;
                    case 11: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 167:
                        break;
                    case 12: {
                        return STAR;
                    }
                    // fall through
                    case 168:
                        break;
                    case 13: {
                        return OP_ADD;
                    }
                    // fall through
                    case 169:
                        break;
                    case 14: {
                        return COMMA;
                    }
                    // fall through
                    case 170:
                        break;
                    case 15: {
                        return OP_SUB;
                    }
                    // fall through
                    case 171:
                        break;
                    case 16: {
                        return DOT;
                    }
                    // fall through
                    case 172:
                        break;
                    case 17: {
                        return OP_DIV;
                    }
                    // fall through
                    case 173:
                        break;
                    case 18: {
                        yybegin(AfterNumber);
                        return INTEGER;
                    }
                    // fall through
                    case 174:
                        break;
                    case 19: {
                        return COLON;
                    }
                    // fall through
                    case 175:
                        break;
                    case 20: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 176:
                        break;
                    case 21: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 177:
                        break;
                    case 22: {
                        return EQUAL;
                    }
                    // fall through
                    case 178:
                        break;
                    case 23: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 179:
                        break;
                    case 24: {
                        return OP_AND_THEN;
            }
          // fall through
                    case 180:
                        break;
                    case 25: {
                        return OP_MACRO_FREE;
                    }
                    // fall through
                    case 181:
                        break;
                    case 26: {
                        return SYMBOL;
                    }
                    // fall through
                    case 182:
                        break;
                    case 27: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 183:
                        break;
                    case 28: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 184:
                        break;
                    case 29: {
                        return OP_POW;
                    }
                    // fall through
                    case 185:
                        break;
                    case 30: {
                        return BRACE_L;
                    }
                    // fall through
                    case 186:
                        break;
                    case 31: {
                        return OP_OR;
                    }
                    // fall through
                    case 187:
                        break;
                    case 32: {
                        return BRACE_R;
                    }
                    // fall through
                    case 188:
                        break;
                    case 33: {
                        return COLOR;
                    }
                    // fall through
                    case 189:
                        break;
                    case 34: {
                        return OP_NOT;
                    }
                    // fall through
                    case 190:
                        break;
                    case 35: {
                        return OP_DEREFERENCE;
                    }
                    // fall through
                    case 191:
                        break;
                    case 36: {
                        return OP_MUL;
                    }
                    // fall through
                    case 192:
                        break;
                    case 37: {
                        return OP_DIV_REM;
                    }
                    // fall through
                    case 193:
                        break;
                    case 38: {
                        return ANY_LIST;
                    }
                    // fall through
                    case 194:
                        break;
                    case 39: {
                        return ANY_DICT;
                    }
                    // fall through
                    case 195:
                        break;
                    case 40: {
                        return OP_LABEL;
                    }
                    // fall through
                    case 196:
                        break;
                    case 41: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 197:
                        break;
                    case 42: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 198:
                        break;
                    case 43: {
                        return OP_REFERENCE;
                    }
                    // fall through
                    case 199:
                        break;
                    case 44: {
                        return NAME_SCOPE;
                    }
                    // fall through
                    case 200:
                        break;
                    case 45: {
                        return OP_CELSIUS;
                    }
                    // fall through
                    case 201:
                        break;
                    case 46: {
                        return OP_FAHRENHEIT;
                    }
                    // fall through
                    case 202:
                        break;
                    case 47: {
                        return BIND;
                    }
                    // fall through
                    case 203:
                        break;
                    case 48: {
                        return OP_MACRO_BIND;
                    }
                    // fall through
                    case 204:
                        break;
                    case 49: {
                        return OP_ARROW2;
                    }
                    // fall through
                    case 205:
                        break;
                    case 50: {
                        return OP_MAP;
                    }
                    // fall through
                    case 206:
                        break;
                    case 51: {
                        return KW_NIL;
                    }
                    // fall through
                    case 207:
                        break;
                    case 52: {
                        return OP_SQRT;
                    }
                    // fall through
                    case 208:
                        break;
                    case 53: {
                        return OP_SURD3;
                    }
                    // fall through
                    case 209:
                        break;
                    case 54: {
                        return OP_SURD4;
                    }
                    // fall through
                    case 210:
                        break;
                    case 55: {
                        return LOGIC_AND;
                    }
                    // fall through
                    case 211:
                        break;
                    case 56: {
                        return LOGIC_OR;
                    }
                    // fall through
                    case 212:
                        break;
                    case 57: {
                        return NAME_SPLIT;
                    }
                    // fall through
                    case 213:
                        break;
                    case 58: {
                        return OP_NE;
                    }
                    // fall through
                    case 214:
                        break;
                    case 59: {
                        return OP_LEQ;
                    }
                    // fall through
                    case 215:
                        break;
                    case 60: {
                        return OP_GEQ;
                    }
                    // fall through
                    case 216:
                        break;
                    case 61: {
                        return OP_LL;
                    }
                    // fall through
                    case 217:
                        break;
                    case 62: {
                        return OP_GG;
                    }
                    // fall through
                    case 218:
                        break;
                    case 63: {
                        return LOGIC_XOR;
                    }
                    // fall through
                    case 219:
                        break;
                    case 64: {
                        return LOGIC_NAND;
                    }
                    // fall through
                    case 220:
                        break;
                    case 65: {
                        return LOGIC_NOR;
                    }
                    // fall through
                    case 221:
                        break;
                    case 66: {
                        return OP_LLL;
                    }
                    // fall through
                    case 222:
                        break;
                    case 67: {
                        return OP_GGG;
                    }
                    // fall through
                    case 223:
                        break;
                    case 68: {
                        return CEIL_L;
                    }
                    // fall through
                    case 224:
                        break;
                    case 69: {
                        return CEIL_R;
                    }
                    // fall through
                    case 225:
                        break;
                    case 70: {
                        return FLOOR_L;
                    }
                    // fall through
                    case 226:
                        break;
                    case 71: {
                        return FLOOR_R;
                    }
                    // fall through
                    case 227:
                        break;
                    case 72: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 228:
                        break;
                    case 73: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 229:
                        break;
                    case 74: {
                        return OP_ARROW1;
                    }
                    // fall through
                    case 230:
                        break;
                    case 75: {
                        return DOMAIN_R;
                    }
                    // fall through
                    case 231:
                        break;
                    case 76: {
                        return BUILDER_L;
                    }
                    // fall through
                    case 232:
                        break;
                    case 77: {
                        return BUILDER_R;
                    }
                    // fall through
                    case 233:
                        break;
                    case 78: {
                        return LOGIC_XAND;
                    }
                    // fall through
                    case 234:
                        break;
                    case 79: {
                        return OP_L10N;
                    }
                    // fall through
                    case 235:
                        break;
                    case 80: {
                        return STRING_TEXT;
                    }
                    // fall through
                    case 236:
                        break;
                    case 81: {
                        yybegin(YYINITIAL);
                        return STRING_R;
                    }
                    // fall through
                    case 237:
                        break;
                    case 82: {
                        yybegin(YYINITIAL);
                        yypushback(yylength());
                    }
                    // fall through
                    case 238:
                        break;
                    case 83: {
                        yybegin(YYINITIAL);
                        return NUMBER_SUFFIX;
                    }
                    // fall through
                    case 239:
                        break;
                    case 84: {
                        yybegin(AfterNumber);
                        return NUMBER_BASE;
                    }
                    // fall through
                    case 240:
                        break;
                    case 85: {
                        return OP_BASE;
                    }
                    // fall through
                    case 241:
                        break;
                    case 86: {
                        yybegin(AfterNumber);
                        return NUMBER_EXPONENT;
                    }
                    // fall through
                    case 242:
                        break;
                    case 87: {
                        return OP_EXPONENT;
                    }
                    // fall through
                    case 243:
                        break;
                    case 88: {
                        return OP_REM_ASSIGN;
                    }
                    // fall through
                    case 244:
                        break;
                    case 89: {
                        return OP_MUL_ASSIGN;
                    }
                    // fall through
                    case 245:
                        break;
                    case 90: {
                        return OP_ADD_ASSIGN;
                    }
                    // fall through
                    case 246:
                        break;
                    case 91: {
                        return OP_SUB_ASSIGN;
            }
          // fall through
                    case 247:
                        break;
                    case 92: {
                        return OP_DIV_FLOOR;
                    }
                    // fall through
                    case 248:
                        break;
                    case 93: {
                        return OP_DIV_ASSIGN;
                    }
                    // fall through
                    case 249:
                        break;
                    case 94: {
                        return OP_DIV_CEIL;
                    }
                    // fall through
                    case 250:
                        break;
                    case 95: {
                        return OP_UNWRAP_ELSE;
                    }
                    // fall through
                    case 251:
                        break;
                    case 96: {
                        return OP_EE;
                    }
                    // fall through
                    case 252:
                        break;
                    case 97: {
                        return OP_SET_THEN;
                    }
                    // fall through
                    case 253:
                        break;
                    case 98: {
                        return OP_UNWRAP_OR;
                    }
                    // fall through
                    case 254:
                        break;
                    case 99: {
                        return SYMBOW_RAW;
                    }
                    // fall through
                    case 255:
                        break;
                    case 100: {
                        return KW_AS;
                    }
                    // fall through
                    case 256:
                        break;
                    case 101: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 257:
                        break;
                    case 102: {
                        return KW_IF;
                    }
                    // fall through
                    case 258:
                        break;
                    case 103: {
                        return KW_IN;
                    }
                    // fall through
                    case 259:
                        break;
                    case 104: {
                        return KW_IS;
                    }
                    // fall through
                    case 260:
                        break;
                    case 105: {
                        yybegin(AfterNumberBase);
                        yypushback(yylength());
                    }
                    // fall through
                    case 261:
                        break;
                    case 106: {
                        yybegin(AfterNumberExp);
                        yypushback(yylength());
                    }
                    // fall through
                    case 262:
                        break;
                    case 107: {
                        yybegin(TextCapture6);
                        return STRING_L;
                    }
                    // fall through
                    case 263:
                        break;
                    case 108: {
                        yybegin(TextCapture3);
                        return STRING_L;
                    }
                    // fall through
                    case 264:
                        break;
                    case 109: {
                        return DOMAIN_L;
                    }
                    // fall through
                    case 265:
                        break;
                    case 110: {
                        return OP_UNTIL;
                    }
                    // fall through
                    case 266:
                        break;
                    case 111: {
                        return OP_DIV_ROUND;
                    }
                    // fall through
                    case 267:
                        break;
                    case 112: {
                        yybegin(AfterNumber);
                        return DECIMAL;
            }
          // fall through
                    case 268:
                        break;
                    case 113: {
                        return OP_ARROW3;
                    }
                    // fall through
                    case 269:
                        break;
                    case 114: {
                        return KW_LET;
                    }
                    // fall through
                    case 270:
                        break;
                    case 115: {
                        return KW_NEW;
                    }
                    // fall through
                    case 271:
                        break;
                    case 116: {
                        return KW_NOT;
                    }
                    // fall through
                    case 272:
                        break;
                    case 117: {
                        return KW_TRY;
                    }
                    // fall through
                    case 273:
                        break;
                    case 118: {
                        return KW_CASE;
                    }
                    // fall through
                    case 274:
                        break;
                    case 119: {
                        return KW_EACH;
                    }
                    // fall through
                    case 275:
                        break;
                    case 120: {
                        return KW_ELSE;
                    }
                    // fall through
                    case 276:
                        break;
                    case 121: {
                        return KW_FROM;
                    }
                    // fall through
                    case 277:
                        break;
                    case 122: {
                        return KW_LOOP;
                    }
                    // fall through
                    case 278:
                        break;
                    case 123: {
                        return KW_NULL;
                    }
                    // fall through
                    case 279:
                        break;
                    case 124: {
                        return KW_BOOLEAN;
                    }
                    // fall through
                    case 280:
                        break;
                    case 125: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 281:
                        break;
                    case 126: {
                        return KW_WHEN;
            }
          // fall through
                    case 282:
                        break;
                    case 127: {
                        return KW_WITH;
            }
          // fall through
                    case 283:
                        break;
                    case 128: {
                        return KW_BREAK;
            }
          // fall through
                    case 284:
                        break;
                    case 129: {
                        return KW_CATCH;
            }
          // fall through
                    case 285:
                        break;
                    case 130: {
                        return KW_CLASS;
            }
          // fall through
                    case 286:
                        break;
                    case 131: {
                        return KW_ENUMERATE;
                    }
                    // fall through
                    case 287:
                        break;
                    case 132: {
                        return KW_FLAGS;
            }
          // fall through
                    case 288:
                        break;
                    case 133: {
                        return KW_IMPLY;
                    }
          // fall through
                    case 289:
                        break;
                    case 134: {
                        return KW_MACRO;
                    }
                    // fall through
                    case 290:
                        break;
                    case 135: {
                        return KW_MATCH;
                    }
                    // fall through
                    case 291:
                        break;
                    case 136: {
                        return KW_RAISE;
                    }
                    // fall through
                    case 292:
                        break;
                    case 137: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 293:
                        break;
                    case 138: {
                        return KW_UNION;
            }
          // fall through
                    case 294:
                        break;
                    case 139: {
                        return KW_UNITE;
                    }
                    // fall through
                    case 295:
                        break;
                    case 140:
            { return KW_UNTIL;
            }
          // fall through
                    case 296:
                        break;
                    case 141:
            { return KW_USING;
            }
          // fall through
                    case 297:
                        break;
                    case 142: {
                        return KW_WHERE;
                    }
                    // fall through
                    case 298:
                        break;
                    case 143:
            { return KW_WHILE;
            }
          // fall through
                    case 299:
                        break;
                    case 144:
            { return KW_YIELD;
            }
          // fall through
                    case 300:
                        break;
                    case 145:
            { return KW_TEMPLATE;
            }
          // fall through
                    case 301:
                        break;
                    case 146:
            { return KW_LAMBDA;
            }
          // fall through
                    case 302:
                        break;
                    case 147:
            { return KW_NEURAL;
            }
          // fall through
                    case 303:
                        break;
                    case 148:
            { return KW_OBJECT;
            }
          // fall through
                    case 304:
                        break;
                    case 149:
            { return KW_RESUME;
            }
          // fall through
                    case 305:
                        break;
                    case 150: {
                        return KW_RETURN;
                    }
                    // fall through
                    case 306:
                        break;
                    case 151:
            { return KW_COMPONENT;
            }
          // fall through
                    case 307:
                        break;
                    case 152:
            { return KW_EXCLUDE;
            }
          // fall through
                    case 308:
                        break;
                    case 153:
            { return KW_CONTINUE;
            }
          // fall through
                    case 309:
                        break;
          case 154:
            { return KW_NAMESPACE;
            }
          // fall through
          case 310: break;
          case 155:
            { return KW_SINGLETON;
            }
          // fall through
          case 311: break;
          case 156:
            { return KW_THROUGH;
            }
          // fall through
          case 312: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
