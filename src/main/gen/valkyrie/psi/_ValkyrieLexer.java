// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int TextCapture6 = 2;
    public static final int TextCapture3 = 4;
    public static final int TextCapture2 = 6;
    public static final int TextCapture1 = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0,  1,  1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\1\u2100\1\u2300" +
                    "\1\u2400\1\u2100\1\u2500\1\u2600\1\u2700\1\u2100\1\u2800\1\u2900" +
                    "\2\u2100\31\u0100\1\u2a00\121\u0100\1\u2b00\4\u0100\1\u2c00\1\u0100" +
                    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\53\u0100\1\u3300" +
                    "\41\u2100\1\u0100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900" +
                    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u0100\1\u4000" +
                    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u2100\1\u4700" +
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00" +
                    "\1\u5000\1\u5100\1\u5200\1\u2100\1\u5300\1\u5400\1\u5500\1\u2100" +
                    "\3\u0100\1\u5600\1\u5700\1\u5800\12\u2100\4\u0100\1\u5900\17\u2100" +
                    "\2\u0100\1\u5a00\41\u2100\2\u0100\1\u5b00\1\u5c00\2\u2100\1\u5d00" +
                    "\1\u5e00\27\u0100\1\u5f00\2\u0100\1\u6000\45\u2100\1\u0100\1\u6100" +
                    "\1\u6200\11\u2100\1\u6300\24\u2100\1\u6400\1\u6500\1\u2100\1\u6600" +
                    "\1\u6700\1\u6800\1\u6900\2\u2100\1\u6a00\5\u2100\1\u6b00\1\u6c00" +
                    "\1\u6d00\5\u2100\1\u6e00\1\u6f00\4\u2100\1\u7000\21\u2100\246\u0100" +
                    "\1\u7100\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500" +
                    "\14\u2100\2\u0100\1\u7600\u0b06\u2100\1\u7700\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\13\33" +
                    "\1\34\1\33\1\35\14\33\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61" +
                    "\1\62\1\63\1\33\1\64\1\65\1\66\1\67\1\70" +
                    "\1\71\1\72\1\73\1\33\1\74\1\75\1\76\7\0" +
                    "\1\1\32\0\1\1\10\0\1\77\1\100\1\0\1\101" +
                    "\1\0\1\77\6\0\1\100\1\102\1\103\2\0\1\100" +
                    "\5\0\27\100\1\0\37\100\1\104\u01ca\100\4\0\14\100" +
                    "\16\0\5\100\7\0\1\100\1\0\1\100\21\0\160\103" +
                    "\5\100\1\0\2\100\3\0\3\100\1\0\1\100\6\0" +
                    "\1\100\1\103\3\100\1\0\1\100\1\0\24\100\1\0" +
                    "\123\100\1\0\213\100\1\0\5\103\2\0\246\100\1\0" +
                    "\46\100\2\0\1\100\6\0\51\100\10\0\55\103\1\0" +
                    "\1\103\1\0\2\103\1\0\2\103\1\0\1\103\10\0" +
                    "\33\100\4\0\4\100\35\0\13\103\5\0\53\100\37\103" +
                    "\4\0\2\100\1\103\143\100\1\0\1\100\7\103\2\0" +
                    "\6\103\2\100\2\103\1\0\4\103\2\100\12\103\3\100" +
                    "\2\0\1\100\20\0\1\100\1\103\36\100\33\103\2\0" +
                    "\131\100\13\103\1\100\16\0\12\103\41\100\11\103\2\100" +
                    "\4\0\1\100\2\0\1\103\2\0\26\100\4\103\1\100" +
                    "\11\103\1\100\3\103\1\100\5\103\22\0\31\100\3\103" +
                    "\4\0\13\100\65\0\25\100\1\0\10\100\25\0\17\103" +
                    "\1\0\41\103\66\100\3\103\1\100\22\103\1\100\7\103" +
                    "\12\100\2\103\2\0\12\103\1\0\20\100\3\103\1\0" +
                    "\10\100\2\0\2\100\2\0\26\100\1\0\7\100\1\0" +
                    "\1\100\3\0\4\100\2\0\1\103\1\100\7\103\2\0" +
                    "\2\103\2\0\3\103\1\100\10\0\1\103\4\0\2\100" +
                    "\1\0\3\100\2\103\2\0\12\103\2\100\12\0\1\100" +
                    "\1\0\1\103\2\0\3\103\1\0\6\100\4\0\2\100" +
                    "\2\0\26\100\1\0\7\100\1\0\2\100\1\0\2\100" +
                    "\1\0\2\100\2\0\1\103\1\0\5\103\4\0\2\103" +
                    "\2\0\3\103\3\0\1\103\7\0\4\100\1\0\1\100" +
                    "\7\0\14\103\3\100\1\103\13\0\3\103\1\0\11\100" +
                    "\1\0\3\100\1\0\26\100\1\0\7\100\1\0\2\100" +
                    "\1\0\5\100\2\0\1\103\1\100\10\103\1\0\3\103" +
                    "\1\0\3\103\2\0\1\100\17\0\2\100\2\103\2\0" +
                    "\12\103\11\0\1\100\6\103\1\0\3\103\1\0\10\100" +
                    "\2\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100" +
                    "\1\0\5\100\2\0\1\103\1\100\7\103\2\0\2\103" +
                    "\2\0\3\103\10\0\2\103\4\0\2\100\1\0\3\100" +
                    "\2\103\2\0\12\103\1\0\1\100\20\0\1\103\1\100" +
                    "\1\0\6\100\3\0\3\100\1\0\4\100\3\0\2\100" +
                    "\1\0\1\100\1\0\2\100\3\0\2\100\3\0\3\100" +
                    "\3\0\14\100\4\0\5\103\3\0\3\103\1\0\4\103" +
                    "\2\0\1\100\6\0\1\103\16\0\12\103\20\0\5\103" +
                    "\10\100\1\0\3\100\1\0\27\100\1\0\20\100\3\0" +
                    "\1\100\7\103\1\0\3\103\1\0\4\103\7\0\2\103" +
                    "\1\0\3\100\5\0\2\100\2\103\2\0\12\103\20\0" +
                    "\1\100\3\103\1\0\10\100\1\0\3\100\1\0\27\100" +
                    "\1\0\12\100\1\0\5\100\2\0\1\103\1\100\7\103" +
                    "\1\0\3\103\1\0\4\103\7\0\2\103\7\0\1\100" +
                    "\1\0\2\100\2\103\2\0\12\103\1\0\2\100\15\0" +
                    "\4\103\1\0\10\100\1\0\3\100\1\0\51\100\2\103" +
                    "\1\100\7\103\1\0\3\103\1\0\4\103\1\100\5\0" +
                    "\3\100\1\103\7\0\3\100\2\103\2\0\12\103\12\0" +
                    "\6\100\2\0\2\103\1\0\22\100\3\0\30\100\1\0" +
                    "\11\100\1\0\1\100\2\0\7\100\3\0\1\103\4\0" +
                    "\6\103\1\0\1\103\1\0\10\103\6\0\12\103\2\0" +
                    "\2\103\15\0\60\100\1\103\1\100\10\103\5\0\7\100" +
                    "\10\103\1\0\12\103\47\0\2\100\1\0\1\100\1\0" +
                    "\5\100\1\0\30\100\1\0\1\100\1\0\12\100\1\103" +
                    "\1\100\12\103\1\100\2\0\5\100\1\0\1\100\1\0" +
                    "\6\103\2\0\12\103\2\0\4\100\40\0\1\100\27\0" +
                    "\2\103\6\0\12\103\13\0\1\103\1\0\1\103\1\0" +
                    "\1\103\4\0\2\103\10\100\1\0\44\100\4\0\24\103" +
                    "\1\0\2\103\5\100\13\103\1\0\44\103\11\0\1\103" +
                    "\71\0\53\100\24\103\1\100\12\103\6\0\6\100\4\103" +
                    "\4\100\3\103\1\100\3\103\2\100\7\103\3\100\4\103" +
                    "\15\100\14\103\1\100\17\103\2\0\46\100\1\0\1\100" +
                    "\5\0\1\100\2\0\53\100\1\0\115\100\1\0\4\100" +
                    "\2\0\7\100\1\0\1\100\1\0\4\100\2\0\51\100" +
                    "\1\0\4\100\2\0\41\100\1\0\4\100\2\0\7\100" +
                    "\1\0\1\100\1\0\4\100\2\0\17\100\1\0\71\100" +
                    "\1\0\4\100\2\0\103\100\2\0\3\103\11\0\11\103" +
                    "\16\0\20\100\20\0\126\100\2\0\6\100\3\0\u016c\100" +
                    "\2\0\21\100\1\1\32\100\5\0\113\100\3\0\13\100" +
                    "\7\0\15\100\1\0\4\100\3\103\13\0\22\100\3\103" +
                    "\13\0\22\100\2\103\14\0\15\100\1\0\3\100\1\0" +
                    "\2\103\14\0\64\100\40\103\3\0\1\100\4\0\1\100" +
                    "\1\103\2\0\12\103\41\0\3\103\2\0\12\103\6\0" +
                    "\131\100\7\0\51\100\1\103\1\100\5\0\106\100\12\0" +
                    "\37\100\1\0\14\103\4\0\14\103\12\0\12\103\36\100" +
                    "\2\0\5\100\13\0\54\100\4\0\32\100\6\0\13\103" +
                    "\45\0\27\100\5\103\4\0\65\100\12\103\1\0\35\103" +
                    "\2\0\13\103\6\0\12\103\15\0\1\100\10\0\16\103" +
                    "\102\0\5\103\57\100\21\103\7\100\4\0\12\103\21\0" +
                    "\11\103\14\0\3\103\36\100\15\103\2\100\12\103\54\100" +
                    "\16\103\14\0\44\100\24\103\10\0\12\103\3\0\3\100" +
                    "\12\103\44\100\2\0\11\100\7\0\53\100\2\0\3\100" +
                    "\20\0\3\103\1\0\25\103\4\100\1\103\6\100\1\103" +
                    "\2\100\3\103\1\100\5\0\300\100\72\103\1\0\5\103" +
                    "\26\100\2\0\6\100\2\0\46\100\2\0\6\100\2\0" +
                    "\10\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0" +
                    "\37\100\2\0\65\100\1\0\7\100\1\0\1\100\3\0" +
                    "\3\100\1\0\7\100\3\0\4\100\2\0\6\100\4\0" +
                    "\15\100\5\0\3\100\1\0\7\100\3\0\13\1\35\0" +
                    "\2\1\5\0\1\1\13\0\1\105\3\0\2\103\3\0" +
                    "\1\106\1\107\1\110\4\0\1\111\6\0\1\106\1\0" +
                    "\1\103\7\0\1\112\2\0\1\1\21\0\1\100\15\0" +
                    "\1\100\20\0\15\100\63\0\15\103\4\0\1\103\3\0" +
                    "\14\103\21\0\1\100\1\113\3\0\1\100\1\0\1\114" +
                    "\12\100\1\0\1\100\2\0\6\100\6\0\1\100\1\0" +
                    "\1\100\1\0\1\100\1\0\20\100\2\0\4\100\5\0" +
                    "\5\100\4\0\1\100\21\0\51\100\7\0\1\115\101\0" +
                    "\1\116\62\0\1\117\17\0\1\106\40\0\1\120\1\121" +
                    "\50\0\1\122\3\0\1\123\1\124\4\0\1\125\1\126" +
                    "\154\0\1\127\1\130\203\0\1\131\u028a\0\1\132\1\133" +
                    "\14\0\1\134\214\0\1\135\1\136\1\137\1\140\366\0" +
                    "\1\123\1\124\201\0\57\100\1\0\57\100\1\0\205\100" +
                    "\6\0\4\100\3\103\2\100\14\0\46\100\1\0\1\100" +
                    "\5\0\1\100\2\0\70\100\7\0\1\100\17\0\1\103" +
                    "\27\100\11\0\7\100\1\0\7\100\1\0\7\100\1\0" +
                    "\7\100\1\0\7\100\1\0\7\100\1\0\7\100\1\0" +
                    "\7\100\1\0\40\103\54\0\1\121\22\0\1\141\300\0" +
                    "\1\1\4\0\3\100\31\0\11\100\6\103\1\0\5\100" +
                    "\2\0\5\100\4\0\126\100\2\0\2\103\2\0\3\100" +
                    "\1\0\132\100\1\0\4\100\5\0\53\100\1\0\136\100" +
                    "\21\0\33\100\65\0\306\100\112\0\360\100\20\0\215\100" +
                    "\103\0\56\100\2\0\15\100\3\0\20\100\12\103\2\100" +
                    "\24\0\57\100\1\103\4\0\12\103\1\0\37\100\2\103" +
                    "\120\100\2\103\45\0\11\100\2\0\147\100\2\0\65\100" +
                    "\2\0\5\100\60\0\13\100\1\103\3\100\1\103\4\100" +
                    "\1\103\27\100\5\103\30\0\64\100\14\0\2\103\62\100" +
                    "\22\103\12\0\12\103\6\0\22\103\6\100\3\0\1\100" +
                    "\1\0\2\100\13\103\34\100\10\103\2\0\27\100\15\103" +
                    "\14\0\35\100\3\0\4\103\57\100\16\103\16\0\1\100" +
                    "\12\103\6\0\5\100\1\103\12\100\12\103\5\100\1\0" +
                    "\51\100\16\103\11\0\3\100\1\103\10\100\2\103\2\0" +
                    "\12\103\6\0\27\100\3\0\1\100\3\103\62\100\1\103" +
                    "\1\100\3\103\2\100\2\103\5\100\2\103\1\100\1\103" +
                    "\1\100\30\0\3\100\2\0\13\100\5\103\2\0\3\100" +
                    "\2\103\12\0\6\100\2\0\6\100\2\0\6\100\11\0" +
                    "\7\100\1\0\7\100\1\0\53\100\1\0\14\100\10\0" +
                    "\163\100\10\103\1\0\2\103\2\0\12\103\6\0\244\100" +
                    "\14\0\27\100\4\0\61\100\4\0\156\100\2\0\152\100" +
                    "\46\0\7\100\14\0\5\100\5\0\1\100\1\103\12\100" +
                    "\1\0\15\100\1\0\5\100\1\0\1\100\1\0\2\100" +
                    "\1\0\2\100\1\0\154\100\41\0\213\100\6\0\332\100" +
                    "\22\0\100\100\2\0\66\100\50\0\12\100\6\0\20\103" +
                    "\20\0\20\103\3\0\2\103\30\0\3\103\41\0\1\100" +
                    "\1\0\1\100\3\0\1\100\1\0\1\100\1\0\1\100" +
                    "\1\0\1\100\1\0\176\100\23\0\12\103\7\0\32\100" +
                    "\4\0\1\103\1\0\32\100\13\0\70\100\2\103\37\100" +
                    "\3\0\6\100\2\0\6\100\2\0\6\100\2\0\3\100" +
                    "\43\0\14\100\1\0\32\100\1\0\23\100\1\0\2\100" +
                    "\1\0\17\100\2\0\16\100\42\0\173\100\105\0\65\100" +
                    "\210\0\1\103\202\0\35\100\3\0\61\100\17\0\1\103" +
                    "\37\0\40\100\15\0\36\100\5\0\46\100\5\103\5\0" +
                    "\36\100\2\0\44\100\4\0\10\100\1\0\5\100\52\0" +
                    "\236\100\2\0\12\103\6\0\44\100\4\0\44\100\4\0" +
                    "\50\100\10\0\64\100\234\0\67\100\11\0\26\100\12\0" +
                    "\10\100\230\0\6\100\2\0\1\100\1\0\54\100\1\0" +
                    "\2\100\3\0\1\100\2\0\27\100\12\0\27\100\11\0" +
                    "\37\100\101\0\23\100\1\0\2\100\12\0\26\100\12\0" +
                    "\32\100\106\0\70\100\6\0\2\100\100\0\1\100\3\103" +
                    "\1\0\2\103\5\0\4\103\4\100\1\0\3\100\1\0" +
                    "\35\100\2\0\3\103\4\0\1\103\40\0\35\100\3\0" +
                    "\35\100\43\0\10\100\1\0\34\100\2\103\31\0\66\100" +
                    "\12\0\26\100\12\0\23\100\15\0\22\100\156\0\111\100" +
                    "\67\0\63\100\15\0\63\100\15\0\44\100\4\103\10\0" +
                    "\12\103\306\0\35\100\12\0\1\100\10\0\26\100\13\103" +
                    "\217\0\27\100\11\0\3\103\65\100\17\103\37\0\12\103" +
                    "\17\0\4\103\55\100\13\103\25\0\31\100\7\0\12\103" +
                    "\6\0\3\103\44\100\16\103\1\0\12\103\4\0\1\100" +
                    "\2\103\11\0\43\100\1\103\2\0\1\100\11\0\3\103" +
                    "\60\100\16\103\4\100\4\0\4\103\3\0\12\103\1\100" +
                    "\1\0\1\100\43\0\22\100\1\0\31\100\14\103\6\0" +
                    "\1\103\101\0\7\100\1\0\1\100\1\0\4\100\1\0" +
                    "\17\100\1\0\12\100\7\0\57\100\14\103\5\0\12\103" +
                    "\6\0\4\103\1\0\10\100\2\0\2\100\2\0\26\100" +
                    "\1\0\7\100\1\0\2\100\1\0\5\100\1\0\2\103" +
                    "\1\100\7\103\2\0\2\103\2\0\3\103\2\0\1\100" +
                    "\6\0\1\103\5\0\5\100\2\103\2\0\7\103\3\0" +
                    "\5\103\213\0\65\100\22\103\4\100\5\0\12\103\4\0" +
                    "\1\103\1\100\40\0\60\100\24\103\2\100\1\0\1\100" +
                    "\10\0\12\103\246\0\57\100\7\103\2\0\11\103\27\0" +
                    "\4\100\2\103\42\0\60\100\21\103\3\0\1\100\13\0" +
                    "\12\103\46\0\53\100\15\103\1\100\7\0\12\103\66\0" +
                    "\33\100\2\0\17\103\4\0\12\103\306\0\54\100\17\103" +
                    "\145\0\100\100\12\103\25\0\1\100\240\0\10\100\2\0" +
                    "\47\100\7\103\2\0\7\103\1\100\1\0\1\100\1\103" +
                    "\33\0\1\100\12\103\50\100\7\103\1\100\4\103\10\0" +
                    "\1\103\10\0\1\100\13\103\56\100\20\103\3\0\1\100" +
                    "\42\0\71\100\7\0\11\100\1\0\45\100\10\103\1\0" +
                    "\10\103\1\100\17\0\12\103\30\0\36\100\2\0\26\103" +
                    "\1\0\16\103\111\0\7\100\1\0\2\100\1\0\46\100" +
                    "\6\103\3\0\1\103\1\0\2\103\1\0\7\103\1\100" +
                    "\1\103\10\0\12\103\6\0\6\100\1\0\2\100\1\0" +
                    "\40\100\5\103\1\0\2\103\1\0\5\103\1\100\7\0" +
                    "\12\103\u0136\0\23\100\4\103\11\0\232\100\146\0\157\100" +
                    "\21\0\304\100\274\0\57\100\321\0\107\100\271\0\71\100" +
                    "\7\0\37\100\1\0\12\103\146\0\36\100\2\0\5\103" +
                    "\13\0\60\100\7\103\11\0\4\100\14\0\12\103\11\0" +
                    "\25\100\5\0\23\100\260\0\100\100\200\0\113\100\4\0" +
                    "\1\103\1\100\67\103\7\0\4\103\15\100\100\0\2\100" +
                    "\1\0\1\100\34\0\370\100\10\0\363\100\15\0\37\100" +
                    "\61\0\3\100\21\0\4\100\10\0\u018c\100\4\0\153\100" +
                    "\5\0\15\100\3\0\11\100\7\0\12\100\3\0\2\103" +
                    "\306\0\5\103\3\0\6\103\10\0\10\103\2\0\7\103" +
                    "\36\0\4\103\224\0\3\103\273\0\125\100\1\0\107\100" +
                    "\1\0\2\100\2\0\1\100\2\0\2\100\2\0\4\100" +
                    "\1\0\14\100\1\0\1\100\1\0\7\100\1\0\101\100" +
                    "\1\0\4\100\2\0\10\100\1\0\7\100\1\0\34\100" +
                    "\1\0\4\100\1\0\5\100\1\0\1\100\3\0\7\100" +
                    "\1\0\u0154\100\2\0\31\100\1\0\31\100\1\0\37\100" +
                    "\1\0\31\100\1\0\37\100\1\0\31\100\1\0\37\100" +
                    "\1\0\31\100\1\0\37\100\1\0\31\100\1\0\10\100" +
                    "\2\0\151\103\4\0\62\103\10\0\1\103\16\0\1\103" +
                    "\26\0\5\103\1\0\17\103\120\0\7\103\1\0\21\103" +
                    "\2\0\7\103\1\0\2\103\1\0\5\103\325\0\55\100" +
                    "\3\0\7\103\7\100\2\0\12\103\4\0\1\100\u0171\0" +
                    "\54\100\16\103\6\0\305\100\13\0\7\103\51\0\104\100" +
                    "\7\103\1\100\4\0\12\103\246\0\4\100\1\0\33\100" +
                    "\1\0\2\100\1\0\1\100\2\0\1\100\1\0\12\100" +
                    "\1\0\4\100\1\0\1\100\1\0\1\100\6\0\1\100" +
                    "\4\0\1\100\1\0\1\100\1\0\1\100\1\0\3\100" +
                    "\1\0\2\100\1\0\1\100\2\0\1\100\1\0\1\100" +
                    "\1\0\1\100\1\0\1\100\1\0\1\100\1\0\2\100" +
                    "\1\0\1\100\2\0\4\100\1\0\7\100\1\0\4\100" +
                    "\1\0\4\100\1\0\1\100\1\0\12\100\1\0\21\100" +
                    "\5\0\3\100\1\0\5\100\1\0\21\100\104\0\327\100" +
                    "\51\0\65\100\13\0\336\100\2\0\u0182\100\16\0\u0131\100" +
                    "\37\0\36\100\342\0\360\103\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30720];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\7\2\21\1\22\1\23\1\24\1\25\1\26" +
                    "\1\27\1\30\1\31\1\32\1\1\1\33\1\34\1\1" +
                    "\22\31\1\35\1\36\1\37\1\40\1\41\1\42\1\43" +
                    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53" +
                    "\1\54\1\55\1\22\1\56\1\57\1\60\1\61\1\62" +
                    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72" +
                    "\1\73\1\74\1\75\4\76\1\77\3\0\1\100\1\101" +
                    "\2\0\1\102\1\103\1\104\1\0\1\105\1\106\12\31" +
                    "\1\107\4\31\1\110\1\31\1\111\1\112\25\31\2\0" +
                    "\1\113\1\114\1\115\1\116\1\0\1\117\1\106\13\31" +
                    "\1\120\1\31\1\107\5\31\1\121\3\31\1\122\1\55" +
                    "\1\123\11\31\1\124\11\31\1\125\1\31\1\126\4\31" +
                    "\1\127\1\130\5\31\1\131\1\107\10\31\1\132\7\31" +
                    "\1\133\1\124\1\134\5\31\1\135\3\31\1\136\1\31" +
                    "\1\137\1\140\1\141\3\31\1\130\3\31\1\142\4\31" +
                    "\1\143\3\31\1\144\2\31\1\145\4\31\1\146\1\147" +
                    "\1\150\1\151\1\152\1\153\1\154\1\31\1\155\4\31" +
                    "\1\143\1\31\1\156\5\31\1\157\1\31\1\160\1\161" +
                    "\1\162\1\141\1\31\1\152\1\163\3\31\1\164\11\31" +
                    "\1\165\7\31\1\166\1\31\1\166\1\167";

    private static int[] zzUnpackAction() {
        int[] result = new int[329];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\142\0\304\0\u0126\0\u0188\0\u01ea\0\u024c\0\u02ae" +
                    "\0\u0310\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u0372\0\u01ea\0\u01ea" +
                    "\0\u01ea\0\u03d4\0\u01ea\0\u0436\0\u0498\0\u04fa\0\u01ea\0\u055c" +
                    "\0\u05be\0\u01ea\0\u0620\0\u0682\0\u06e4\0\u0746\0\u01ea\0\u07a8" +
                    "\0\u01ea\0\u080a\0\u01ea\0\u01ea\0\u086c\0\u08ce\0\u0930\0\u0992" +
                    "\0\u09f4\0\u0a56\0\u0ab8\0\u0b1a\0\u0b7c\0\u0bde\0\u0c40\0\u0ca2" +
                    "\0\u0d04\0\u0d66\0\u0dc8\0\u0e2a\0\u0e8c\0\u0eee\0\u0f50\0\u01ea" +
                    "\0\u01ea\0\u01ea\0\u0fb2\0\u02ae\0\u01ea\0\u01ea\0\u01ea\0\u01ea" +
                    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea" +
                    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea" +
                    "\0\u01ea\0\u1014\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea" +
                    "\0\u01ea\0\u1076\0\u10d8\0\u113a\0\u119c\0\u01ea\0\u11fe\0\u1260" +
                    "\0\u12c2\0\u01ea\0\u01ea\0\u1324\0\u1386\0\u01ea\0\u13e8\0\u01ea" +
                    "\0\u086c\0\u01ea\0\u144a\0\u14ac\0\u150e\0\u1570\0\u15d2\0\u1634" +
                    "\0\u1696\0\u16f8\0\u175a\0\u17bc\0\u181e\0\u07a8\0\u1880\0\u18e2" +
                    "\0\u1944\0\u19a6\0\u07a8\0\u1a08\0\u1a6a\0\u07a8\0\u1acc\0\u1b2e" +
                    "\0\u1b90\0\u1bf2\0\u1c54\0\u1cb6\0\u1d18\0\u1d7a\0\u1ddc\0\u1e3e" +
                    "\0\u1ea0\0\u1f02\0\u1f64\0\u1fc6\0\u2028\0\u208a\0\u20ec\0\u214e" +
                    "\0\u21b0\0\u2212\0\u2274\0\u22d6\0\u2338\0\u01ea\0\u01ea\0\u01ea" +
                    "\0\u01ea\0\u239a\0\u01ea\0\u01ea\0\u23fc\0\u245e\0\u24c0\0\u2522" +
                    "\0\u2584\0\u25e6\0\u2648\0\u26aa\0\u270c\0\u276e\0\u27d0\0\u2832" +
                    "\0\u2894\0\u28f6\0\u2958\0\u29ba\0\u2a1c\0\u2a7e\0\u2ae0\0\u07a8" +
                    "\0\u2b42\0\u2ba4\0\u2c06\0\u07a8\0\u07a8\0\u07a8\0\u2c68\0\u2cca" +
                    "\0\u2d2c\0\u2d8e\0\u2df0\0\u2e52\0\u2eb4\0\u2f16\0\u2f78\0\u2fda" +
                    "\0\u303c\0\u309e\0\u3100\0\u3162\0\u31c4\0\u3226\0\u3288\0\u32ea" +
                    "\0\u334c\0\u01ea\0\u33ae\0\u07a8\0\u3410\0\u3472\0\u34d4\0\u3536" +
                    "\0\u07a8\0\u3598\0\u35fa\0\u365c\0\u36be\0\u3720\0\u3782\0\u07a8" +
                    "\0\u37e4\0\u3846\0\u38a8\0\u390a\0\u396c\0\u39ce\0\u3a30\0\u3a92" +
                    "\0\u3af4\0\u07a8\0\u3b56\0\u3bb8\0\u3c1a\0\u3c7c\0\u3cde\0\u3d40" +
                    "\0\u3da2\0\u07a8\0\u01ea\0\u07a8\0\u3e04\0\u3e66\0\u3ec8\0\u3f2a" +
                    "\0\u3f8c\0\u07a8\0\u3fee\0\u4050\0\u40b2\0\u07a8\0\u4114\0\u07a8" +
                    "\0\u07a8\0\u07a8\0\u4176\0\u41d8\0\u423a\0\u07a8\0\u429c\0\u42fe" +
                    "\0\u4360\0\u07a8\0\u43c2\0\u4424\0\u4486\0\u44e8\0\u07a8\0\u454a" +
                    "\0\u45ac\0\u460e\0\u07a8\0\u4670\0\u46d2\0\u07a8\0\u4734\0\u4796" +
                    "\0\u47f8\0\u485a\0\u07a8\0\u07a8\0\u07a8\0\u07a8\0\u48bc\0\u07a8" +
                    "\0\u07a8\0\u491e\0\u07a8\0\u4980\0\u49e2\0\u4a44\0\u4aa6\0\u4b08" +
                    "\0\u4b6a\0\u07a8\0\u4bcc\0\u4c2e\0\u4c90\0\u4cf2\0\u4d54\0\u07a8" +
                    "\0\u4db6\0\u07a8\0\u07a8\0\u07a8\0\u4e18\0\u4e7a\0\u01ea\0\u07a8" +
                    "\0\u4edc\0\u4f3e\0\u4fa0\0\u07a8\0\u5002\0\u5064\0\u50c6\0\u5128" +
                    "\0\u518a\0\u51ec\0\u524e\0\u52b0\0\u5312\0\u07a8\0\u5374\0\u53d6" +
                    "\0\u5438\0\u549a\0\u54fc\0\u555e\0\u55c0\0\u5622\0\u5684\0\u01ea" +
                    "\0\u07a8";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[329];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35" +
                    "\1\36\1\37\3\40\1\41\1\42\1\43\1\44\1\40" +
                    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
                    "\1\40\1\55\2\40\1\56\1\57\1\60\1\61\1\40" +
                    "\1\62\1\63\1\64\1\65\1\40\1\66\1\40\1\67" +
                    "\1\70\1\71\1\72\1\73\1\40\1\74\1\75\1\6" +
                    "\1\76\1\77\1\14\1\100\1\101\1\102\1\103\1\104" +
                    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114" +
                    "\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124" +
                    "\1\125\1\6\1\126\1\127\1\130\1\131\4\132\1\133" +
                    "\135\132\11\134\1\135\130\134\4\132\1\136\135\132\11\134" +
                    "\1\136\130\134\143\0\2\7\165\0\1\115\1\113\1\114" +
                    "\115\0\1\137\146\0\1\140\123\0\1\141\33\0\1\142" +
                    "\141\0\1\143\1\125\131\0\1\144\130\0\1\76\4\0" +
                    "\1\145\147\0\2\30\16\0\1\30\123\0\1\112\4\0" +
                    "\1\146\127\0\1\106\7\0\1\114\141\0\1\147\1\107" +
                    "\140\0\1\115\136\0\1\146\4\0\1\150\132\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\30\40\4\0\1\40" +
                    "\2\0\1\40\43\0\1\73\26\0\1\131\1\103\1\0" +
                    "\1\122\17\0\1\77\62\0\43\151\1\152\76\151\22\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\21\40\1\153" +
                    "\6\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\20\40\1\154\7\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\1\155\12\40\1\156\2\40\1\157\11\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\4\40\1\160\23\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\13\40\1\161\1\40\1\162\10\40\1\163\1\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\1\164\12\40\1\165\1\40\1\166" +
                    "\1\167\1\40\1\170\2\40\1\171\4\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\4\40\1\172\23\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\5\40" +
                    "\1\173\6\40\1\174\1\175\3\40\1\176\6\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\1\177\3\40\1\200\23\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\1\201\7\40\1\202\17\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\1\203\3\40\1\204\3\40\1\205\5\40\1\206\4\40" +
                    "\1\207\4\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\1\40\1\210\26\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\1\211\3\40\1\212\23\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\22\40\1\213\5\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\4\40\1\214\13\40\1\215\6\40\1\216\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\15\40\1\217\3\40\1\220\6\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\7\40\1\221\1\222\17\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\10\40\1\223\17\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\73\7\0\3\73\6\0\30\73\46\0\2\122\1\0" +
                    "\137\122\4\132\1\0\135\132\4\0\1\224\135\0\11\134" +
                    "\1\0\130\134\11\0\1\225\134\0\1\226\146\0\1\227" +
                    "\141\0\1\230\156\0\2\231\112\0\14\145\1\232\125\145" +
                    "\30\0\1\233\114\0\1\234\16\0\2\40\5\0\1\234" +
                    "\1\0\3\40\4\0\1\40\1\0\30\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\4\40\1\235\23\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\21\40" +
                    "\1\236\1\237\5\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\1\240\27\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\15\40\1\241\12\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\5\40\1\166\22\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\21\40" +
                    "\1\242\6\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\23\40\1\243\4\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\2\40\1\244\17\40\1\245\5\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\13\40\1\246\14\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\1\247\27\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\20\40\1\250" +
                    "\7\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\16\40\1\251\11\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\15\40\1\252\12\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\15\40\1\253\12\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\17\40\1\254" +
                    "\10\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\3\40\1\255\16\40\1\256" +
                    "\5\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\14\40\1\257\13\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\22\40\1\260\5\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\2\40\1\261\17\40\1\237\5\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\2\40\1\262\25\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\14\40\1\263" +
                    "\13\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\25\40\1\264\2\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\13\40\1\265\14\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\22\40\1\266\5\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\13\40\1\267" +
                    "\14\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\11\40\1\270\16\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\10\40\1\271\17\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\21\40\1\272\1\273\5\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\20\40" +
                    "\1\274\7\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\14\40\1\275\13\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\1\276\22\40\1\277\3\40\1\300" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\17\40\1\301\10\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\10\40\1\302\11\40\1\303\5\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\10\40\1\304\17\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\4\40" +
                    "\1\305\3\40\1\306\17\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\3\40" +
                    "\1\307\16\40\1\310\5\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\4\40" +
                    "\1\311\23\40\4\0\1\40\2\0\1\40\42\0\1\136" +
                    "\146\0\1\136\130\0\14\145\1\232\4\145\1\312\120\145" +
                    "\22\0\2\40\7\0\3\40\4\0\1\40\1\0\1\313" +
                    "\27\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\4\40\1\314\23\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\2\40\1\315\25\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\21\40\1\316\6\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\21\40\1\317" +
                    "\1\320\5\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\4\40\1\321\23\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\14\40\1\322\13\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\13\40\1\323\14\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\4\40" +
                    "\1\324\23\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\13\40\1\325\5\40" +
                    "\1\277\6\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\6\40\1\326\21\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\1\327\27\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\14\40\1\330\13\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\2\40\1\331" +
                    "\25\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\4\40\1\332\23\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\13\40\1\333\14\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\23\40\1\334\4\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\4\40\1\335" +
                    "\23\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\1\40\1\336\26\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\20\40\1\337\7\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\20\40\1\340\7\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\4\40\1\341" +
                    "\23\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\13\40\1\342\14\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\4\40\1\343\23\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\21\40\1\344\6\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\23\40\1\345" +
                    "\4\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\23\40\1\346\4\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\23\40\1\347\4\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\17\40\1\350\10\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\10\40\1\351" +
                    "\17\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\4\40\1\352\23\40\4\0" +
                    "\1\40\2\0\1\40\41\0\1\353\16\0\2\40\5\0" +
                    "\1\353\1\0\3\40\4\0\1\40\1\0\30\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\4\40\1\354\16\40\1\355\4\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\16\40\1\356\3\40\1\357\5\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\10\40\1\360\17\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\15\40\1\361\12\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\15\40\1\362" +
                    "\2\40\1\363\7\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\13\40\1\364" +
                    "\14\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\6\40\1\365\21\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\7\40\1\366\20\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\13\40\1\367\14\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\12\40\1\370" +
                    "\15\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\7\40\1\371\20\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\21\40\1\372\6\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\22\40\1\373\5\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\10\40\1\374" +
                    "\17\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\4\40\1\375\14\40\1\376" +
                    "\6\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\23\40\1\377\4\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\15\40\1\u0100\12\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\22\40\1\u0101\5\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\21\40\1\u0102" +
                    "\6\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\13\40\1\u0103\14\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\22\40\1\u0104\5\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\20\40\1\u0105\7\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\10\40\1\u0106" +
                    "\16\40\1\u0107\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\2\40\1\u0108\25\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\20\40\1\u0109\7\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\3\40\1\u010a\24\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\16\40" +
                    "\1\u010b\11\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\16\40\1\166\11\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\21\40\1\u010c\6\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\2\40\1\u010d\25\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\4\40" +
                    "\1\u010e\23\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\14\40\1\u010f\13\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\20\40\1\u0110\7\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\2\40\1\u0111\25\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\13\40" +
                    "\1\u0112\14\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\22\40\1\u0113\5\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\21\40\1\354\6\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\15\40\1\u0114\12\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\4\40" +
                    "\1\u0115\23\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\13\40\1\u0116\14\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\6\40\1\u0117\21\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\4\40\1\u0118\23\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\4\40" +
                    "\1\u0119\23\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\4\40\1\u011a\23\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\3\40\1\u011b\24\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\20\40\1\u011c\7\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\15\40" +
                    "\1\u011d\12\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\20\40\1\u011e\7\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\3\40\1\u011f\24\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\3\40\1\u0120\24\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\7\40" +
                    "\1\u0121\20\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\13\40\1\u0122\14\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\10\40\1\u0123\17\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\10\40\1\u0124\17\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\14\40" +
                    "\1\u0125\13\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\22\40\1\u0126\5\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\5\40\1\u0127\22\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\1\u0128\27\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\17\40\1\u0129" +
                    "\10\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\22\40\1\u012a\5\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\4\40\1\u012b\23\40\4\0\1\40\2\0" +
                    "\1\40\60\0\2\40\7\0\3\40\4\0\1\40\1\0" +
                    "\15\40\1\u012c\12\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\22\40\1\u012d" +
                    "\5\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\1\u012e\27\40\4\0\1\40" +
                    "\2\0\1\40\41\0\1\u012f\16\0\2\40\5\0\1\u012f" +
                    "\1\0\3\40\4\0\1\40\1\0\30\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\22\40\1\u0130\5\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\1\u0131" +
                    "\27\40\4\0\1\40\2\0\1\40\60\0\2\40\7\0" +
                    "\3\40\4\0\1\40\1\0\23\40\1\u0132\4\40\4\0" +
                    "\1\40\2\0\1\40\60\0\2\40\7\0\3\40\4\0" +
                    "\1\40\1\0\1\u0133\27\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\4\40" +
                    "\1\u0134\23\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\21\40\1\u0107\6\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\20\40\1\u0135\7\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\16\40\1\u0136\11\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\2\40" +
                    "\1\u0122\25\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\4\40\1\u0137\23\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\10\40\1\u0138\17\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\1\u0139\27\40\4\0\1\40\2\0\1\40\60\0" +
                    "\2\40\7\0\3\40\4\0\1\40\1\0\1\u013a\27\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\23\40\1\u013b\4\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\22\40\1\u013c\5\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\10\40" +
                    "\1\u013d\17\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\4\40\1\u013e\23\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\22\40\1\u013f\5\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\16\40\1\u0140\11\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\15\40" +
                    "\1\166\12\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\15\40\1\u0141\12\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\24\40\1\357\3\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\2\40\1\u0142\25\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\2\40" +
                    "\1\u0143\25\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\20\40\1\u0142\7\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\4\40\1\u0122\23\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\15\40\1\u0144\12\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\4\40" +
                    "\1\376\23\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\23\40\1\u0145\4\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\22\40\1\u0120\5\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\4\40\1\372\23\40\4\0\1\40\2\0\1\40" +
                    "\60\0\2\40\7\0\3\40\4\0\1\40\1\0\4\40" +
                    "\1\u0146\23\40\4\0\1\40\2\0\1\40\60\0\2\40" +
                    "\7\0\3\40\4\0\1\40\1\0\22\40\1\u0122\5\40" +
                    "\4\0\1\40\2\0\1\40\60\0\2\40\7\0\3\40" +
                    "\4\0\1\40\1\0\6\40\1\u0147\21\40\4\0\1\40" +
                    "\2\0\1\40\41\0\1\u0148\16\0\2\40\5\0\1\u0148" +
                    "\1\0\3\40\4\0\1\40\1\0\30\40\4\0\1\40" +
                    "\2\0\1\40\60\0\2\40\7\0\3\40\4\0\1\40" +
                    "\1\0\7\40\1\u0149\20\40\4\0\1\40\2\0\1\40" +
                    "\36\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[22246];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\1\11\3\1\4\11\1\1\3\11\1\1\1\11" +
                    "\3\1\1\11\2\1\1\11\4\1\1\11\1\1\1\11" +
                    "\1\1\2\11\23\1\3\11\2\1\25\11\1\1\7\11" +
                    "\4\1\1\11\3\0\2\11\2\0\1\11\1\1\1\11" +
                    "\1\0\1\11\51\1\2\0\4\11\1\0\2\11\55\1" +
                    "\1\11\40\1\1\11\103\1\1\11\30\1\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[329];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 120:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 121:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 122:
                        break;
                    case 4: {
                        yybegin(TextCapture2);
                        return STRING_L;
                    }
                    // fall through
                    case 123:
                        break;
                    case 5: {
                        return HASH;
                    }
                    // fall through
                    case 124:
                        break;
                    case 6: {
                        return DOLLAR;
                    }
                    // fall through
                    case 125:
                        break;
                    case 7: {
                        return OP_DIV;
                    }
                    // fall through
                    case 126:
                        break;
                    case 8: {
                        return OP_AND;
                    }
                    // fall through
                    case 127:
                        break;
                    case 9: {
                        yybegin(TextCapture1);
                        return STRING_L;
                    }
                    // fall through
                    case 128:
                        break;
                    case 10: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 129:
                        break;
                    case 11: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 130:
                        break;
                    case 12: {
                        return STAR;
                    }
                    // fall through
                    case 131:
                        break;
                    case 13: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 132:
                        break;
                    case 14: {
                        return COMMA;
                    }
                    // fall through
                    case 133:
                        break;
                    case 15: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 134:
                        break;
                    case 16: {
                        return DOT;
                    }
                    // fall through
                    case 135:
                        break;
                    case 17: {
                        return INTEGER;
                    }
                    // fall through
                    case 136:
                        break;
                    case 18: {
                        return COLON;
                    }
                    // fall through
                    case 137:
                        break;
                    case 19: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 138:
                        break;
                    case 20: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 139:
                        break;
                    case 21: {
                        return EQUAL;
                    }
                    // fall through
                    case 140:
                        break;
                    case 22: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 141:
                        break;
                    case 23: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 142:
                        break;
                    case 24: {
                        return AT;
                    }
                    // fall through
                    case 143:
                        break;
                    case 25: {
                        return SYMBOL;
                    }
                    // fall through
                    case 144:
                        break;
                    case 26: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 145:
                        break;
                    case 27: {
                        return BRACKET_R;
            }
          // fall through
                    case 146:
                        break;
                    case 28: {
                        return OP_POW;
                    }
                    // fall through
                    case 147:
                        break;
                    case 29: {
                        return BRACE_L;
                    }
                    // fall through
                    case 148:
                        break;
                    case 30: {
                        return OP_OR;
                    }
                    // fall through
                    case 149:
                        break;
                    case 31: {
                        return BRACE_R;
                    }
                    // fall through
                    case 150:
                        break;
                    case 32: {
                        return COLOR;
                    }
                    // fall through
                    case 151:
                        break;
                    case 33: {
                        return OP_NOT;
                    }
                    // fall through
                    case 152:
                        break;
                    case 34: {
                        return OP_DEREFERENCE;
                    }
                    // fall through
                    case 153:
                        break;
                    case 35: {
                        return OP_DIV_REM;
                    }
                    // fall through
                    case 154:
                        break;
                    case 36: {
                        return OP_LABEL;
                    }
                    // fall through
                    case 155:
                        break;
                    case 37: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 156:
                        break;
                    case 38: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 157:
                        break;
                    case 39: {
                        return OP_REFERENCE;
                    }
                    // fall through
                    case 158:
                        break;
                    case 40: {
                        return NAME_SCOPE;
                    }
                    // fall through
                    case 159:
                        break;
                    case 41: {
                        return OP_CELSIUS;
                    }
                    // fall through
                    case 160:
                        break;
                    case 42: {
                        return OP_FAHRENHEIT;
                    }
                    // fall through
                    case 161:
                        break;
                    case 43: {
                        return BIND;
                    }
                    // fall through
                    case 162:
                        break;
                    case 44: {
                        return OP_ARROW2;
                    }
                    // fall through
                    case 163:
                        break;
                    case 45: {
                        return KW_NIL;
                    }
                    // fall through
                    case 164:
                        break;
                    case 46: {
                        return NAME_SPLIT;
                    }
                    // fall through
                    case 165:
                        break;
                    case 47: {
                        return OP_NE;
                    }
                    // fall through
                    case 166:
                        break;
                    case 48: {
                        return OP_LEQ;
                    }
                    // fall through
                    case 167:
                        break;
                    case 49: {
                        return OP_GEQ;
                    }
                    // fall through
                    case 168:
                        break;
                    case 50: {
                        return OP_LL;
                    }
                    // fall through
                    case 169:
                        break;
                    case 51: {
                        return OP_GG;
                    }
                    // fall through
                    case 170:
                        break;
                    case 52: {
                        return OP_LLL;
                    }
                    // fall through
                    case 171:
                        break;
                    case 53: {
                        return OP_GGG;
                    }
                    // fall through
                    case 172:
                        break;
                    case 54: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 173:
                        break;
                    case 55: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 174:
                        break;
                    case 56: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 175:
                        break;
                    case 57: {
                        return OP_ARROW1;
                    }
                    // fall through
                    case 176:
                        break;
                    case 58: {
                        return DOMAIN_R;
                    }
                    // fall through
                    case 177:
                        break;
                    case 59: {
                        return BUILDER_L;
                    }
                    // fall through
                    case 178:
                        break;
                    case 60: {
                        return BUILDER_R;
                    }
                    // fall through
                    case 179:
                        break;
                    case 61: {
                        return OP_L10N;
                    }
                    // fall through
                    case 180:
                        break;
                    case 62: {
                        return STRING_TEXT;
                    }
                    // fall through
                    case 181:
                        break;
                    case 63: {
                        yybegin(YYINITIAL);
                        return STRING_R;
                    }
                    // fall through
                    case 182:
                        break;
                    case 64: {
                        return OP_PLUS_EQ;
                    }
                    // fall through
                    case 183:
                        break;
                    case 65: {
                        return OP_MINUS_EQ;
                    }
                    // fall through
                    case 184:
                        break;
                    case 66: {
                        return OP_UNWRAP_ELSE;
                    }
                    // fall through
                    case 185:
                        break;
                    case 67: {
                        return OP_EE;
                    }
                    // fall through
                    case 186:
                        break;
                    case 68: {
                        return OP_UNWRAP_OR;
            }
          // fall through
                    case 187:
                        break;
                    case 69: {
                        return SYMBOW_RAW;
                    }
                    // fall through
                    case 188:
                        break;
                    case 70: {
                        return KW_AS;
                    }
                    // fall through
                    case 189:
                        break;
                    case 71: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 190:
                        break;
                    case 72: {
                        return KW_IF;
                    }
                    // fall through
                    case 191:
                        break;
                    case 73: {
                        return KW_IN;
                    }
                    // fall through
                    case 192:
                        break;
                    case 74: {
                        return KW_IS;
                    }
                    // fall through
                    case 193:
                        break;
                    case 75: {
                        yybegin(TextCapture6);
                        return STRING_L;
                    }
                    // fall through
          case 194: break;
                    case 76: {
                        yybegin(TextCapture3);
                        return STRING_L;
            }
          // fall through
                    case 195:
                        break;
                    case 77: {
                        return DOMAIN_L;
            }
          // fall through
                    case 196:
                        break;
                    case 78: {
                        return OP_UNTIL;
                    }
          // fall through
                    case 197:
                        break;
                    case 79: {
                        return OP_ARROW3;
            }
          // fall through
                    case 198:
                        break;
                    case 80: {
                        return KW_FOR;
            }
          // fall through
                    case 199:
                        break;
                    case 81: {
                        return KW_LET;
                    }
                    // fall through
                    case 200:
                        break;
                    case 82: {
                        return KW_NEW;
                    }
                    // fall through
                    case 201:
                        break;
                    case 83: {
                        return KW_NOT;
                    }
                    // fall through
                    case 202:
                        break;
                    case 84: {
                        return KW_TRY;
                    }
                    // fall through
                    case 203:
                        break;
                    case 85: {
                        return COMMENT_BLOCK;
                    }
                    // fall through
                    case 204:
                        break;
                    case 86: {
                        return KW_CASE;
                    }
                    // fall through
                    case 205:
                        break;
                    case 87: {
                        return KW_ELSE;
                    }
                    // fall through
                    case 206:
                        break;
                    case 88: {
                        return KW_ENUMERATE;
            }
          // fall through
                    case 207:
                        break;
                    case 89: {
                        return KW_FROM;
                    }
                    // fall through
                    case 208:
                        break;
                    case 90: {
                        return KW_NULL;
                    }
                    // fall through
                    case 209:
                        break;
                    case 91: {
                        return KW_BOOLEAN;
                    }
                    // fall through
                    case 210:
                        break;
                    case 92: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 211:
                        break;
                    case 93: {
                        return KW_WHEN;
                    }
                    // fall through
                    case 212:
                        break;
                    case 94: {
                        return KW_WITH;
                    }
                    // fall through
                    case 213:
                        break;
                    case 95: {
                        return KW_BREAK;
                    }
                    // fall through
                    case 214:
                        break;
                    case 96: {
                        return KW_MATCH;
                    }
                    // fall through
                    case 215:
                        break;
                    case 97: {
                        return KW_CLASS;
                    }
                    // fall through
                    case 216:
                        break;
                    case 98: {
                        return KW_FLAGS;
                    }
                    // fall through
                    case 217:
                        break;
                    case 99: {
                        return KW_IMPLY;
                    }
                    // fall through
                    case 218:
                        break;
                    case 100: {
                        return KW_MACRO;
                    }
                    // fall through
                    case 219:
                        break;
                    case 101: {
                        return KW_RAISE;
                    }
                    // fall through
                    case 220:
                        break;
                    case 102: {
                        return KW_TRAIT;
            }
          // fall through
                    case 221:
                        break;
                    case 103: {
                        return KW_UNION;
            }
          // fall through
                    case 222:
                        break;
                    case 104: {
                        return KW_UNITE;
            }
          // fall through
                    case 223:
                        break;
                    case 105: {
                        return KW_UNTIL;
            }
          // fall through
                    case 224:
                        break;
                    case 106: {
                        return KW_USING;
            }
          // fall through
                    case 225:
                        break;
                    case 107: {
                        return KW_WHERE;
            }
          // fall through
                    case 226:
                        break;
                    case 108: {
                        return KW_WHILE;
                    }
          // fall through
                    case 227:
                        break;
                    case 109: {
                        return KW_YIELD;
                    }
                    // fall through
                    case 228:
                        break;
                    case 110: {
                        return KW_TEMPLATE;
                    }
                    // fall through
                    case 229:
                        break;
                    case 111: {
                        return KW_LAMBDA;
                    }
                    // fall through
                    case 230:
                        break;
                    case 112: {
                        return KW_OBJECT;
                    }
                    // fall through
                    case 231:
                        break;
                    case 113:
            { return KW_RESUME;
            }
          // fall through
                    case 232:
                        break;
                    case 114:
            { return KW_RETURN;
            }
          // fall through
                    case 233:
                        break;
                    case 115:
            { return KW_COMPONENT;
            }
          // fall through
                    case 234:
                        break;
                    case 116:
            { return KW_EXCLUDE;
            }
          // fall through
                    case 235:
                        break;
                    case 117:
            { return KW_CONTINUE;
            }
          // fall through
                    case 236:
                        break;
                    case 118:
            { return KW_NAMESPACE;
            }
          // fall through
                    case 237: break;
          case 119:
            { return KW_THROUGH;
            }
          // fall through
          case 238: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
