// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\1\u2100\1\u2300" +
                    "\2\u2100\1\u2400\1\u2500\2\u2100\1\u2600\1\u2700\2\u2100\31\u0100" +
                    "\1\u2800\121\u0100\1\u2900\4\u0100\1\u2a00\1\u0100\1\u2b00\1\u2c00" +
                    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\53\u0100\1\u3100\10\u3200\31\u2100" +
                    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900" +
                    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u0100\1\u3f00\1\u4000" +
                    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u2100\1\u4600\1\u4700" +
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00" +
                    "\1\u5000\1\u5100\1\u2100\1\u5200\1\u5300\1\u5400\1\u2100\3\u0100" +
                    "\1\u5500\1\u5600\1\u5700\12\u2100\4\u0100\1\u5800\17\u2100\2\u0100" +
                    "\1\u5900\41\u2100\2\u0100\1\u5a00\1\u5b00\2\u2100\1\u5c00\1\u5d00" +
                    "\27\u0100\1\u5e00\2\u0100\1\u5f00\45\u2100\1\u0100\1\u6000\1\u6100" +
                    "\11\u2100\1\u6200\24\u2100\1\u6300\1\u6400\1\u2100\1\u6500\1\u6600" +
                    "\1\u6700\1\u6800\2\u2100\1\u6900\5\u2100\1\u6a00\1\u6b00\1\u6c00" +
                    "\5\u2100\1\u6d00\1\u6e00\4\u2100\1\u6f00\21\u2100\246\u0100\1\u7000" +
                    "\20\u0100\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u2100" +
                    "\2\u0100\1\u7500\u0b06\u2100\1\u7600\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\1\7\1\0\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\32\32" +
                    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42" +
                    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52" +
                    "\1\53\1\54\1\55\1\56\1\57\1\60\1\32\1\61" +
                    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\32" +
                    "\1\71\1\72\1\73\7\0\1\1\32\0\1\1\10\0" +
                    "\1\74\1\75\3\0\1\74\6\0\1\75\1\0\1\76" +
                    "\2\0\1\75\5\0\27\75\1\0\37\75\1\77\u01ca\75" +
                    "\4\0\14\75\16\0\5\75\7\0\1\75\1\0\1\75" +
                    "\21\0\160\76\5\75\1\0\2\75\3\0\3\75\1\0" +
                    "\1\75\6\0\1\75\1\76\3\75\1\0\1\75\1\0" +
                    "\24\75\1\0\123\75\1\0\213\75\1\0\5\76\2\0" +
                    "\246\75\1\0\46\75\2\0\1\75\6\0\51\75\10\0" +
                    "\55\76\1\0\1\76\1\0\2\76\1\0\2\76\1\0" +
                    "\1\76\10\0\33\75\4\0\4\75\35\0\13\76\5\0" +
                    "\53\75\37\76\4\0\2\75\1\76\143\75\1\0\1\75" +
                    "\7\76\2\0\6\76\2\75\2\76\1\0\4\76\2\75" +
                    "\12\76\3\75\2\0\1\75\20\0\1\75\1\76\36\75" +
                    "\33\76\2\0\131\75\13\76\1\75\16\0\12\76\41\75" +
                    "\11\76\2\75\4\0\1\75\2\0\1\76\2\0\26\75" +
                    "\4\76\1\75\11\76\1\75\3\76\1\75\5\76\22\0" +
                    "\31\75\3\76\4\0\13\75\65\0\25\75\1\0\10\75" +
                    "\25\0\17\76\1\0\41\76\66\75\3\76\1\75\22\76" +
                    "\1\75\7\76\12\75\2\76\2\0\12\76\1\0\20\75" +
                    "\3\76\1\0\10\75\2\0\2\75\2\0\26\75\1\0" +
                    "\7\75\1\0\1\75\3\0\4\75\2\0\1\76\1\75" +
                    "\7\76\2\0\2\76\2\0\3\76\1\75\10\0\1\76" +
                    "\4\0\2\75\1\0\3\75\2\76\2\0\12\76\2\75" +
                    "\12\0\1\75\1\0\1\76\2\0\3\76\1\0\6\75" +
                    "\4\0\2\75\2\0\26\75\1\0\7\75\1\0\2\75" +
                    "\1\0\2\75\1\0\2\75\2\0\1\76\1\0\5\76" +
                    "\4\0\2\76\2\0\3\76\3\0\1\76\7\0\4\75" +
                    "\1\0\1\75\7\0\14\76\3\75\1\76\13\0\3\76" +
                    "\1\0\11\75\1\0\3\75\1\0\26\75\1\0\7\75" +
                    "\1\0\2\75\1\0\5\75\2\0\1\76\1\75\10\76" +
                    "\1\0\3\76\1\0\3\76\2\0\1\75\17\0\2\75" +
                    "\2\76\2\0\12\76\11\0\1\75\6\76\1\0\3\76" +
                    "\1\0\10\75\2\0\2\75\2\0\26\75\1\0\7\75" +
                    "\1\0\2\75\1\0\5\75\2\0\1\76\1\75\7\76" +
                    "\2\0\2\76\2\0\3\76\10\0\2\76\4\0\2\75" +
                    "\1\0\3\75\2\76\2\0\12\76\1\0\1\75\20\0" +
                    "\1\76\1\75\1\0\6\75\3\0\3\75\1\0\4\75" +
                    "\3\0\2\75\1\0\1\75\1\0\2\75\3\0\2\75" +
                    "\3\0\3\75\3\0\14\75\4\0\5\76\3\0\3\76" +
                    "\1\0\4\76\2\0\1\75\6\0\1\76\16\0\12\76" +
                    "\20\0\5\76\10\75\1\0\3\75\1\0\27\75\1\0" +
                    "\20\75\3\0\1\75\7\76\1\0\3\76\1\0\4\76" +
                    "\7\0\2\76\1\0\3\75\5\0\2\75\2\76\2\0" +
                    "\12\76\20\0\1\75\3\76\1\0\10\75\1\0\3\75" +
                    "\1\0\27\75\1\0\12\75\1\0\5\75\2\0\1\76" +
                    "\1\75\7\76\1\0\3\76\1\0\4\76\7\0\2\76" +
                    "\7\0\1\75\1\0\2\75\2\76\2\0\12\76\1\0" +
                    "\2\75\15\0\4\76\1\0\10\75\1\0\3\75\1\0" +
                    "\51\75\2\76\1\75\7\76\1\0\3\76\1\0\4\76" +
                    "\1\75\5\0\3\75\1\76\7\0\3\75\2\76\2\0" +
                    "\12\76\12\0\6\75\2\0\2\76\1\0\22\75\3\0" +
                    "\30\75\1\0\11\75\1\0\1\75\2\0\7\75\3\0" +
                    "\1\76\4\0\6\76\1\0\1\76\1\0\10\76\6\0" +
                    "\12\76\2\0\2\76\15\0\60\75\1\76\1\75\10\76" +
                    "\5\0\7\75\10\76\1\0\12\76\47\0\2\75\1\0" +
                    "\1\75\1\0\5\75\1\0\30\75\1\0\1\75\1\0" +
                    "\12\75\1\76\1\75\12\76\1\75\2\0\5\75\1\0" +
                    "\1\75\1\0\6\76\2\0\12\76\2\0\4\75\40\0" +
                    "\1\75\27\0\2\76\6\0\12\76\13\0\1\76\1\0" +
                    "\1\76\1\0\1\76\4\0\2\76\10\75\1\0\44\75" +
                    "\4\0\24\76\1\0\2\76\5\75\13\76\1\0\44\76" +
                    "\11\0\1\76\71\0\53\75\24\76\1\75\12\76\6\0" +
                    "\6\75\4\76\4\75\3\76\1\75\3\76\2\75\7\76" +
                    "\3\75\4\76\15\75\14\76\1\75\17\76\2\0\46\75" +
                    "\1\0\1\75\5\0\1\75\2\0\53\75\1\0\115\75" +
                    "\1\0\4\75\2\0\7\75\1\0\1\75\1\0\4\75" +
                    "\2\0\51\75\1\0\4\75\2\0\41\75\1\0\4\75" +
                    "\2\0\7\75\1\0\1\75\1\0\4\75\2\0\17\75" +
                    "\1\0\71\75\1\0\4\75\2\0\103\75\2\0\3\76" +
                    "\11\0\11\76\16\0\20\75\20\0\126\75\2\0\6\75" +
                    "\3\0\u016c\75\2\0\21\75\1\1\32\75\5\0\113\75" +
                    "\3\0\13\75\7\0\15\75\1\0\4\75\3\76\13\0" +
                    "\22\75\3\76\13\0\22\75\2\76\14\0\15\75\1\0" +
                    "\3\75\1\0\2\76\14\0\64\75\40\76\3\0\1\75" +
                    "\4\0\1\75\1\76\2\0\12\76\41\0\3\76\2\0" +
                    "\12\76\6\0\131\75\7\0\51\75\1\76\1\75\5\0" +
                    "\106\75\12\0\37\75\1\0\14\76\4\0\14\76\12\0" +
                    "\12\76\36\75\2\0\5\75\13\0\54\75\4\0\32\75" +
                    "\6\0\13\76\45\0\27\75\5\76\4\0\65\75\12\76" +
                    "\1\0\35\76\2\0\13\76\6\0\12\76\15\0\1\75" +
                    "\10\0\16\76\102\0\5\76\57\75\21\76\7\75\4\0" +
                    "\12\76\21\0\11\76\14\0\3\76\36\75\15\76\2\75" +
                    "\12\76\54\75\16\76\14\0\44\75\24\76\10\0\12\76" +
                    "\3\0\3\75\12\76\44\75\2\0\11\75\7\0\53\75" +
                    "\2\0\3\75\20\0\3\76\1\0\25\76\4\75\1\76" +
                    "\6\75\1\76\2\75\3\76\1\75\5\0\300\75\72\76" +
                    "\1\0\5\76\26\75\2\0\6\75\2\0\46\75\2\0" +
                    "\6\75\2\0\10\75\1\0\1\75\1\0\1\75\1\0" +
                    "\1\75\1\0\37\75\2\0\65\75\1\0\7\75\1\0" +
                    "\1\75\3\0\3\75\1\0\7\75\3\0\4\75\2\0" +
                    "\6\75\4\0\15\75\5\0\3\75\1\0\7\75\3\0" +
                    "\13\1\35\0\2\1\5\0\1\1\17\0\2\76\3\0" +
                    "\1\100\1\101\1\102\13\0\1\100\1\0\1\76\12\0" +
                    "\1\1\21\0\1\75\15\0\1\75\20\0\15\75\63\0" +
                    "\15\76\4\0\1\76\3\0\14\76\21\0\1\75\4\0" +
                    "\1\75\2\0\12\75\1\0\1\75\2\0\6\75\6\0" +
                    "\1\75\1\0\1\75\1\0\1\75\1\0\20\75\2\0" +
                    "\4\75\5\0\5\75\4\0\1\75\21\0\51\75\111\0" +
                    "\1\103\62\0\1\104\17\0\1\100\40\0\1\105\1\106" +
                    "\50\0\1\107\374\0\1\110\u028a\0\1\111\1\112\14\0" +
                    "\1\113\214\0\1\114\1\115\1\116\1\117\171\0\57\75" +
                    "\1\0\57\75\1\0\205\75\6\0\4\75\3\76\2\75" +
                    "\14\0\46\75\1\0\1\75\5\0\1\75\2\0\70\75" +
                    "\7\0\1\75\17\0\1\76\27\75\11\0\7\75\1\0" +
                    "\7\75\1\0\7\75\1\0\7\75\1\0\7\75\1\0" +
                    "\7\75\1\0\7\75\1\0\7\75\1\0\40\76\1\1" +
                    "\4\0\3\75\31\0\11\75\6\76\1\0\5\75\2\0" +
                    "\5\75\4\0\126\75\2\0\2\76\2\0\3\75\1\0" +
                    "\132\75\1\0\4\75\5\0\53\75\1\0\136\75\21\0" +
                    "\33\75\65\0\306\75\112\0\360\75\20\0\215\75\103\0" +
                    "\56\75\2\0\15\75\3\0\20\75\12\76\2\75\24\0" +
                    "\57\75\1\76\4\0\12\76\1\0\37\75\2\76\120\75" +
                    "\2\76\45\0\11\75\2\0\147\75\2\0\65\75\2\0" +
                    "\5\75\60\0\13\75\1\76\3\75\1\76\4\75\1\76" +
                    "\27\75\5\76\30\0\64\75\14\0\2\76\62\75\22\76" +
                    "\12\0\12\76\6\0\22\76\6\75\3\0\1\75\1\0" +
                    "\2\75\13\76\34\75\10\76\2\0\27\75\15\76\14\0" +
                    "\35\75\3\0\4\76\57\75\16\76\16\0\1\75\12\76" +
                    "\6\0\5\75\1\76\12\75\12\76\5\75\1\0\51\75" +
                    "\16\76\11\0\3\75\1\76\10\75\2\76\2\0\12\76" +
                    "\6\0\27\75\3\0\1\75\3\76\62\75\1\76\1\75" +
                    "\3\76\2\75\2\76\5\75\2\76\1\75\1\76\1\75" +
                    "\30\0\3\75\2\0\13\75\5\76\2\0\3\75\2\76" +
                    "\12\0\6\75\2\0\6\75\2\0\6\75\11\0\7\75" +
                    "\1\0\7\75\1\0\53\75\1\0\14\75\10\0\163\75" +
                    "\10\76\1\0\2\76\2\0\12\76\6\0\244\75\14\0" +
                    "\27\75\4\0\61\75\u0104\0\156\75\2\0\152\75\46\0" +
                    "\7\75\14\0\5\75\5\0\1\75\1\76\12\75\1\0" +
                    "\15\75\1\0\5\75\1\0\1\75\1\0\2\75\1\0" +
                    "\2\75\1\0\154\75\41\0\213\75\6\0\332\75\22\0" +
                    "\100\75\2\0\66\75\50\0\12\75\6\0\20\76\20\0" +
                    "\20\76\3\0\2\76\30\0\3\76\41\0\1\75\1\0" +
                    "\1\75\3\0\1\75\1\0\1\75\1\0\1\75\1\0" +
                    "\1\75\1\0\176\75\23\0\12\76\7\0\32\75\4\0" +
                    "\1\76\1\0\32\75\13\0\70\75\2\76\37\75\3\0" +
                    "\6\75\2\0\6\75\2\0\6\75\2\0\3\75\43\0" +
                    "\14\75\1\0\32\75\1\0\23\75\1\0\2\75\1\0" +
                    "\17\75\2\0\16\75\42\0\173\75\105\0\65\75\210\0" +
                    "\1\76\202\0\35\75\3\0\61\75\17\0\1\76\37\0" +
                    "\40\75\15\0\36\75\5\0\46\75\5\76\5\0\36\75" +
                    "\2\0\44\75\4\0\10\75\1\0\5\75\52\0\236\75" +
                    "\2\0\12\76\6\0\44\75\4\0\44\75\4\0\50\75" +
                    "\10\0\64\75\234\0\67\75\11\0\26\75\12\0\10\75" +
                    "\230\0\6\75\2\0\1\75\1\0\54\75\1\0\2\75" +
                    "\3\0\1\75\2\0\27\75\12\0\27\75\11\0\37\75" +
                    "\101\0\23\75\1\0\2\75\12\0\26\75\12\0\32\75" +
                    "\106\0\70\75\6\0\2\75\100\0\1\75\3\76\1\0" +
                    "\2\76\5\0\4\76\4\75\1\0\3\75\1\0\35\75" +
                    "\2\0\3\76\4\0\1\76\40\0\35\75\3\0\35\75" +
                    "\43\0\10\75\1\0\34\75\2\76\31\0\66\75\12\0" +
                    "\26\75\12\0\23\75\15\0\22\75\156\0\111\75\67\0" +
                    "\63\75\15\0\63\75\15\0\44\75\4\76\10\0\12\76" +
                    "\306\0\35\75\12\0\1\75\10\0\26\75\13\76\217\0" +
                    "\27\75\11\0\3\76\65\75\17\76\37\0\12\76\17\0" +
                    "\4\76\55\75\13\76\25\0\31\75\7\0\12\76\6\0" +
                    "\3\76\44\75\16\76\1\0\12\76\4\0\1\75\2\76" +
                    "\11\0\43\75\1\76\2\0\1\75\11\0\3\76\60\75" +
                    "\16\76\4\75\4\0\4\76\3\0\12\76\1\75\1\0" +
                    "\1\75\43\0\22\75\1\0\31\75\14\76\6\0\1\76" +
                    "\101\0\7\75\1\0\1\75\1\0\4\75\1\0\17\75" +
                    "\1\0\12\75\7\0\57\75\14\76\5\0\12\76\6\0" +
                    "\4\76\1\0\10\75\2\0\2\75\2\0\26\75\1\0" +
                    "\7\75\1\0\2\75\1\0\5\75\1\0\2\76\1\75" +
                    "\7\76\2\0\2\76\2\0\3\76\2\0\1\75\6\0" +
                    "\1\76\5\0\5\75\2\76\2\0\7\76\3\0\5\76" +
                    "\213\0\65\75\22\76\4\75\5\0\12\76\4\0\1\76" +
                    "\1\75\40\0\60\75\24\76\2\75\1\0\1\75\10\0" +
                    "\12\76\246\0\57\75\7\76\2\0\11\76\27\0\4\75" +
                    "\2\76\42\0\60\75\21\76\3\0\1\75\13\0\12\76" +
                    "\46\0\53\75\15\76\1\75\7\0\12\76\66\0\33\75" +
                    "\2\0\17\76\4\0\12\76\306\0\54\75\17\76\145\0" +
                    "\100\75\12\76\25\0\1\75\240\0\10\75\2\0\47\75" +
                    "\7\76\2\0\7\76\1\75\1\0\1\75\1\76\33\0" +
                    "\1\75\12\76\50\75\7\76\1\75\4\76\10\0\1\76" +
                    "\10\0\1\75\13\76\56\75\20\76\3\0\1\75\42\0" +
                    "\71\75\7\0\11\75\1\0\45\75\10\76\1\0\10\76" +
                    "\1\75\17\0\12\76\30\0\36\75\2\0\26\76\1\0" +
                    "\16\76\111\0\7\75\1\0\2\75\1\0\46\75\6\76" +
                    "\3\0\1\76\1\0\2\76\1\0\7\76\1\75\1\76" +
                    "\10\0\12\76\6\0\6\75\1\0\2\75\1\0\40\75" +
                    "\5\76\1\0\2\76\1\0\5\76\1\75\7\0\12\76" +
                    "\u0136\0\23\75\4\76\11\0\232\75\146\0\157\75\21\0" +
                    "\304\75\274\0\57\75\321\0\107\75\271\0\71\75\7\0" +
                    "\37\75\1\0\12\76\146\0\36\75\2\0\5\76\13\0" +
                    "\60\75\7\76\11\0\4\75\14\0\12\76\11\0\25\75" +
                    "\5\0\23\75\260\0\100\75\200\0\113\75\4\0\1\76" +
                    "\1\75\67\76\7\0\4\76\15\75\100\0\2\75\1\0" +
                    "\1\75\34\0\370\75\10\0\363\75\15\0\37\75\61\0" +
                    "\3\75\21\0\4\75\10\0\u018c\75\4\0\153\75\5\0" +
                    "\15\75\3\0\11\75\7\0\12\75\3\0\2\76\306\0" +
                    "\5\76\3\0\6\76\10\0\10\76\2\0\7\76\36\0" +
                    "\4\76\224\0\3\76\273\0\125\75\1\0\107\75\1\0" +
                    "\2\75\2\0\1\75\2\0\2\75\2\0\4\75\1\0" +
                    "\14\75\1\0\1\75\1\0\7\75\1\0\101\75\1\0" +
                    "\4\75\2\0\10\75\1\0\7\75\1\0\34\75\1\0" +
                    "\4\75\1\0\5\75\1\0\1\75\3\0\7\75\1\0" +
                    "\u0154\75\2\0\31\75\1\0\31\75\1\0\37\75\1\0" +
                    "\31\75\1\0\37\75\1\0\31\75\1\0\37\75\1\0" +
                    "\31\75\1\0\37\75\1\0\31\75\1\0\10\75\2\0" +
                    "\151\76\4\0\62\76\10\0\1\76\16\0\1\76\26\0" +
                    "\5\76\1\0\17\76\120\0\7\76\1\0\21\76\2\0" +
                    "\7\76\1\0\2\76\1\0\5\76\325\0\55\75\3\0" +
                    "\7\76\7\75\2\0\12\76\4\0\1\75\u0171\0\54\75" +
                    "\16\76\6\0\305\75\13\0\7\76\51\0\104\75\7\76" +
                    "\1\75\4\0\12\76\246\0\4\75\1\0\33\75\1\0" +
                    "\2\75\1\0\1\75\2\0\1\75\1\0\12\75\1\0" +
                    "\4\75\1\0\1\75\1\0\1\75\6\0\1\75\4\0" +
                    "\1\75\1\0\1\75\1\0\1\75\1\0\3\75\1\0" +
                    "\2\75\1\0\1\75\2\0\1\75\1\0\1\75\1\0" +
                    "\1\75\1\0\1\75\1\0\1\75\1\0\2\75\1\0" +
                    "\1\75\2\0\4\75\1\0\7\75\1\0\4\75\1\0" +
                    "\4\75\1\0\1\75\1\0\12\75\1\0\21\75\5\0" +
                    "\3\75\1\0\5\75\1\0\21\75\104\0\327\75\51\0" +
                    "\65\75\13\0\336\75\2\0\u0182\75\16\0\u0131\75\37\0" +
                    "\36\75\342\0\360\76\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30464];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6" +
                    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\6\2\16\1\17\1\20\1\21\1\22\1\23\1\24" +
                    "\1\25\1\26\1\27\1\1\1\30\1\31\1\1\21\26" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\17\1\43\1\44\1\45\1\46\1\47\1\50" +
                    "\1\51\1\52\1\53\1\0\1\54\2\0\1\55\3\0" +
                    "\1\56\1\0\1\57\1\60\12\26\1\61\3\26\1\62" +
                    "\1\26\1\63\1\64\24\26\1\54\1\65\1\66\1\0" +
                    "\1\67\1\60\14\26\1\70\1\26\1\61\4\26\1\71" +
                    "\3\26\1\72\1\42\1\73\10\26\1\74\10\26\1\75" +
                    "\1\26\1\76\4\26\1\77\1\100\4\26\1\101\1\61" +
                    "\7\26\1\102\6\26\1\103\1\74\1\104\5\26\1\105" +
                    "\2\26\1\106\1\26\1\107\1\110\1\111\3\26\1\100" +
                    "\3\26\1\112\2\26\1\113\3\26\1\114\2\26\1\115" +
                    "\3\26\1\116\1\117\1\120\1\121\1\122\1\123\1\124" +
                    "\4\26\1\113\5\26\1\125\1\26\1\126\1\127\1\130" +
                    "\1\111\1\122\3\26\1\131\10\26\1\132\5\26\1\133" +
                    "\1\26\1\134\1\26\1\134\1\135";

    private static int[] zzUnpackAction() {
        int[] result = new int[281];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\120\0\240\0\360\0\u0140\0\120\0\120\0\120" +
                    "\0\u0190\0\120\0\120\0\120\0\120\0\120\0\u01e0\0\u0230" +
                    "\0\u0280\0\120\0\u02d0\0\u0320\0\120\0\120\0\u0370\0\120" +
                    "\0\120\0\120\0\u03c0\0\120\0\u0410\0\120\0\120\0\u0460" +
                    "\0\u04b0\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0" +
                    "\0\u0730\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910\0\u0960" +
                    "\0\u09b0\0\120\0\120\0\120\0\u0a00\0\120\0\120\0\120" +
                    "\0\120\0\120\0\120\0\120\0\120\0\u0a50\0\120\0\120" +
                    "\0\120\0\120\0\120\0\120\0\u0140\0\120\0\u0aa0\0\u0af0" +
                    "\0\120\0\u0b40\0\u0b90\0\u0be0\0\u0c30\0\u0460\0\120\0\u0c80" +
                    "\0\u0cd0\0\u0d20\0\u0d70\0\u0dc0\0\u0e10\0\u0e60\0\u0eb0\0\u0f00" +
                    "\0\u0f50\0\u0fa0\0\u03c0\0\u0ff0\0\u1040\0\u1090\0\u03c0\0\u10e0" +
                    "\0\u1130\0\u03c0\0\u1180\0\u11d0\0\u1220\0\u1270\0\u12c0\0\u1310" +
                    "\0\u1360\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u1540\0\u1590" +
                    "\0\u15e0\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770\0\u0140\0\120" +
                    "\0\120\0\u17c0\0\120\0\120\0\u1810\0\u1860\0\u18b0\0\u1900" +
                    "\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80" +
                    "\0\u03c0\0\u1bd0\0\u1c20\0\u1c70\0\u1cc0\0\u1d10\0\u1d60\0\u03c0" +
                    "\0\u1db0\0\u1e00\0\u1e50\0\u03c0\0\u03c0\0\u03c0\0\u1ea0\0\u1ef0" +
                    "\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u2120\0\u2170" +
                    "\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0\0\120" +
                    "\0\u23f0\0\u03c0\0\u2440\0\u2490\0\u24e0\0\u2530\0\u03c0\0\u2580" +
                    "\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u03c0\0\u2710\0\u2760\0\u27b0" +
                    "\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940\0\u03c0\0\u2990\0\u29e0" +
                    "\0\u2a30\0\u2a80\0\u2ad0\0\u2b20\0\u03c0\0\120\0\u03c0\0\u2b70" +
                    "\0\u2bc0\0\u2c10\0\u2c60\0\u2cb0\0\u03c0\0\u2d00\0\u2d50\0\u03c0" +
                    "\0\u2da0\0\u03c0\0\u03c0\0\u03c0\0\u2df0\0\u2e40\0\u2e90\0\u03c0" +
                    "\0\u2ee0\0\u2f30\0\u2f80\0\u03c0\0\u2fd0\0\u3020\0\u03c0\0\u3070" +
                    "\0\u30c0\0\u3110\0\u03c0\0\u3160\0\u31b0\0\u03c0\0\u3200\0\u3250" +
                    "\0\u32a0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u32f0\0\u03c0\0\u03c0" +
                    "\0\u3340\0\u3390\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u3520\0\u3570" +
                    "\0\u35c0\0\u3610\0\u03c0\0\u3660\0\u03c0\0\u03c0\0\u03c0\0\u36b0" +
                    "\0\120\0\u3700\0\u3750\0\u37a0\0\u03c0\0\u37f0\0\u3840\0\u3890" +
                    "\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u03c0\0\u3a70\0\u3ac0" +
                    "\0\u3b10\0\u3b60\0\u3bb0\0\u03c0\0\u3c00\0\u3c50\0\u3ca0\0\120" +
                    "\0\u03c0";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[281];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\33\1\40" +
                    "\1\41\1\42\1\43\1\44\1\45\1\46\2\33\1\47" +
                    "\2\33\1\50\1\51\1\52\1\53\1\33\1\54\1\55" +
                    "\1\56\1\57\1\33\1\60\1\33\1\61\1\62\1\63" +
                    "\1\64\1\65\1\33\1\2\1\66\1\10\1\67\1\70" +
                    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100" +
                    "\1\101\1\2\1\102\1\103\1\104\121\0\2\3\143\0" +
                    "\1\75\71\0\4\105\1\106\27\105\1\107\63\105\10\110" +
                    "\1\111\103\110\1\112\3\110\27\0\1\101\107\0\1\113" +
                    "\107\0\1\66\3\0\1\114\125\0\2\23\14\0\1\23" +
                    "\103\0\1\74\122\0\1\115\1\71\111\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\30\33\4\0\2\33\55\0" +
                    "\1\76\63\0\40\116\1\117\57\116\21\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\21\33\1\120\6\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\20\33\1\121\7\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\1\122\12\33\1\123\2\33" +
                    "\1\124\11\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\4\33\1\125\23\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\13\33" +
                    "\1\126\1\33\1\127\10\33\1\130\1\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\1\131" +
                    "\12\33\1\132\1\33\1\133\1\134\1\33\1\135\2\33" +
                    "\1\136\4\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\5\33\1\137\6\33\1\140\1\141" +
                    "\3\33\1\142\6\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\1\143\3\33\1\144\23\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\1\145\7\33\1\146\17\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\1\147\3\33" +
                    "\1\150\3\33\1\151\5\33\1\152\4\33\1\153\4\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\1\33\1\154\26\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\1\155\3\33\1\156" +
                    "\23\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\22\33\1\157\5\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\20\33\1\160" +
                    "\6\33\1\161\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\15\33\1\162\3\33\1\163\6\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\7\33\1\164\1\165\17\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\10\33\1\166" +
                    "\17\33\4\0\2\33\42\0\2\65\7\0\1\65\6\0" +
                    "\30\65\27\0\2\76\1\0\115\76\4\105\1\167\27\105" +
                    "\1\107\63\105\10\110\1\111\117\110\1\170\107\110\25\0" +
                    "\2\171\71\0\13\114\1\172\104\114\27\0\1\173\73\0" +
                    "\1\174\15\0\2\33\5\0\1\174\1\0\1\33\4\0" +
                    "\1\33\1\0\30\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\4\33\1\175\23\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\21\33\1\176\1\177\5\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\1\200\27\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\14\33\1\201\1\202\12\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\5\33\1\133\22\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\21\33\1\203\6\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\23\33\1\204\4\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\2\33\1\205\17\33\1\206\5\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\13\33" +
                    "\1\207\14\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\1\210\27\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\20\33\1\211" +
                    "\7\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\16\33\1\212\11\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\15\33\1\213" +
                    "\12\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\17\33\1\214\10\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\3\33\1\215" +
                    "\16\33\1\216\5\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\14\33\1\217\13\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\22\33\1\220\5\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\2\33\1\221\17\33\1\177" +
                    "\5\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\2\33\1\222\25\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\14\33\1\223" +
                    "\13\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\25\33\1\224\2\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\13\33\1\225" +
                    "\14\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\22\33\1\226\5\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\13\33\1\227" +
                    "\14\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\11\33\1\230\16\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\10\33\1\231" +
                    "\17\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\21\33\1\232\1\233\5\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\20\33" +
                    "\1\234\7\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\1\235\22\33\1\236\3\33\1\237" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\17\33\1\240\10\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\10\33\1\241\11\33" +
                    "\1\242\5\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\10\33\1\243\17\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\4\33" +
                    "\1\244\3\33\1\245\17\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\22\33\1\246\5\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\4\33\1\247\23\33\4\0\2\33\21\0\13\114" +
                    "\1\172\4\114\1\250\77\114\21\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\1\251\27\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\4\33\1\252" +
                    "\23\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\2\33\1\253\25\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\21\33\1\254" +
                    "\6\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\17\33\1\255\10\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\22\33\1\256" +
                    "\5\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\4\33\1\257\23\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\14\33\1\260" +
                    "\13\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\13\33\1\261\14\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\4\33\1\262" +
                    "\23\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\13\33\1\263\5\33\1\236\6\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\6\33\1\264\21\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\14\33\1\265\13\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\2\33\1\266\25\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\13\33\1\267\14\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\23\33\1\270\4\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\4\33\1\271\23\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\1\33\1\272\26\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\20\33\1\273\7\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\20\33\1\274\7\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\4\33\1\275\23\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\13\33\1\276\14\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\4\33\1\277\23\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\21\33\1\300\6\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\23\33\1\301\4\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\23\33\1\302\4\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\23\33\1\303\4\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\10\33\1\304\17\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\4\33\1\305\23\33\4\0" +
                    "\2\33\24\0\1\306\15\0\2\33\5\0\1\306\1\0" +
                    "\1\33\4\0\1\33\1\0\30\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\4\33\1\307" +
                    "\16\33\1\310\4\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\16\33\1\311\3\33\1\312" +
                    "\5\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\10\33\1\313\17\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\15\33\1\314" +
                    "\12\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\15\33\1\315\2\33\1\316\7\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\13\33\1\317\14\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\7\33\1\320\20\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\13\33\1\321\14\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\12\33\1\322\15\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\7\33\1\323\20\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\21\33\1\324\6\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\16\33\1\325\11\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\10\33\1\326\17\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\4\33\1\327\14\33\1\330\6\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\23\33\1\331" +
                    "\4\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\15\33\1\332\12\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\22\33\1\333" +
                    "\5\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\21\33\1\334\6\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\22\33\1\335" +
                    "\5\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\10\33\1\336\16\33\1\337\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\2\33" +
                    "\1\340\25\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\20\33\1\341\7\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\3\33" +
                    "\1\342\24\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\16\33\1\343\11\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\16\33" +
                    "\1\133\11\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\21\33\1\344\6\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\2\33" +
                    "\1\345\25\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\4\33\1\346\23\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\14\33" +
                    "\1\347\13\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\20\33\1\350\7\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\2\33" +
                    "\1\351\25\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\22\33\1\352\5\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\21\33" +
                    "\1\307\6\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\15\33\1\353\12\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\4\33" +
                    "\1\354\23\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\13\33\1\355\14\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\6\33" +
                    "\1\356\21\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\4\33\1\357\23\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\4\33" +
                    "\1\355\23\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\3\33\1\360\24\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\15\33" +
                    "\1\361\12\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\15\33\1\362\12\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\20\33" +
                    "\1\363\7\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\3\33\1\364\24\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\3\33" +
                    "\1\365\24\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\7\33\1\366\20\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\10\33" +
                    "\1\367\17\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\14\33\1\370\13\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\22\33" +
                    "\1\371\5\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\5\33\1\372\22\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\1\373" +
                    "\27\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\17\33\1\374\10\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\22\33\1\375" +
                    "\5\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\4\33\1\376\23\33\4\0\2\33\42\0" +
                    "\2\33\7\0\1\33\4\0\1\33\1\0\15\33\1\377" +
                    "\12\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\22\33\1\u0100\5\33\4\0\2\33\24\0" +
                    "\1\u0101\15\0\2\33\5\0\1\u0101\1\0\1\33\4\0" +
                    "\1\33\1\0\30\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\4\33\1\u0102\23\33\4\0" +
                    "\2\33\42\0\2\33\7\0\1\33\4\0\1\33\1\0" +
                    "\23\33\1\u0103\4\33\4\0\2\33\42\0\2\33\7\0" +
                    "\1\33\4\0\1\33\1\0\1\u0104\27\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\4\33" +
                    "\1\u0105\23\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\21\33\1\337\6\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\20\33" +
                    "\1\u0106\7\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\16\33\1\u0107\11\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\4\33" +
                    "\1\u0108\23\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\10\33\1\u0109\17\33\4\0\2\33" +
                    "\42\0\2\33\7\0\1\33\4\0\1\33\1\0\1\u010a" +
                    "\27\33\4\0\2\33\42\0\2\33\7\0\1\33\4\0" +
                    "\1\33\1\0\1\u010b\27\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\23\33\1\u010c\4\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\15\33\1\u010d\12\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u010e\23\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\22\33\1\u010f\5\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\16\33\1\u0110\11\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\15\33\1\133\12\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\15\33\1\u0111\12\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\24\33\1\312\3\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\2\33\1\u0112\25\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\2\33\1\u0113\25\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\20\33\1\u0112\7\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\22\33\1\u0114\5\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\4\33\1\330\23\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\23\33\1\u0115\4\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\22\33\1\365\5\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\4\33\1\324\23\33\4\0\2\33\42\0\2\33" +
                    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u0116\23\33" +
                    "\4\0\2\33\42\0\2\33\7\0\1\33\4\0\1\33" +
                    "\1\0\6\33\1\u0117\21\33\4\0\2\33\24\0\1\u0118" +
                    "\15\0\2\33\5\0\1\u0118\1\0\1\33\4\0\1\33" +
                    "\1\0\30\33\4\0\2\33\42\0\2\33\7\0\1\33" +
                    "\4\0\1\33\1\0\7\33\1\u0119\20\33\4\0\2\33" +
                    "\21\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[15600];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\3\1\3\11\1\1\5\11\3\1\1\11" +
                    "\2\1\2\11\1\1\3\11\1\1\1\11\1\1\2\11" +
                    "\22\1\3\11\1\1\10\11\1\1\6\11\1\0\1\11" +
                    "\2\0\1\11\3\0\1\1\1\0\1\11\50\1\2\11" +
                    "\1\0\2\11\53\1\1\11\35\1\1\11\72\1\1\11" +
                    "\26\1\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[281];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 94:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 95:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 96:
                        break;
                    case 4: {
                        return HASH;
                    }
                    // fall through
                    case 97:
                        break;
                    case 5: {
                        return DOLLAR;
                    }
                    // fall through
                    case 98:
                        break;
                    case 6: {
                        return OP_DIV;
                    }
                    // fall through
                    case 99:
                        break;
                    case 7: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 100:
                        break;
                    case 8: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 101:
                        break;
                    case 9: {
                        return STAR;
                    }
                    // fall through
                    case 102:
                        break;
                    case 10: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 103:
                        break;
                    case 11: {
                        return COMMA;
                    }
                    // fall through
                    case 104:
                        break;
                    case 12: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 105:
                        break;
                    case 13: {
                        return DOT;
                    }
                    // fall through
                    case 106:
                        break;
                    case 14: {
                        return INTEGER;
                    }
                    // fall through
                    case 107:
                        break;
                    case 15: {
                        return COLON;
                    }
                    // fall through
                    case 108:
                        break;
                    case 16: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 109:
                        break;
                    case 17: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 110:
                        break;
                    case 18: {
                        return EQUAL;
                    }
                    // fall through
                    case 111:
                        break;
                    case 19: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 112:
                        break;
                    case 20: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 113:
                        break;
                    case 21: {
                        return AT;
                    }
                    // fall through
                    case 114:
                        break;
                    case 22: {
                        return SYMBOL;
                    }
                    // fall through
                    case 115:
                        break;
                    case 23: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 116:
                        break;
                    case 24: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 117:
                        break;
                    case 25: {
                        return OP_POW;
                    }
                    // fall through
                    case 118:
                        break;
                    case 26: {
                        return BRACE_L;
                    }
                    // fall through
                    case 119:
                        break;
                    case 27: {
                        return OP_OR;
                    }
                    // fall through
                    case 120:
                        break;
                    case 28: {
                        return BRACE_R;
                    }
                    // fall through
                    case 121:
                        break;
                    case 29: {
                        return COLOR;
                    }
                    // fall through
                    case 122:
                        break;
                    case 30: {
                        return OP_DIV_REM;
                    }
                    // fall through
                    case 123:
                        break;
                    case 31: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 124:
                        break;
                    case 32: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 125:
                        break;
                    case 33: {
                        return OP_ARROW2;
                    }
                    // fall through
                    case 126:
                        break;
                    case 34: {
                        return KW_NIL;
                    }
                    // fall through
                    case 127:
                        break;
                    case 35: {
                        return PROPORTION;
                    }
                    // fall through
                    case 128:
                        break;
                    case 36: {
                        return OP_NE;
                    }
                    // fall through
                    case 129:
                        break;
                    case 37: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 130:
                        break;
                    case 38: {
                        return GENERIC_L;
            }
          // fall through
                    case 131:
                        break;
                    case 39: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 132:
                        break;
                    case 40: {
                        return OP_ARROW1;
                    }
                    // fall through
                    case 133:
                        break;
                    case 41: {
                        return DOMAIN_R;
                    }
                    // fall through
                    case 134:
                        break;
                    case 42: {
                        return BUILDER_L;
                    }
                    // fall through
                    case 135:
                        break;
                    case 43: {
                        return BUILDER_R;
                    }
                    // fall through
                    case 136:
                        break;
                    case 44: {
                        return TEXT_DOUBLE;
                    }
                    // fall through
                    case 137:
                        break;
                    case 45: {
                        return TEXT_SINGLE;
                    }
                    // fall through
                    case 138:
                        break;
                    case 46: {
                        return OP_EE;
                    }
                    // fall through
                    case 139:
                        break;
                    case 47: {
                        return SYMBOW_RAW;
                    }
                    // fall through
                    case 140:
                        break;
                    case 48: {
                        return KW_AS;
                    }
                    // fall through
                    case 141:
                        break;
                    case 49: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 142:
                        break;
                    case 50: {
                        return KW_IF;
                    }
                    // fall through
                    case 143:
                        break;
                    case 51: {
                        return KW_IN;
                    }
                    // fall through
                    case 144:
                        break;
                    case 52: {
                        return KW_IS;
                    }
                    // fall through
                    case 145:
                        break;
                    case 53: {
                        return DOMAIN_L;
                    }
                    // fall through
                    case 146:
                        break;
                    case 54: {
                        return OP_UNTIL;
                    }
                    // fall through
                    case 147:
                        break;
                    case 55: {
                        return OP_ARROW3;
                    }
                    // fall through
                    case 148:
                        break;
                    case 56: {
                        return KW_FOR;
                    }
                    // fall through
                    case 149:
                        break;
                    case 57: {
                        return KW_LET;
                    }
                    // fall through
                    case 150:
                        break;
                    case 58: {
                        return KW_NEW;
                    }
                    // fall through
                    case 151:
                        break;
                    case 59: {
                        return KW_NOT;
                    }
                    // fall through
                    case 152:
                        break;
                    case 60: {
                        return KW_TRY;
                    }
                    // fall through
                    case 153:
                        break;
                    case 61: {
                        return COMMENT_BLOCK;
                    }
                    // fall through
                    case 154:
                        break;
                    case 62: {
                        return KW_CASE;
                    }
                    // fall through
                    case 155:
                        break;
                    case 63: {
                        return KW_ELSE;
                    }
                    // fall through
                    case 156:
                        break;
                    case 64: {
                        return KW_ENUMERATE;
                    }
                    // fall through
                    case 157:
                        break;
                    case 65: {
                        return KW_FROM;
                    }
                    // fall through
                    case 158:
                        break;
                    case 66: {
                        return KW_NULL;
                    }
                    // fall through
                    case 159:
                        break;
                    case 67: {
                        return KW_BOOLEAN;
            }
          // fall through
                    case 160:
                        break;
                    case 68: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 161:
                        break;
                    case 69: {
                        return KW_WHEN;
            }
          // fall through
                    case 162:
                        break;
                    case 70: {
                        return KW_WITH;
                    }
                    // fall through
                    case 163:
                        break;
                    case 71: {
                        return KW_BREAK;
                    }
                    // fall through
                    case 164:
                        break;
                    case 72: {
                        return KW_MATCH;
            }
          // fall through
                    case 165:
                        break;
                    case 73: {
                        return KW_CLASS;
            }
          // fall through
                    case 166:
                        break;
                    case 74: {
                        return KW_FLAGS;
                    }
                    // fall through
                    case 167:
                        break;
                    case 75: {
                        return KW_IMPLY;
                    }
          // fall through
                    case 168:
                        break;
                    case 76: {
                        return KW_MACRO;
                    }
                    // fall through
                    case 169:
                        break;
                    case 77: {
                        return KW_RAISE;
                    }
                    // fall through
                    case 170:
                        break;
                    case 78: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 171:
                        break;
                    case 79: {
                        return KW_UNION;
            }
          // fall through
                    case 172:
                        break;
                    case 80: {
                        return KW_UNITE;
            }
          // fall through
                    case 173:
                        break;
                    case 81: {
                        return KW_WHILE;
            }
          // fall through
                    case 174:
                        break;
                    case 82: {
                        return KW_USING;
                    }
          // fall through
                    case 175:
                        break;
                    case 83: {
                        return KW_WHERE;
            }
          // fall through
                    case 176: break;
                    case 84: {
                        return KW_YIELD;
            }
          // fall through
                    case 177: break;
                    case 85: {
                        return KW_LAMBDA;
                    }
                    // fall through
                    case 178:
                        break;
                    case 86: {
                        return KW_OBJECT;
                    }
                    // fall through
                    case 179:
                        break;
                    case 87: {
                        return KW_RESUME;
                    }
                    // fall through
                    case 180:
                        break;
                    case 88: {
                        return KW_RETURN;
                    }
                    // fall through
                    case 181:
                        break;
                    case 89: {
                        return KW_EXCLUDE;
                    }
                    // fall through
                    case 182:
                        break;
                    case 90: {
                        return KW_CONTINUE;
                    }
                    // fall through
                    case 183:
                        break;
                    case 91: {
                        return KW_COMPONENT;
                    }
                    // fall through
                    case 184:
                        break;
                    case 92:
            { return KW_NAMESPACE;
            }
          // fall through
                    case 185: break;
          case 93:
            { return KW_THROUGH;
            }
          // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
