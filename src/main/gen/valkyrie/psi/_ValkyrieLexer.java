// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u1f00\1\u2100\4\u1f00\1\u2200" +
                    "\1\u2300\2\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100" +
                    "\1\u2700\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00" +
                    "\1\u2d00\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100" +
                    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900" +
                    "\1\u3a00\1\u3b00\1\u3c00\1\u0100\1\u3d00\1\u3e00\1\u3f00\1\u4000" +
                    "\1\u4100\1\u4200\1\u4300\1\u1f00\1\u4400\1\u4500\1\u4600\1\u4700" +
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00" +
                    "\1\u1f00\1\u5000\1\u5100\1\u5200\1\u1f00\3\u0100\1\u5300\1\u5400" +
                    "\1\u5500\12\u1f00\4\u0100\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00" +
                    "\2\u0100\1\u5800\1\u5900\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00" +
                    "\2\u0100\1\u5d00\45\u1f00\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000" +
                    "\24\u1f00\1\u6100\1\u6200\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600" +
                    "\2\u1f00\1\u6700\5\u1f00\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00" +
                    "\1\u6c00\4\u1f00\1\u6d00\21\u1f00\246\u0100\1\u6e00\20\u0100\1\u6f00" +
                    "\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100\1\u7300" +
                    "\u0b06\u1f00\1\u7400\u02fe\u1f00";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4" +
                    "\1\5\1\6\1\7\2\0\1\10\1\11\1\12\1\13" +
                    "\1\0\1\14\1\15\1\16\1\17\12\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\32\30\1\31\1\32" +
                    "\1\33\1\34\1\30\1\35\1\36\1\30\1\37\1\40" +
                    "\1\41\1\42\1\43\1\30\1\44\2\30\1\45\1\46" +
                    "\1\47\1\50\1\51\1\30\1\52\1\53\1\54\1\55" +
                    "\1\56\1\30\1\57\1\60\1\30\1\61\1\62\1\63" +
                    "\1\64\6\0\1\3\32\0\1\1\11\0\1\30\12\0" +
                    "\1\30\1\0\1\65\2\0\1\30\5\0\27\30\1\0" +
                    "\37\30\1\0\u01ca\30\4\0\14\30\16\0\5\30\7\0" +
                    "\1\30\1\0\1\30\21\0\160\65\5\30\1\0\2\30" +
                    "\3\0\3\30\1\0\1\30\6\0\1\30\1\65\3\30" +
                    "\1\0\1\30\1\0\24\30\1\0\123\30\1\0\213\30" +
                    "\1\0\5\65\2\0\246\30\1\0\46\30\2\0\1\30" +
                    "\6\0\51\30\10\0\55\65\1\0\1\65\1\0\2\65" +
                    "\1\0\2\65\1\0\1\65\10\0\33\30\4\0\4\30" +
                    "\35\0\13\65\5\0\53\30\37\65\4\0\2\30\1\65" +
                    "\143\30\1\0\1\30\7\65\2\0\6\65\2\30\2\65" +
                    "\1\0\4\65\2\30\12\65\3\30\2\0\1\30\20\0" +
                    "\1\30\1\65\36\30\33\65\2\0\131\30\13\65\1\30" +
                    "\16\0\12\65\41\30\11\65\2\30\4\0\1\30\2\0" +
                    "\1\65\2\0\26\30\4\65\1\30\11\65\1\30\3\65" +
                    "\1\30\5\65\22\0\31\30\3\65\4\0\13\30\65\0" +
                    "\25\30\1\0\10\30\25\0\17\65\1\0\41\65\66\30" +
                    "\3\65\1\30\22\65\1\30\7\65\12\30\2\65\2\0" +
                    "\12\65\1\0\20\30\3\65\1\0\10\30\2\0\2\30" +
                    "\2\0\26\30\1\0\7\30\1\0\1\30\3\0\4\30" +
                    "\2\0\1\65\1\30\7\65\2\0\2\65\2\0\3\65" +
                    "\1\30\10\0\1\65\4\0\2\30\1\0\3\30\2\65" +
                    "\2\0\12\65\2\30\12\0\1\30\1\0\1\65\2\0" +
                    "\3\65\1\0\6\30\4\0\2\30\2\0\26\30\1\0" +
                    "\7\30\1\0\2\30\1\0\2\30\1\0\2\30\2\0" +
                    "\1\65\1\0\5\65\4\0\2\65\2\0\3\65\3\0" +
                    "\1\65\7\0\4\30\1\0\1\30\7\0\14\65\3\30" +
                    "\1\65\13\0\3\65\1\0\11\30\1\0\3\30\1\0" +
                    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0" +
                    "\1\65\1\30\10\65\1\0\3\65\1\0\3\65\2\0" +
                    "\1\30\17\0\2\30\2\65\2\0\12\65\11\0\1\30" +
                    "\6\65\1\0\3\65\1\0\10\30\2\0\2\30\2\0" +
                    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0" +
                    "\1\65\1\30\7\65\2\0\2\65\2\0\3\65\10\0" +
                    "\2\65\4\0\2\30\1\0\3\30\2\65\2\0\12\65" +
                    "\1\0\1\30\20\0\1\65\1\30\1\0\6\30\3\0" +
                    "\3\30\1\0\4\30\3\0\2\30\1\0\1\30\1\0" +
                    "\2\30\3\0\2\30\3\0\3\30\3\0\14\30\4\0" +
                    "\5\65\3\0\3\65\1\0\4\65\2\0\1\30\6\0" +
                    "\1\65\16\0\12\65\20\0\5\65\10\30\1\0\3\30" +
                    "\1\0\27\30\1\0\20\30\3\0\1\30\7\65\1\0" +
                    "\3\65\1\0\4\65\7\0\2\65\1\0\3\30\5\0" +
                    "\2\30\2\65\2\0\12\65\20\0\1\30\3\65\1\0" +
                    "\10\30\1\0\3\30\1\0\27\30\1\0\12\30\1\0" +
                    "\5\30\2\0\1\65\1\30\7\65\1\0\3\65\1\0" +
                    "\4\65\7\0\2\65\7\0\1\30\1\0\2\30\2\65" +
                    "\2\0\12\65\1\0\2\30\15\0\4\65\1\0\10\30" +
                    "\1\0\3\30\1\0\51\30\2\65\1\30\7\65\1\0" +
                    "\3\65\1\0\4\65\1\30\5\0\3\30\1\65\7\0" +
                    "\3\30\2\65\2\0\12\65\12\0\6\30\2\0\2\65" +
                    "\1\0\22\30\3\0\30\30\1\0\11\30\1\0\1\30" +
                    "\2\0\7\30\3\0\1\65\4\0\6\65\1\0\1\65" +
                    "\1\0\10\65\6\0\12\65\2\0\2\65\15\0\60\30" +
                    "\1\65\1\30\10\65\5\0\7\30\10\65\1\0\12\65" +
                    "\47\0\2\30\1\0\1\30\1\0\5\30\1\0\30\30" +
                    "\1\0\1\30\1\0\12\30\1\65\1\30\12\65\1\30" +
                    "\2\0\5\30\1\0\1\30\1\0\6\65\2\0\12\65" +
                    "\2\0\4\30\40\0\1\30\27\0\2\65\6\0\12\65" +
                    "\13\0\1\65\1\0\1\65\1\0\1\65\4\0\2\65" +
                    "\10\30\1\0\44\30\4\0\24\65\1\0\2\65\5\30" +
                    "\13\65\1\0\44\65\11\0\1\65\71\0\53\30\24\65" +
                    "\1\30\12\65\6\0\6\30\4\65\4\30\3\65\1\30" +
                    "\3\65\2\30\7\65\3\30\4\65\15\30\14\65\1\30" +
                    "\17\65\2\0\46\30\1\0\1\30\5\0\1\30\2\0" +
                    "\53\30\1\0\115\30\1\0\4\30\2\0\7\30\1\0" +
                    "\1\30\1\0\4\30\2\0\51\30\1\0\4\30\2\0" +
                    "\41\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0" +
                    "\4\30\2\0\17\30\1\0\71\30\1\0\4\30\2\0" +
                    "\103\30\2\0\3\65\11\0\11\65\16\0\20\30\20\0" +
                    "\126\30\2\0\6\30\3\0\u016c\30\2\0\21\30\1\1" +
                    "\32\30\5\0\113\30\3\0\13\30\7\0\15\30\1\0" +
                    "\4\30\3\65\13\0\22\30\3\65\13\0\22\30\2\65" +
                    "\14\0\15\30\1\0\3\30\1\0\2\65\14\0\64\30" +
                    "\40\65\3\0\1\30\4\0\1\30\1\65\2\0\12\65" +
                    "\41\0\3\65\2\0\12\65\6\0\131\30\7\0\51\30" +
                    "\1\65\1\30\5\0\106\30\12\0\37\30\1\0\14\65" +
                    "\4\0\14\65\12\0\12\65\36\30\2\0\5\30\13\0" +
                    "\54\30\4\0\32\30\6\0\13\65\45\0\27\30\5\65" +
                    "\4\0\65\30\12\65\1\0\35\65\2\0\13\65\6\0" +
                    "\12\65\15\0\1\30\10\0\16\65\102\0\5\65\57\30" +
                    "\21\65\7\30\4\0\12\65\21\0\11\65\14\0\3\65" +
                    "\36\30\15\65\2\30\12\65\54\30\16\65\14\0\44\30" +
                    "\24\65\10\0\12\65\3\0\3\30\12\65\44\30\2\0" +
                    "\11\30\7\0\53\30\2\0\3\30\20\0\3\65\1\0" +
                    "\25\65\4\30\1\65\6\30\1\65\2\30\3\65\1\30" +
                    "\5\0\300\30\72\65\1\0\5\65\26\30\2\0\6\30" +
                    "\2\0\46\30\2\0\6\30\2\0\10\30\1\0\1\30" +
                    "\1\0\1\30\1\0\1\30\1\0\37\30\2\0\65\30" +
                    "\1\0\7\30\1\0\1\30\3\0\3\30\1\0\7\30" +
                    "\3\0\4\30\2\0\6\30\4\0\15\30\5\0\3\30" +
                    "\1\0\7\30\3\0\13\1\35\0\2\3\5\0\1\1" +
                    "\17\0\2\65\4\0\1\66\1\67\15\0\1\65\12\0" +
                    "\1\1\21\0\1\30\15\0\1\30\20\0\15\30\63\0" +
                    "\15\65\4\0\1\65\3\0\14\65\21\0\1\30\4\0" +
                    "\1\30\2\0\12\30\1\0\1\30\2\0\6\30\6\0" +
                    "\1\30\1\0\1\30\1\0\1\30\1\0\20\30\2\0" +
                    "\4\30\5\0\5\30\4\0\1\30\21\0\51\30\u01d4\0" +
                    "\1\70\u018a\0\1\71\1\72\26\0\57\30\1\0\57\30" +
                    "\1\0\205\30\6\0\4\30\3\65\2\30\14\0\46\30" +
                    "\1\0\1\30\5\0\1\30\2\0\70\30\7\0\1\30" +
                    "\17\0\1\65\27\30\11\0\7\30\1\0\7\30\1\0" +
                    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0" +
                    "\7\30\1\0\7\30\1\0\40\65\1\1\4\0\3\30" +
                    "\31\0\11\30\6\65\1\0\5\30\2\0\5\30\4\0" +
                    "\126\30\2\0\2\65\2\0\3\30\1\0\132\30\1\0" +
                    "\4\30\5\0\53\30\1\0\136\30\21\0\33\30\65\0" +
                    "\306\30\112\0\360\30\20\0\215\30\103\0\56\30\2\0" +
                    "\15\30\3\0\20\30\12\65\2\30\24\0\57\30\1\65" +
                    "\4\0\12\65\1\0\37\30\2\65\120\30\2\65\45\0" +
                    "\11\30\2\0\147\30\2\0\65\30\2\0\5\30\60\0" +
                    "\13\30\1\65\3\30\1\65\4\30\1\65\27\30\5\65" +
                    "\30\0\64\30\14\0\2\65\62\30\22\65\12\0\12\65" +
                    "\6\0\22\65\6\30\3\0\1\30\1\0\2\30\13\65" +
                    "\34\30\10\65\2\0\27\30\15\65\14\0\35\30\3\0" +
                    "\4\65\57\30\16\65\16\0\1\30\12\65\6\0\5\30" +
                    "\1\65\12\30\12\65\5\30\1\0\51\30\16\65\11\0" +
                    "\3\30\1\65\10\30\2\65\2\0\12\65\6\0\27\30" +
                    "\3\0\1\30\3\65\62\30\1\65\1\30\3\65\2\30" +
                    "\2\65\5\30\2\65\1\30\1\65\1\30\30\0\3\30" +
                    "\2\0\13\30\5\65\2\0\3\30\2\65\12\0\6\30" +
                    "\2\0\6\30\2\0\6\30\11\0\7\30\1\0\7\30" +
                    "\1\0\53\30\1\0\14\30\10\0\163\30\10\65\1\0" +
                    "\2\65\2\0\12\65\6\0\244\30\14\0\27\30\4\0" +
                    "\61\30\4\0\u0100\73\156\30\2\0\152\30\46\0\7\30" +
                    "\14\0\5\30\5\0\1\30\1\65\12\30\1\0\15\30" +
                    "\1\0\5\30\1\0\1\30\1\0\2\30\1\0\2\30" +
                    "\1\0\154\30\41\0\213\30\6\0\332\30\22\0\100\30" +
                    "\2\0\66\30\50\0\12\30\6\0\20\65\20\0\20\65" +
                    "\3\0\2\65\30\0\3\65\41\0\1\30\1\0\1\30" +
                    "\3\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30" +
                    "\1\0\176\30\23\0\12\65\7\0\32\30\4\0\1\65" +
                    "\1\0\32\30\13\0\70\30\2\65\37\30\3\0\6\30" +
                    "\2\0\6\30\2\0\6\30\2\0\3\30\43\0\14\30" +
                    "\1\0\32\30\1\0\23\30\1\0\2\30\1\0\17\30" +
                    "\2\0\16\30\42\0\173\30\105\0\65\30\210\0\1\65" +
                    "\202\0\35\30\3\0\61\30\17\0\1\65\37\0\40\30" +
                    "\15\0\36\30\5\0\46\30\5\65\5\0\36\30\2\0" +
                    "\44\30\4\0\10\30\1\0\5\30\52\0\236\30\2\0" +
                    "\12\65\6\0\44\30\4\0\44\30\4\0\50\30\10\0" +
                    "\64\30\234\0\67\30\11\0\26\30\12\0\10\30\230\0" +
                    "\6\30\2\0\1\30\1\0\54\30\1\0\2\30\3\0" +
                    "\1\30\2\0\27\30\12\0\27\30\11\0\37\30\101\0" +
                    "\23\30\1\0\2\30\12\0\26\30\12\0\32\30\106\0" +
                    "\70\30\6\0\2\30\100\0\1\30\3\65\1\0\2\65" +
                    "\5\0\4\65\4\30\1\0\3\30\1\0\35\30\2\0" +
                    "\3\65\4\0\1\65\40\0\35\30\3\0\35\30\43\0" +
                    "\10\30\1\0\34\30\2\65\31\0\66\30\12\0\26\30" +
                    "\12\0\23\30\15\0\22\30\156\0\111\30\67\0\63\30" +
                    "\15\0\63\30\15\0\44\30\4\65\10\0\12\65\306\0" +
                    "\35\30\12\0\1\30\10\0\26\30\13\65\217\0\27\30" +
                    "\11\0\3\65\65\30\17\65\37\0\12\65\17\0\4\65" +
                    "\55\30\13\65\25\0\31\30\7\0\12\65\6\0\3\65" +
                    "\44\30\16\65\1\0\12\65\4\0\1\30\2\65\11\0" +
                    "\43\30\1\65\2\0\1\30\11\0\3\65\60\30\16\65" +
                    "\4\30\4\0\4\65\3\0\12\65\1\30\1\0\1\30" +
                    "\43\0\22\30\1\0\31\30\14\65\6\0\1\65\101\0" +
                    "\7\30\1\0\1\30\1\0\4\30\1\0\17\30\1\0" +
                    "\12\30\7\0\57\30\14\65\5\0\12\65\6\0\4\65" +
                    "\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30" +
                    "\1\0\2\30\1\0\5\30\1\0\2\65\1\30\7\65" +
                    "\2\0\2\65\2\0\3\65\2\0\1\30\6\0\1\65" +
                    "\5\0\5\30\2\65\2\0\7\65\3\0\5\65\213\0" +
                    "\65\30\22\65\4\30\5\0\12\65\4\0\1\65\1\30" +
                    "\40\0\60\30\24\65\2\30\1\0\1\30\10\0\12\65" +
                    "\246\0\57\30\7\65\2\0\11\65\27\0\4\30\2\65" +
                    "\42\0\60\30\21\65\3\0\1\30\13\0\12\65\46\0" +
                    "\53\30\15\65\1\30\7\0\12\65\66\0\33\30\2\0" +
                    "\17\65\4\0\12\65\306\0\54\30\17\65\145\0\100\30" +
                    "\12\65\25\0\1\30\240\0\10\30\2\0\47\30\7\65" +
                    "\2\0\7\65\1\30\1\0\1\30\1\65\33\0\1\30" +
                    "\12\65\50\30\7\65\1\30\4\65\10\0\1\65\10\0" +
                    "\1\30\13\65\56\30\20\65\3\0\1\30\42\0\71\30" +
                    "\7\0\11\30\1\0\45\30\10\65\1\0\10\65\1\30" +
                    "\17\0\12\65\30\0\36\30\2\0\26\65\1\0\16\65" +
                    "\111\0\7\30\1\0\2\30\1\0\46\30\6\65\3\0" +
                    "\1\65\1\0\2\65\1\0\7\65\1\30\1\65\10\0" +
                    "\12\65\6\0\6\30\1\0\2\30\1\0\40\30\5\65" +
                    "\1\0\2\65\1\0\5\65\1\30\7\0\12\65\u0136\0" +
                    "\23\30\4\65\11\0\232\30\146\0\157\30\21\0\304\30" +
                    "\274\0\57\30\321\0\107\30\271\0\71\30\7\0\37\30" +
                    "\1\0\12\65\146\0\36\30\2\0\5\65\13\0\60\30" +
                    "\7\65\11\0\4\30\14\0\12\65\11\0\25\30\5\0" +
                    "\23\30\260\0\100\30\200\0\113\30\4\0\1\65\1\30" +
                    "\67\65\7\0\4\65\15\30\100\0\2\30\1\0\1\30" +
                    "\34\0\370\30\10\0\363\30\15\0\37\30\61\0\3\30" +
                    "\21\0\4\30\10\0\u018c\30\4\0\153\30\5\0\15\30" +
                    "\3\0\11\30\7\0\12\30\3\0\2\65\306\0\5\65" +
                    "\3\0\6\65\10\0\10\65\2\0\7\65\36\0\4\65" +
                    "\224\0\3\65\273\0\125\30\1\0\107\30\1\0\2\30" +
                    "\2\0\1\30\2\0\2\30\2\0\4\30\1\0\14\30" +
                    "\1\0\1\30\1\0\7\30\1\0\101\30\1\0\4\30" +
                    "\2\0\10\30\1\0\7\30\1\0\34\30\1\0\4\30" +
                    "\1\0\5\30\1\0\1\30\3\0\7\30\1\0\u0154\30" +
                    "\2\0\31\30\1\0\31\30\1\0\37\30\1\0\31\30" +
                    "\1\0\37\30\1\0\31\30\1\0\37\30\1\0\31\30" +
                    "\1\0\37\30\1\0\31\30\1\0\10\30\2\0\151\65" +
                    "\4\0\62\65\10\0\1\65\16\0\1\65\26\0\5\65" +
                    "\1\0\17\65\120\0\7\65\1\0\21\65\2\0\7\65" +
                    "\1\0\2\65\1\0\5\65\325\0\55\30\3\0\7\65" +
                    "\7\30\2\0\12\65\4\0\1\30\u0171\0\54\30\16\65" +
                    "\6\0\305\30\13\0\7\65\51\0\104\30\7\65\1\30" +
                    "\4\0\12\65\246\0\4\30\1\0\33\30\1\0\2\30" +
                    "\1\0\1\30\2\0\1\30\1\0\12\30\1\0\4\30" +
                    "\1\0\1\30\1\0\1\30\6\0\1\30\4\0\1\30" +
                    "\1\0\1\30\1\0\1\30\1\0\3\30\1\0\2\30" +
                    "\1\0\1\30\2\0\1\30\1\0\1\30\1\0\1\30" +
                    "\1\0\1\30\1\0\1\30\1\0\2\30\1\0\1\30" +
                    "\2\0\4\30\1\0\7\30\1\0\4\30\1\0\4\30" +
                    "\1\0\1\30\1\0\12\30\1\0\21\30\5\0\3\30" +
                    "\1\0\5\30\1\0\21\30\104\0\327\30\51\0\65\30" +
                    "\13\0\336\30\2\0\u0182\30\16\0\u0131\30\37\0\36\30" +
                    "\342\0\360\65\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[29952];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1" +
                    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\1\1\26\1\27\1\1\13\24\1\30\1\31\1\32" +
                    "\1\33\1\34\1\35\1\36\1\37\1\40\1\0\1\41" +
                    "\2\0\1\42\1\43\1\0\1\44\1\0\1\45\1\46" +
                    "\5\24\1\47\11\24\1\41\1\0\4\24\1\47\11\24" +
                    "\1\50\1\24\1\51\2\24\1\47\11\24\1\52\1\24" +
                    "\1\51\1\24\1\53\2\24\1\54\4\24\1\55\1\56" +
                    "\1\57\1\24\1\54\5\24\1\52\13\24\1\60";

    private static int[] zzUnpackAction() {
        int[] result = new int[140];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\74\0\170\0\74\0\264\0\74\0\74\0\360" +
                    "\0\74\0\74\0\74\0\u012c\0\74\0\u0168\0\74\0\74" +
                    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u01a4\0\74" +
                    "\0\u01e0\0\74\0\74\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c" +
                    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\74" +
                    "\0\74\0\74\0\74\0\74\0\74\0\u04ec\0\74\0\74" +
                    "\0\264\0\74\0\u0528\0\360\0\74\0\74\0\u0564\0\74" +
                    "\0\u021c\0\74\0\u01a4\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690" +
                    "\0\u01a4\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834" +
                    "\0\u0870\0\u08ac\0\264\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8" +
                    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8" +
                    "\0\u0bf4\0\u0c30\0\74\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c" +
                    "\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c" +
                    "\0\u0f78\0\u01a4\0\u0fb4\0\u01a4\0\u0ff0\0\u01a4\0\u102c\0\u1068" +
                    "\0\u01a4\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u01a4\0\u01a4\0\u01a4" +
                    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338" +
                    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518" +
                    "\0\u1554\0\u1590\0\u15cc\0\u01a4";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[140];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20" +
                    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30" +
                    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
                    "\1\41\1\27\1\42\1\27\1\43\1\44\3\27\1\45" +
                    "\1\46\1\47\3\27\1\50\1\51\1\52\1\53\1\2" +
                    "\1\54\1\55\1\56\1\57\1\60\1\2\75\0\3\3" +
                    "\70\0\5\61\1\62\24\61\1\63\41\61\10\64\1\65" +
                    "\63\64\25\0\1\66\61\0\1\67\100\0\1\27\7\0" +
                    "\1\27\5\0\23\27\4\0\1\27\6\0\2\70\2\0" +
                    "\26\70\1\56\40\70\1\0\35\71\1\72\36\71\20\0" +
                    "\1\27\7\0\1\27\5\0\15\27\1\73\5\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\7\27\1\74" +
                    "\13\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\3\27\1\75\17\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\11\27\1\76\7\27\1\77\1\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\7\27\1\100" +
                    "\1\27\1\101\5\27\1\102\3\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\10\27\1\103\1\104\11\27" +
                    "\4\0\1\27\26\0\1\27\7\0\1\27\5\0\1\105" +
                    "\5\27\1\105\14\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\1\106\22\27\4\0\1\27\26\0\1\27" +
                    "\7\0\1\27\5\0\16\27\1\107\4\27\4\0\1\27" +
                    "\26\0\1\27\7\0\1\27\5\0\14\27\1\110\6\27" +
                    "\4\0\1\27\26\0\1\27\7\0\1\27\5\0\11\27" +
                    "\1\111\3\27\1\112\5\27\4\0\1\27\6\0\2\56" +
                    "\1\0\71\56\5\61\1\113\24\61\1\63\41\61\13\67" +
                    "\1\114\60\67\20\0\1\27\7\0\1\27\5\0\1\115" +
                    "\22\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\4\27\1\101\16\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\17\27\1\116\3\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\16\27\1\117\4\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\1\120\22\27" +
                    "\4\0\1\27\26\0\1\27\7\0\1\27\5\0\11\27" +
                    "\1\121\11\27\4\0\1\27\26\0\1\27\7\0\1\27" +
                    "\5\0\13\27\1\122\7\27\4\0\1\27\26\0\1\27" +
                    "\7\0\1\27\5\0\2\27\1\123\13\27\1\124\4\27" +
                    "\4\0\1\27\26\0\1\27\7\0\1\27\5\0\1\27" +
                    "\1\125\21\27\4\0\1\27\26\0\1\27\7\0\1\27" +
                    "\5\0\10\27\1\126\12\27\4\0\1\27\26\0\1\27" +
                    "\7\0\1\27\5\0\14\27\1\127\6\27\4\0\1\27" +
                    "\26\0\1\27\7\0\1\27\5\0\1\130\22\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\6\27\1\131" +
                    "\14\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\6\27\1\132\14\27\4\0\1\27\6\0\13\67\1\114" +
                    "\3\67\1\133\54\67\20\0\1\27\7\0\1\27\5\0" +
                    "\15\27\1\134\5\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\10\27\1\135\12\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\3\27\1\136\17\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\5\27\1\137" +
                    "\15\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\1\27\1\140\21\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\7\27\1\141\13\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\17\27\1\142\3\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\3\27\1\143" +
                    "\17\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\14\27\1\144\6\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\3\27\1\145\17\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\17\27\1\146\3\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\6\27\1\147" +
                    "\14\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\16\27\1\150\4\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\11\27\1\151\11\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\15\27\1\152\5\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\3\27\1\153" +
                    "\11\27\1\154\5\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\11\27\1\155\11\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\15\27\1\156\5\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\16\27\1\157" +
                    "\4\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\6\27\1\160\13\27\1\161\4\0\1\27\26\0\1\27" +
                    "\7\0\1\27\5\0\1\27\1\162\21\27\4\0\1\27" +
                    "\26\0\1\27\7\0\1\27\5\0\14\27\1\163\6\27" +
                    "\4\0\1\27\26\0\1\27\7\0\1\27\5\0\12\27" +
                    "\1\101\10\27\4\0\1\27\26\0\1\27\7\0\1\27" +
                    "\5\0\15\27\1\164\5\27\4\0\1\27\26\0\1\27" +
                    "\7\0\1\27\5\0\1\27\1\165\21\27\4\0\1\27" +
                    "\26\0\1\27\7\0\1\27\5\0\16\27\1\166\4\27" +
                    "\4\0\1\27\26\0\1\27\7\0\1\27\5\0\3\27" +
                    "\1\167\17\27\4\0\1\27\26\0\1\27\7\0\1\27" +
                    "\5\0\5\27\1\170\15\27\4\0\1\27\26\0\1\27" +
                    "\7\0\1\27\5\0\14\27\1\171\6\27\4\0\1\27" +
                    "\26\0\1\27\7\0\1\27\5\0\2\27\1\172\20\27" +
                    "\4\0\1\27\26\0\1\27\7\0\1\27\5\0\6\27" +
                    "\1\173\14\27\4\0\1\27\26\0\1\27\7\0\1\27" +
                    "\5\0\10\27\1\174\12\27\4\0\1\27\26\0\1\27" +
                    "\7\0\1\27\5\0\16\27\1\175\4\27\4\0\1\27" +
                    "\26\0\1\27\7\0\1\27\5\0\4\27\1\176\16\27" +
                    "\4\0\1\27\26\0\1\27\7\0\1\27\5\0\13\27" +
                    "\1\177\7\27\4\0\1\27\26\0\1\27\7\0\1\27" +
                    "\5\0\16\27\1\200\4\27\4\0\1\27\26\0\1\27" +
                    "\7\0\1\27\5\0\1\201\22\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\15\27\1\161\5\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\12\27\1\202" +
                    "\10\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\3\27\1\203\17\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\6\27\1\204\14\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\1\205\22\27\4\0\1\27" +
                    "\26\0\1\27\7\0\1\27\5\0\1\206\22\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\17\27\1\207" +
                    "\3\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\16\27\1\210\4\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\11\27\1\101\11\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\11\27\1\211\11\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\20\27\1\150" +
                    "\2\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\1\27\1\212\21\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\1\27\1\213\21\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\14\27\1\212\6\27\4\0" +
                    "\1\27\26\0\1\27\7\0\1\27\5\0\3\27\1\154" +
                    "\17\27\4\0\1\27\26\0\1\27\7\0\1\27\5\0" +
                    "\16\27\1\172\4\27\4\0\1\27\26\0\1\27\7\0" +
                    "\1\27\5\0\3\27\1\152\17\27\4\0\1\27\26\0" +
                    "\1\27\7\0\1\27\5\0\3\27\1\214\17\27\4\0" +
                    "\1\27\6\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[5640];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\1\1\1\11\1\1\2\11\1\1\3\11" +
                    "\1\1\1\11\1\1\10\11\1\1\1\11\1\1\2\11" +
                    "\14\1\6\11\1\1\2\11\1\0\1\11\2\0\2\11" +
                    "\1\0\1\11\1\0\1\11\21\1\1\0\16\1\1\11" +
                    "\61\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[140];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 49:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 50:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 51:
                        break;
                    case 4: {
                        return HASH;
                    }
                    // fall through
                    case 52:
                        break;
                    case 5: {
                        return DOLLAR;
                    }
                    // fall through
                    case 53:
                        break;
                    case 6: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 54:
                        break;
                    case 7: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 55:
                        break;
                    case 8: {
                        return COMMA;
                    }
                    // fall through
                    case 56:
                        break;
                    case 9: {
                        return HYPHEN;
                    }
                    // fall through
                    case 57:
                        break;
                    case 10: {
                        return DOT;
                    }
                    // fall through
                    case 58:
                        break;
                    case 11: {
                        return SLASH;
                    }
                    // fall through
                    case 59:
                        break;
                    case 12: {
                        return INTEGER;
                    }
                    // fall through
                    case 60:
                        break;
                    case 13: {
                        return COLON;
                    }
                    // fall through
                    case 61:
                        break;
                    case 14: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 62:
                        break;
                    case 15: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 63:
                        break;
                    case 16: {
                        return EQUAL;
                    }
                    // fall through
                    case 64:
                        break;
                    case 17: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 65:
                        break;
                    case 18: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 66:
                        break;
                    case 19: {
                        return AT;
                    }
                    // fall through
                    case 67:
                        break;
                    case 20: {
                        return SYMBOL;
                    }
                    // fall through
                    case 68:
                        break;
                    case 21: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 69:
                        break;
                    case 22: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 70:
                        break;
                    case 23: {
                        return OP_REMARK;
                    }
                    // fall through
                    case 71:
                        break;
                    case 24: {
                        return BRACE_L;
                    }
                    // fall through
                    case 72:
                        break;
                    case 25: {
                        return OP_OR;
                    }
                    // fall through
                    case 73:
                        break;
                    case 26: {
                        return BRACE_R;
                    }
                    // fall through
                    case 74:
                        break;
                    case 27: {
                        return OP_CONCAT;
                    }
                    // fall through
                    case 75:
                        break;
                    case 28: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 76:
                        break;
                    case 29: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 77:
                        break;
                    case 30: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 78:
                        break;
                    case 31: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 79:
                        break;
                    case 32: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 80:
                        break;
                    case 33: {
                        return TEXT_DOUBLE;
                    }
                    // fall through
                    case 81:
                        break;
                    case 34: {
                        return TEXT_SINGLE;
                    }
                    // fall through
                    case 82:
                        break;
                    case 35: {
                        return OP_TO;
                    }
                    // fall through
                    case 83:
                        break;
                    case 36: {
                        return ESCAPED;
                    }
                    // fall through
                    case 84:
                        break;
                    case 37: {
                        return SYMBOW_RAW;
                    }
                    // fall through
                    case 85:
                        break;
                    case 38: {
                        return KW_AS;
                    }
                    // fall through
                    case 86:
                        break;
                    case 39: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 87:
                        break;
                    case 40: {
                        return COMMENT_BLOCK;
                    }
                    // fall through
                    case 88:
                        break;
                    case 41: {
                        return KW_ENUMERATE;
                    }
                    // fall through
                    case 89:
                        break;
                    case 42: {
                        return KW_CLASS;
                    }
                    // fall through
                    case 90:
                        break;
                    case 43: {
                        return KW_FLAGS;
                    }
                    // fall through
                    case 91:
                        break;
                    case 44: {
                        return KW_IMPLY;
                    }
                    // fall through
                    case 92:
                        break;
                    case 45: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 93:
                        break;
                    case 46: {
                        return KW_UNITE;
                    }
                    // fall through
                    case 94:
                        break;
                    case 47: {
                        return KW_USING;
                    }
                    // fall through
                    case 95:
                        break;
                    case 48: {
                        return KW_NAMESPACE;
                    }
                    // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
