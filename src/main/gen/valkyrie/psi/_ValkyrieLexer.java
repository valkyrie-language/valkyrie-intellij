// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int TextCapture6 = 2;
    public static final int TextCapture3 = 4;
    public static final int TextCapture2 = 6;
    public static final int TextCapture1 = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0,  1,  1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\1\u2100\1\u2300" +
                    "\1\u2400\1\u2100\1\u2500\1\u2600\1\u2700\1\u2100\1\u2800\1\u2900" +
                    "\2\u2100\31\u0100\1\u2a00\121\u0100\1\u2b00\4\u0100\1\u2c00\1\u0100" +
                    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\53\u0100\1\u3300" +
                    "\41\u2100\1\u0100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900" +
                    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u0100\1\u4000" +
                    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u2100\1\u4700" +
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00" +
                    "\1\u5000\1\u5100\1\u5200\1\u2100\1\u5300\1\u5400\1\u5500\1\u2100" +
                    "\3\u0100\1\u5600\1\u5700\1\u5800\12\u2100\4\u0100\1\u5900\17\u2100" +
                    "\2\u0100\1\u5a00\41\u2100\2\u0100\1\u5b00\1\u5c00\2\u2100\1\u5d00" +
                    "\1\u5e00\27\u0100\1\u5f00\2\u0100\1\u6000\45\u2100\1\u0100\1\u6100" +
                    "\1\u6200\11\u2100\1\u6300\24\u2100\1\u6400\1\u6500\1\u2100\1\u6600" +
                    "\1\u6700\1\u6800\1\u6900\2\u2100\1\u6a00\5\u2100\1\u6b00\1\u6c00" +
                    "\1\u6d00\5\u2100\1\u6e00\1\u6f00\4\u2100\1\u7000\21\u2100\246\u0100" +
                    "\1\u7100\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500" +
                    "\14\u2100\2\u0100\1\u7600\u0b06\u2100\1\u7700\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\13\33" +
                    "\1\34\16\33\1\35\1\36\1\37\1\40\1\41\1\42" +
                    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52" +
                    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62" +
                    "\1\33\1\63\1\64\1\65\1\66\1\67\1\70\1\71" +
                    "\1\72\1\33\1\73\1\74\1\75\7\0\1\1\32\0" +
                    "\1\1\10\0\1\76\1\77\3\0\1\76\6\0\1\77" +
                    "\1\0\1\100\2\0\1\77\5\0\27\77\1\0\37\77" +
                    "\1\101\u01ca\77\4\0\14\77\16\0\5\77\7\0\1\77" +
                    "\1\0\1\77\21\0\160\100\5\77\1\0\2\77\3\0" +
                    "\3\77\1\0\1\77\6\0\1\77\1\100\3\77\1\0" +
                    "\1\77\1\0\24\77\1\0\123\77\1\0\213\77\1\0" +
                    "\5\100\2\0\246\77\1\0\46\77\2\0\1\77\6\0" +
                    "\51\77\10\0\55\100\1\0\1\100\1\0\2\100\1\0" +
                    "\2\100\1\0\1\100\10\0\33\77\4\0\4\77\35\0" +
                    "\13\100\5\0\53\77\37\100\4\0\2\77\1\100\143\77" +
                    "\1\0\1\77\7\100\2\0\6\100\2\77\2\100\1\0" +
                    "\4\100\2\77\12\100\3\77\2\0\1\77\20\0\1\77" +
                    "\1\100\36\77\33\100\2\0\131\77\13\100\1\77\16\0" +
                    "\12\100\41\77\11\100\2\77\4\0\1\77\2\0\1\100" +
                    "\2\0\26\77\4\100\1\77\11\100\1\77\3\100\1\77" +
                    "\5\100\22\0\31\77\3\100\4\0\13\77\65\0\25\77" +
                    "\1\0\10\77\25\0\17\100\1\0\41\100\66\77\3\100" +
                    "\1\77\22\100\1\77\7\100\12\77\2\100\2\0\12\100" +
                    "\1\0\20\77\3\100\1\0\10\77\2\0\2\77\2\0" +
                    "\26\77\1\0\7\77\1\0\1\77\3\0\4\77\2\0" +
                    "\1\100\1\77\7\100\2\0\2\100\2\0\3\100\1\77" +
                    "\10\0\1\100\4\0\2\77\1\0\3\77\2\100\2\0" +
                    "\12\100\2\77\12\0\1\77\1\0\1\100\2\0\3\100" +
                    "\1\0\6\77\4\0\2\77\2\0\26\77\1\0\7\77" +
                    "\1\0\2\77\1\0\2\77\1\0\2\77\2\0\1\100" +
                    "\1\0\5\100\4\0\2\100\2\0\3\100\3\0\1\100" +
                    "\7\0\4\77\1\0\1\77\7\0\14\100\3\77\1\100" +
                    "\13\0\3\100\1\0\11\77\1\0\3\77\1\0\26\77" +
                    "\1\0\7\77\1\0\2\77\1\0\5\77\2\0\1\100" +
                    "\1\77\10\100\1\0\3\100\1\0\3\100\2\0\1\77" +
                    "\17\0\2\77\2\100\2\0\12\100\11\0\1\77\6\100" +
                    "\1\0\3\100\1\0\10\77\2\0\2\77\2\0\26\77" +
                    "\1\0\7\77\1\0\2\77\1\0\5\77\2\0\1\100" +
                    "\1\77\7\100\2\0\2\100\2\0\3\100\10\0\2\100" +
                    "\4\0\2\77\1\0\3\77\2\100\2\0\12\100\1\0" +
                    "\1\77\20\0\1\100\1\77\1\0\6\77\3\0\3\77" +
                    "\1\0\4\77\3\0\2\77\1\0\1\77\1\0\2\77" +
                    "\3\0\2\77\3\0\3\77\3\0\14\77\4\0\5\100" +
                    "\3\0\3\100\1\0\4\100\2\0\1\77\6\0\1\100" +
                    "\16\0\12\100\20\0\5\100\10\77\1\0\3\77\1\0" +
                    "\27\77\1\0\20\77\3\0\1\77\7\100\1\0\3\100" +
                    "\1\0\4\100\7\0\2\100\1\0\3\77\5\0\2\77" +
                    "\2\100\2\0\12\100\20\0\1\77\3\100\1\0\10\77" +
                    "\1\0\3\77\1\0\27\77\1\0\12\77\1\0\5\77" +
                    "\2\0\1\100\1\77\7\100\1\0\3\100\1\0\4\100" +
                    "\7\0\2\100\7\0\1\77\1\0\2\77\2\100\2\0" +
                    "\12\100\1\0\2\77\15\0\4\100\1\0\10\77\1\0" +
                    "\3\77\1\0\51\77\2\100\1\77\7\100\1\0\3\100" +
                    "\1\0\4\100\1\77\5\0\3\77\1\100\7\0\3\77" +
                    "\2\100\2\0\12\100\12\0\6\77\2\0\2\100\1\0" +
                    "\22\77\3\0\30\77\1\0\11\77\1\0\1\77\2\0" +
                    "\7\77\3\0\1\100\4\0\6\100\1\0\1\100\1\0" +
                    "\10\100\6\0\12\100\2\0\2\100\15\0\60\77\1\100" +
                    "\1\77\10\100\5\0\7\77\10\100\1\0\12\100\47\0" +
                    "\2\77\1\0\1\77\1\0\5\77\1\0\30\77\1\0" +
                    "\1\77\1\0\12\77\1\100\1\77\12\100\1\77\2\0" +
                    "\5\77\1\0\1\77\1\0\6\100\2\0\12\100\2\0" +
                    "\4\77\40\0\1\77\27\0\2\100\6\0\12\100\13\0" +
                    "\1\100\1\0\1\100\1\0\1\100\4\0\2\100\10\77" +
                    "\1\0\44\77\4\0\24\100\1\0\2\100\5\77\13\100" +
                    "\1\0\44\100\11\0\1\100\71\0\53\77\24\100\1\77" +
                    "\12\100\6\0\6\77\4\100\4\77\3\100\1\77\3\100" +
                    "\2\77\7\100\3\77\4\100\15\77\14\100\1\77\17\100" +
                    "\2\0\46\77\1\0\1\77\5\0\1\77\2\0\53\77" +
                    "\1\0\115\77\1\0\4\77\2\0\7\77\1\0\1\77" +
                    "\1\0\4\77\2\0\51\77\1\0\4\77\2\0\41\77" +
                    "\1\0\4\77\2\0\7\77\1\0\1\77\1\0\4\77" +
                    "\2\0\17\77\1\0\71\77\1\0\4\77\2\0\103\77" +
                    "\2\0\3\100\11\0\11\100\16\0\20\77\20\0\126\77" +
                    "\2\0\6\77\3\0\u016c\77\2\0\21\77\1\1\32\77" +
                    "\5\0\113\77\3\0\13\77\7\0\15\77\1\0\4\77" +
                    "\3\100\13\0\22\77\3\100\13\0\22\77\2\100\14\0" +
                    "\15\77\1\0\3\77\1\0\2\100\14\0\64\77\40\100" +
                    "\3\0\1\77\4\0\1\77\1\100\2\0\12\100\41\0" +
                    "\3\100\2\0\12\100\6\0\131\77\7\0\51\77\1\100" +
                    "\1\77\5\0\106\77\12\0\37\77\1\0\14\100\4\0" +
                    "\14\100\12\0\12\100\36\77\2\0\5\77\13\0\54\77" +
                    "\4\0\32\77\6\0\13\100\45\0\27\77\5\100\4\0" +
                    "\65\77\12\100\1\0\35\100\2\0\13\100\6\0\12\100" +
                    "\15\0\1\77\10\0\16\100\102\0\5\100\57\77\21\100" +
                    "\7\77\4\0\12\100\21\0\11\100\14\0\3\100\36\77" +
                    "\15\100\2\77\12\100\54\77\16\100\14\0\44\77\24\100" +
                    "\10\0\12\100\3\0\3\77\12\100\44\77\2\0\11\77" +
                    "\7\0\53\77\2\0\3\77\20\0\3\100\1\0\25\100" +
                    "\4\77\1\100\6\77\1\100\2\77\3\100\1\77\5\0" +
                    "\300\77\72\100\1\0\5\100\26\77\2\0\6\77\2\0" +
                    "\46\77\2\0\6\77\2\0\10\77\1\0\1\77\1\0" +
                    "\1\77\1\0\1\77\1\0\37\77\2\0\65\77\1\0" +
                    "\7\77\1\0\1\77\3\0\3\77\1\0\7\77\3\0" +
                    "\4\77\2\0\6\77\4\0\15\77\5\0\3\77\1\0" +
                    "\7\77\3\0\13\1\35\0\2\1\5\0\1\1\17\0" +
                    "\2\100\3\0\1\102\1\103\1\104\13\0\1\102\1\0" +
                    "\1\100\12\0\1\1\21\0\1\77\15\0\1\77\20\0" +
                    "\15\77\63\0\15\100\4\0\1\100\3\0\14\100\21\0" +
                    "\1\77\1\105\3\0\1\77\1\0\1\106\12\77\1\0" +
                    "\1\77\2\0\6\77\6\0\1\77\1\0\1\77\1\0" +
                    "\1\77\1\0\20\77\2\0\4\77\5\0\5\77\4\0" +
                    "\1\77\21\0\51\77\111\0\1\107\62\0\1\110\17\0" +
                    "\1\102\40\0\1\111\1\112\50\0\1\113\3\0\1\114" +
                    "\1\115\4\0\1\116\1\117\154\0\1\120\1\121\203\0" +
                    "\1\122\u028a\0\1\123\1\124\14\0\1\125\214\0\1\126" +
                    "\1\127\1\130\1\131\366\0\1\114\1\115\201\0\57\77" +
                    "\1\0\57\77\1\0\205\77\6\0\4\77\3\100\2\77" +
                    "\14\0\46\77\1\0\1\77\5\0\1\77\2\0\70\77" +
                    "\7\0\1\77\17\0\1\100\27\77\11\0\7\77\1\0" +
                    "\7\77\1\0\7\77\1\0\7\77\1\0\7\77\1\0" +
                    "\7\77\1\0\7\77\1\0\7\77\1\0\40\100\77\0" +
                    "\1\132\300\0\1\1\4\0\3\77\31\0\11\77\6\100" +
                    "\1\0\5\77\2\0\5\77\4\0\126\77\2\0\2\100" +
                    "\2\0\3\77\1\0\132\77\1\0\4\77\5\0\53\77" +
                    "\1\0\136\77\21\0\33\77\65\0\306\77\112\0\360\77" +
                    "\20\0\215\77\103\0\56\77\2\0\15\77\3\0\20\77" +
                    "\12\100\2\77\24\0\57\77\1\100\4\0\12\100\1\0" +
                    "\37\77\2\100\120\77\2\100\45\0\11\77\2\0\147\77" +
                    "\2\0\65\77\2\0\5\77\60\0\13\77\1\100\3\77" +
                    "\1\100\4\77\1\100\27\77\5\100\30\0\64\77\14\0" +
                    "\2\100\62\77\22\100\12\0\12\100\6\0\22\100\6\77" +
                    "\3\0\1\77\1\0\2\77\13\100\34\77\10\100\2\0" +
                    "\27\77\15\100\14\0\35\77\3\0\4\100\57\77\16\100" +
                    "\16\0\1\77\12\100\6\0\5\77\1\100\12\77\12\100" +
                    "\5\77\1\0\51\77\16\100\11\0\3\77\1\100\10\77" +
                    "\2\100\2\0\12\100\6\0\27\77\3\0\1\77\3\100" +
                    "\62\77\1\100\1\77\3\100\2\77\2\100\5\77\2\100" +
                    "\1\77\1\100\1\77\30\0\3\77\2\0\13\77\5\100" +
                    "\2\0\3\77\2\100\12\0\6\77\2\0\6\77\2\0" +
                    "\6\77\11\0\7\77\1\0\7\77\1\0\53\77\1\0" +
                    "\14\77\10\0\163\77\10\100\1\0\2\100\2\0\12\100" +
                    "\6\0\244\77\14\0\27\77\4\0\61\77\4\0\156\77" +
                    "\2\0\152\77\46\0\7\77\14\0\5\77\5\0\1\77" +
                    "\1\100\12\77\1\0\15\77\1\0\5\77\1\0\1\77" +
                    "\1\0\2\77\1\0\2\77\1\0\154\77\41\0\213\77" +
                    "\6\0\332\77\22\0\100\77\2\0\66\77\50\0\12\77" +
                    "\6\0\20\100\20\0\20\100\3\0\2\100\30\0\3\100" +
                    "\41\0\1\77\1\0\1\77\3\0\1\77\1\0\1\77" +
                    "\1\0\1\77\1\0\1\77\1\0\176\77\23\0\12\100" +
                    "\7\0\32\77\4\0\1\100\1\0\32\77\13\0\70\77" +
                    "\2\100\37\77\3\0\6\77\2\0\6\77\2\0\6\77" +
                    "\2\0\3\77\43\0\14\77\1\0\32\77\1\0\23\77" +
                    "\1\0\2\77\1\0\17\77\2\0\16\77\42\0\173\77" +
                    "\105\0\65\77\210\0\1\100\202\0\35\77\3\0\61\77" +
                    "\17\0\1\100\37\0\40\77\15\0\36\77\5\0\46\77" +
                    "\5\100\5\0\36\77\2\0\44\77\4\0\10\77\1\0" +
                    "\5\77\52\0\236\77\2\0\12\100\6\0\44\77\4\0" +
                    "\44\77\4\0\50\77\10\0\64\77\234\0\67\77\11\0" +
                    "\26\77\12\0\10\77\230\0\6\77\2\0\1\77\1\0" +
                    "\54\77\1\0\2\77\3\0\1\77\2\0\27\77\12\0" +
                    "\27\77\11\0\37\77\101\0\23\77\1\0\2\77\12\0" +
                    "\26\77\12\0\32\77\106\0\70\77\6\0\2\77\100\0" +
                    "\1\77\3\100\1\0\2\100\5\0\4\100\4\77\1\0" +
                    "\3\77\1\0\35\77\2\0\3\100\4\0\1\100\40\0" +
                    "\35\77\3\0\35\77\43\0\10\77\1\0\34\77\2\100" +
                    "\31\0\66\77\12\0\26\77\12\0\23\77\15\0\22\77" +
                    "\156\0\111\77\67\0\63\77\15\0\63\77\15\0\44\77" +
                    "\4\100\10\0\12\100\306\0\35\77\12\0\1\77\10\0" +
                    "\26\77\13\100\217\0\27\77\11\0\3\100\65\77\17\100" +
                    "\37\0\12\100\17\0\4\100\55\77\13\100\25\0\31\77" +
                    "\7\0\12\100\6\0\3\100\44\77\16\100\1\0\12\100" +
                    "\4\0\1\77\2\100\11\0\43\77\1\100\2\0\1\77" +
                    "\11\0\3\100\60\77\16\100\4\77\4\0\4\100\3\0" +
                    "\12\100\1\77\1\0\1\77\43\0\22\77\1\0\31\77" +
                    "\14\100\6\0\1\100\101\0\7\77\1\0\1\77\1\0" +
                    "\4\77\1\0\17\77\1\0\12\77\7\0\57\77\14\100" +
                    "\5\0\12\100\6\0\4\100\1\0\10\77\2\0\2\77" +
                    "\2\0\26\77\1\0\7\77\1\0\2\77\1\0\5\77" +
                    "\1\0\2\100\1\77\7\100\2\0\2\100\2\0\3\100" +
                    "\2\0\1\77\6\0\1\100\5\0\5\77\2\100\2\0" +
                    "\7\100\3\0\5\100\213\0\65\77\22\100\4\77\5\0" +
                    "\12\100\4\0\1\100\1\77\40\0\60\77\24\100\2\77" +
                    "\1\0\1\77\10\0\12\100\246\0\57\77\7\100\2\0" +
                    "\11\100\27\0\4\77\2\100\42\0\60\77\21\100\3\0" +
                    "\1\77\13\0\12\100\46\0\53\77\15\100\1\77\7\0" +
                    "\12\100\66\0\33\77\2\0\17\100\4\0\12\100\306\0" +
                    "\54\77\17\100\145\0\100\77\12\100\25\0\1\77\240\0" +
                    "\10\77\2\0\47\77\7\100\2\0\7\100\1\77\1\0" +
                    "\1\77\1\100\33\0\1\77\12\100\50\77\7\100\1\77" +
                    "\4\100\10\0\1\100\10\0\1\77\13\100\56\77\20\100" +
                    "\3\0\1\77\42\0\71\77\7\0\11\77\1\0\45\77" +
                    "\10\100\1\0\10\100\1\77\17\0\12\100\30\0\36\77" +
                    "\2\0\26\100\1\0\16\100\111\0\7\77\1\0\2\77" +
                    "\1\0\46\77\6\100\3\0\1\100\1\0\2\100\1\0" +
                    "\7\100\1\77\1\100\10\0\12\100\6\0\6\77\1\0" +
                    "\2\77\1\0\40\77\5\100\1\0\2\100\1\0\5\100" +
                    "\1\77\7\0\12\100\u0136\0\23\77\4\100\11\0\232\77" +
                    "\146\0\157\77\21\0\304\77\274\0\57\77\321\0\107\77" +
                    "\271\0\71\77\7\0\37\77\1\0\12\100\146\0\36\77" +
                    "\2\0\5\100\13\0\60\77\7\100\11\0\4\77\14\0" +
                    "\12\100\11\0\25\77\5\0\23\77\260\0\100\77\200\0" +
                    "\113\77\4\0\1\100\1\77\67\100\7\0\4\100\15\77" +
                    "\100\0\2\77\1\0\1\77\34\0\370\77\10\0\363\77" +
                    "\15\0\37\77\61\0\3\77\21\0\4\77\10\0\u018c\77" +
                    "\4\0\153\77\5\0\15\77\3\0\11\77\7\0\12\77" +
                    "\3\0\2\100\306\0\5\100\3\0\6\100\10\0\10\100" +
                    "\2\0\7\100\36\0\4\100\224\0\3\100\273\0\125\77" +
                    "\1\0\107\77\1\0\2\77\2\0\1\77\2\0\2\77" +
                    "\2\0\4\77\1\0\14\77\1\0\1\77\1\0\7\77" +
                    "\1\0\101\77\1\0\4\77\2\0\10\77\1\0\7\77" +
                    "\1\0\34\77\1\0\4\77\1\0\5\77\1\0\1\77" +
                    "\3\0\7\77\1\0\u0154\77\2\0\31\77\1\0\31\77" +
                    "\1\0\37\77\1\0\31\77\1\0\37\77\1\0\31\77" +
                    "\1\0\37\77\1\0\31\77\1\0\37\77\1\0\31\77" +
                    "\1\0\10\77\2\0\151\100\4\0\62\100\10\0\1\100" +
                    "\16\0\1\100\26\0\5\100\1\0\17\100\120\0\7\100" +
                    "\1\0\21\100\2\0\7\100\1\0\2\100\1\0\5\100" +
                    "\325\0\55\77\3\0\7\100\7\77\2\0\12\100\4\0" +
                    "\1\77\u0171\0\54\77\16\100\6\0\305\77\13\0\7\100" +
                    "\51\0\104\77\7\100\1\77\4\0\12\100\246\0\4\77" +
                    "\1\0\33\77\1\0\2\77\1\0\1\77\2\0\1\77" +
                    "\1\0\12\77\1\0\4\77\1\0\1\77\1\0\1\77" +
                    "\6\0\1\77\4\0\1\77\1\0\1\77\1\0\1\77" +
                    "\1\0\3\77\1\0\2\77\1\0\1\77\2\0\1\77" +
                    "\1\0\1\77\1\0\1\77\1\0\1\77\1\0\1\77" +
                    "\1\0\2\77\1\0\1\77\2\0\4\77\1\0\7\77" +
                    "\1\0\4\77\1\0\4\77\1\0\1\77\1\0\12\77" +
                    "\1\0\21\77\5\0\3\77\1\0\5\77\1\0\21\77" +
                    "\104\0\327\77\51\0\65\77\13\0\336\77\2\0\u0182\77" +
                    "\16\0\u0131\77\37\0\36\77\342\0\360\100\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30720];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\7\2\21\1\22\1\23\1\24\1\25\1\26" +
                    "\1\27\1\30\1\31\1\32\1\1\1\33\1\34\1\1" +
                    "\22\31\1\35\1\36\1\37\1\40\1\41\1\42\1\43" +
                    "\1\44\1\45\1\46\1\47\1\22\1\50\1\51\1\52" +
                    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62" +
                    "\1\63\1\64\1\65\1\66\1\67\4\70\1\71\5\0" +
                    "\1\72\1\0\1\73\1\74\12\31\1\75\4\31\1\76" +
                    "\1\31\1\77\1\100\25\31\2\0\1\101\1\102\1\103" +
                    "\1\104\1\0\1\105\1\74\14\31\1\106\1\31\1\75" +
                    "\5\31\1\107\3\31\1\110\1\47\1\111\11\31\1\112" +
                    "\10\31\1\113\1\31\1\114\5\31\1\115\1\116\5\31" +
                    "\1\117\1\75\10\31\1\120\7\31\1\121\1\112\1\122" +
                    "\5\31\1\123\2\31\1\124\1\31\1\125\1\126\1\127" +
                    "\4\31\1\116\3\31\1\130\4\31\1\131\3\31\1\132" +
                    "\2\31\1\133\4\31\1\134\1\135\1\136\1\137\1\140" +
                    "\1\141\1\142\5\31\1\131\1\31\1\143\5\31\1\144" +
                    "\1\31\1\145\1\146\1\147\1\127\1\31\1\140\4\31" +
                    "\1\150\12\31\1\151\5\31\1\152\2\31\1\153\1\31" +
                    "\1\153\1\154";

    private static int[] zzUnpackAction() {
        int[] result = new int[321];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\133\0\266\0\u0111\0\u016c\0\u01c7\0\u0222\0\u027d" +
                    "\0\u02d8\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u0333\0\u01c7\0\u01c7" +
                    "\0\u01c7\0\u01c7\0\u01c7\0\u038e\0\u03e9\0\u0444\0\u01c7\0\u049f" +
                    "\0\u04fa\0\u01c7\0\u0555\0\u05b0\0\u060b\0\u01c7\0\u01c7\0\u0666" +
                    "\0\u01c7\0\u06c1\0\u01c7\0\u01c7\0\u071c\0\u0777\0\u07d2\0\u082d" +
                    "\0\u0888\0\u08e3\0\u093e\0\u0999\0\u09f4\0\u0a4f\0\u0aaa\0\u0b05" +
                    "\0\u0b60\0\u0bbb\0\u0c16\0\u0c71\0\u0ccc\0\u0d27\0\u0d82\0\u01c7" +
                    "\0\u01c7\0\u01c7\0\u0ddd\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u01c7" +
                    "\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u01c7" +
                    "\0\u01c7\0\u01c7\0\u01c7\0\u0e38\0\u01c7\0\u01c7\0\u01c7\0\u01c7" +
                    "\0\u01c7\0\u01c7\0\u01c7\0\u0e93\0\u0eee\0\u0f49\0\u0fa4\0\u01c7" +
                    "\0\u0fff\0\u105a\0\u10b5\0\u1110\0\u116b\0\u11c6\0\u071c\0\u01c7" +
                    "\0\u1221\0\u127c\0\u12d7\0\u1332\0\u138d\0\u13e8\0\u1443\0\u149e" +
                    "\0\u14f9\0\u1554\0\u15af\0\u0666\0\u160a\0\u1665\0\u16c0\0\u171b" +
                    "\0\u0666\0\u1776\0\u17d1\0\u0666\0\u182c\0\u1887\0\u18e2\0\u193d" +
                    "\0\u1998\0\u19f3\0\u1a4e\0\u1aa9\0\u1b04\0\u1b5f\0\u1bba\0\u1c15" +
                    "\0\u1c70\0\u1ccb\0\u1d26\0\u1d81\0\u1ddc\0\u1e37\0\u1e92\0\u1eed" +
                    "\0\u1f48\0\u1fa3\0\u1ffe\0\u01c7\0\u01c7\0\u01c7\0\u01c7\0\u2059" +
                    "\0\u01c7\0\u01c7\0\u20b4\0\u210f\0\u216a\0\u21c5\0\u2220\0\u227b" +
                    "\0\u22d6\0\u2331\0\u238c\0\u23e7\0\u2442\0\u249d\0\u24f8\0\u2553" +
                    "\0\u25ae\0\u2609\0\u2664\0\u26bf\0\u271a\0\u2775\0\u0666\0\u27d0" +
                    "\0\u282b\0\u2886\0\u0666\0\u0666\0\u0666\0\u28e1\0\u293c\0\u2997" +
                    "\0\u29f2\0\u2a4d\0\u2aa8\0\u2b03\0\u2b5e\0\u2bb9\0\u2c14\0\u2c6f" +
                    "\0\u2cca\0\u2d25\0\u2d80\0\u2ddb\0\u2e36\0\u2e91\0\u2eec\0\u01c7" +
                    "\0\u2f47\0\u0666\0\u2fa2\0\u2ffd\0\u3058\0\u30b3\0\u310e\0\u0666" +
                    "\0\u3169\0\u31c4\0\u321f\0\u327a\0\u32d5\0\u3330\0\u0666\0\u338b" +
                    "\0\u33e6\0\u3441\0\u349c\0\u34f7\0\u3552\0\u35ad\0\u3608\0\u3663" +
                    "\0\u0666\0\u36be\0\u3719\0\u3774\0\u37cf\0\u382a\0\u3885\0\u38e0" +
                    "\0\u0666\0\u01c7\0\u0666\0\u393b\0\u3996\0\u39f1\0\u3a4c\0\u3aa7" +
                    "\0\u0666\0\u3b02\0\u3b5d\0\u0666\0\u3bb8\0\u0666\0\u0666\0\u0666" +
                    "\0\u3c13\0\u3c6e\0\u3cc9\0\u3d24\0\u0666\0\u3d7f\0\u3dda\0\u3e35" +
                    "\0\u0666\0\u3e90\0\u3eeb\0\u3f46\0\u3fa1\0\u0666\0\u3ffc\0\u4057" +
                    "\0\u40b2\0\u0666\0\u410d\0\u4168\0\u0666\0\u41c3\0\u421e\0\u4279" +
                    "\0\u42d4\0\u0666\0\u0666\0\u0666\0\u0666\0\u432f\0\u0666\0\u0666" +
                    "\0\u438a\0\u43e5\0\u4440\0\u449b\0\u44f6\0\u4551\0\u45ac\0\u0666" +
                    "\0\u4607\0\u4662\0\u46bd\0\u4718\0\u4773\0\u0666\0\u47ce\0\u0666" +
                    "\0\u0666\0\u0666\0\u4829\0\u4884\0\u01c7\0\u48df\0\u493a\0\u4995" +
                    "\0\u49f0\0\u0666\0\u4a4b\0\u4aa6\0\u4b01\0\u4b5c\0\u4bb7\0\u4c12" +
                    "\0\u4c6d\0\u4cc8\0\u4d23\0\u4d7e\0\u0666\0\u4dd9\0\u4e34\0\u4e8f" +
                    "\0\u4eea\0\u4f45\0\u0666\0\u4fa0\0\u4ffb\0\u5056\0\u50b1\0\u01c7" +
                    "\0\u0666";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[321];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35" +
                    "\1\36\1\37\2\40\1\41\1\42\1\43\1\44\1\40" +
                    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
                    "\1\40\1\55\2\40\1\56\1\57\1\60\1\61\1\40" +
                    "\1\62\1\63\1\64\1\65\1\40\1\66\1\40\1\67" +
                    "\1\70\1\71\1\72\1\73\1\40\1\6\1\74\1\14" +
                    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104" +
                    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114" +
                    "\1\115\1\116\1\117\1\6\1\120\1\121\1\122\1\123" +
                    "\4\124\1\125\126\124\11\126\1\127\121\126\4\124\1\130" +
                    "\126\124\11\126\1\130\121\126\134\0\2\7\157\0\1\105" +
                    "\107\0\1\131\137\0\1\132\114\0\1\133\34\0\1\117" +
                    "\122\0\1\134\121\0\1\74\4\0\1\135\140\0\2\30" +
                    "\15\0\1\30\115\0\1\104\135\0\1\106\132\0\1\136" +
                    "\1\101\131\0\1\107\125\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\30\40\4\0\2\40\66\0\1\123\1\0" +
                    "\1\114\74\0\42\137\1\140\70\137\22\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\21\40\1\141\6\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\20\40\1\142\7\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\1\143\12\40\1\144\2\40" +
                    "\1\145\11\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\4\40\1\146\23\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\13\40" +
                    "\1\147\1\40\1\150\10\40\1\151\1\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\1\152" +
                    "\12\40\1\153\1\40\1\154\1\155\1\40\1\156\2\40" +
                    "\1\157\4\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\4\40\1\160\23\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\5\40" +
                    "\1\161\6\40\1\162\1\163\3\40\1\164\6\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\1\165\3\40\1\166\23\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\1\167\7\40\1\170" +
                    "\17\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\1\171\3\40\1\172\3\40\1\173\5\40" +
                    "\1\174\4\40\1\175\4\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\1\40\1\176\26\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\1\177\3\40\1\200\23\40\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\22\40\1\201" +
                    "\5\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\4\40\1\202\13\40\1\203\6\40\1\204" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\15\40\1\205\3\40\1\206\6\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\7\40" +
                    "\1\207\1\210\17\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\10\40\1\211\17\40\4\0" +
                    "\2\40\54\0\2\73\7\0\2\73\6\0\30\73\40\0" +
                    "\2\114\1\0\130\114\4\124\1\0\126\124\4\0\1\212" +
                    "\126\0\11\126\1\0\121\126\11\0\1\213\125\0\1\214" +
                    "\137\0\1\215\132\0\1\216\147\0\2\217\103\0\14\135" +
                    "\1\220\116\135\30\0\1\221\105\0\1\222\16\0\2\40" +
                    "\5\0\1\222\1\0\2\40\4\0\1\40\1\0\30\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\4\40\1\223\23\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\21\40\1\224\1\225" +
                    "\5\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\1\226\27\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\14\40\1\227\1\230" +
                    "\12\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\5\40\1\154\22\40\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\21\40\1\231" +
                    "\6\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\23\40\1\232\4\40\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\2\40\1\233" +
                    "\17\40\1\234\5\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\13\40\1\235\14\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\1\236\27\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\20\40\1\237\7\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\16\40" +
                    "\1\240\11\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\15\40\1\241\12\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\15\40" +
                    "\1\242\12\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\17\40\1\243\10\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\3\40" +
                    "\1\244\16\40\1\245\5\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\14\40\1\246\13\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\22\40\1\247\5\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\2\40\1\250\17\40" +
                    "\1\225\5\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\2\40\1\251\25\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\14\40" +
                    "\1\252\13\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\25\40\1\253\2\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\13\40" +
                    "\1\254\14\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\22\40\1\255\5\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\13\40" +
                    "\1\256\14\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\11\40\1\257\16\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\10\40" +
                    "\1\260\17\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\21\40\1\261\1\262\5\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\20\40\1\263\7\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\14\40\1\264\13\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\1\265\22\40\1\266\3\40\1\267\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\17\40\1\270" +
                    "\10\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\10\40\1\271\11\40\1\272\5\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\10\40\1\273\17\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\4\40\1\274\3\40\1\275" +
                    "\17\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\22\40\1\276\5\40\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\4\40\1\277" +
                    "\23\40\4\0\2\40\36\0\1\130\137\0\1\130\121\0" +
                    "\14\135\1\220\4\135\1\300\111\135\22\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\1\301\27\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\4\40" +
                    "\1\302\23\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\2\40\1\303\25\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\21\40" +
                    "\1\304\6\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\17\40\1\305\10\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\21\40" +
                    "\1\306\1\307\5\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\4\40\1\310\23\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\14\40\1\311\13\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\13\40\1\312\14\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\4\40\1\313\23\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\13\40\1\314\5\40\1\266" +
                    "\6\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\6\40\1\315\21\40\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\1\316\27\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\14\40\1\317\13\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\2\40\1\320\25\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\4\40\1\321\23\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\13\40\1\322\14\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\23\40\1\323\4\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\4\40\1\324\23\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\1\40\1\325\26\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\20\40\1\326\7\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\20\40\1\327\7\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\4\40\1\330\23\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\13\40\1\331\14\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\4\40\1\332\23\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\21\40\1\333\6\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\23\40\1\334\4\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\23\40\1\335\4\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\23\40\1\336\4\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\17\40\1\337\10\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\10\40\1\340\17\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\4\40\1\341\23\40\4\0\2\40\35\0\1\342" +
                    "\16\0\2\40\5\0\1\342\1\0\2\40\4\0\1\40" +
                    "\1\0\30\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\4\40\1\343\16\40\1\344\4\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\16\40\1\345\3\40\1\346\5\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\10\40" +
                    "\1\347\17\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\15\40\1\350\12\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\15\40" +
                    "\1\351\2\40\1\352\7\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\13\40\1\353\14\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\7\40\1\354\20\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\13\40\1\355\14\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\12\40\1\356\15\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\7\40\1\357\20\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\21\40\1\360\6\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\16\40\1\361\11\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\22\40\1\362\5\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\10\40\1\363\17\40" +
                    "\4\0\2\40\54\0\2\40\7\0\2\40\4\0\1\40" +
                    "\1\0\4\40\1\364\14\40\1\365\6\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\23\40" +
                    "\1\366\4\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\15\40\1\367\12\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\22\40" +
                    "\1\370\5\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\21\40\1\371\6\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\13\40" +
                    "\1\372\14\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\22\40\1\373\5\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\20\40" +
                    "\1\374\7\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\10\40\1\375\16\40\1\376\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\2\40\1\377\25\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\20\40\1\u0100\7\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\3\40\1\u0101\24\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\16\40\1\u0102\11\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\16\40\1\154\11\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\21\40\1\u0103\6\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\2\40\1\u0104\25\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\4\40\1\u0105\23\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\14\40\1\u0106\13\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\20\40\1\u0107\7\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\2\40\1\u0108\25\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\13\40\1\u0109\14\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\22\40\1\u010a\5\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\21\40\1\343\6\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\15\40\1\u010b\12\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\4\40\1\u010c\23\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\13\40\1\u010d\14\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\6\40\1\u010e\21\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\4\40\1\u010f\23\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\4\40\1\u010d\23\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\3\40\1\u0110\24\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\15\40\1\u0111\12\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\20\40\1\u0112\7\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\15\40\1\u0113\12\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\20\40\1\u0114\7\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\3\40\1\u0115\24\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\3\40\1\u0116\24\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\7\40\1\u0117\20\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\13\40\1\u0118\14\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\10\40\1\u0119\17\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\10\40\1\u011a\17\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\14\40\1\u011b\13\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\22\40\1\u011c\5\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\5\40\1\u011d\22\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\1\u011e\27\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\17\40\1\u011f\10\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\22\40" +
                    "\1\u0120\5\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\4\40\1\u0121\23\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\15\40" +
                    "\1\u0122\12\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\22\40\1\u0123\5\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\1\u0124" +
                    "\27\40\4\0\2\40\35\0\1\u0125\16\0\2\40\5\0" +
                    "\1\u0125\1\0\2\40\4\0\1\40\1\0\30\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\4\40\1\u0126\23\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\1\u0127\27\40\4\0\2\40" +
                    "\54\0\2\40\7\0\2\40\4\0\1\40\1\0\23\40" +
                    "\1\u0128\4\40\4\0\2\40\54\0\2\40\7\0\2\40" +
                    "\4\0\1\40\1\0\1\u0129\27\40\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\4\40\1\u012a" +
                    "\23\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\21\40\1\376\6\40\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\20\40\1\u012b" +
                    "\7\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\16\40\1\u012c\11\40\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\2\40\1\u0118" +
                    "\25\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\4\40\1\u012d\23\40\4\0\2\40\54\0" +
                    "\2\40\7\0\2\40\4\0\1\40\1\0\10\40\1\u012e" +
                    "\17\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\1\u012f\27\40\4\0\2\40\54\0\2\40" +
                    "\7\0\2\40\4\0\1\40\1\0\1\u0130\27\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\23\40\1\u0131\4\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\22\40\1\u0132\5\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\15\40\1\u0133\12\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\10\40\1\u0134\17\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\4\40\1\u0135\23\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\22\40\1\u0136\5\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\16\40\1\u0137\11\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\15\40\1\154\12\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\15\40\1\u0138\12\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\24\40\1\346\3\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\2\40\1\u0139\25\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\2\40\1\u013a\25\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\20\40\1\u0139\7\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\4\40\1\u0118\23\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\22\40\1\u013b\5\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\15\40\1\u013c\12\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\4\40\1\365\23\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\23\40\1\u013d\4\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\22\40\1\u0116\5\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\4\40\1\360\23\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\4\40\1\u013e\23\40\4\0\2\40\54\0\2\40\7\0" +
                    "\2\40\4\0\1\40\1\0\22\40\1\u0118\5\40\4\0" +
                    "\2\40\54\0\2\40\7\0\2\40\4\0\1\40\1\0" +
                    "\6\40\1\u013f\21\40\4\0\2\40\35\0\1\u0140\16\0" +
                    "\2\40\5\0\1\u0140\1\0\2\40\4\0\1\40\1\0" +
                    "\30\40\4\0\2\40\54\0\2\40\7\0\2\40\4\0" +
                    "\1\40\1\0\7\40\1\u0141\20\40\4\0\2\40\32\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[20748];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\1\11\3\1\4\11\1\1\5\11\3\1\1\11" +
                    "\2\1\1\11\3\1\2\11\1\1\1\11\1\1\2\11" +
                    "\23\1\3\11\1\1\20\11\1\1\7\11\4\1\1\11" +
                    "\5\0\1\1\1\0\1\11\51\1\2\0\4\11\1\0" +
                    "\2\11\55\1\1\11\41\1\1\11\102\1\1\11\32\1" +
                    "\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[321];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 109:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 110:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 111:
                        break;
                    case 4: {
                        yybegin(TextCapture2);
                        return STRING_L;
                    }
                    // fall through
                    case 112:
                        break;
                    case 5: {
                        return HASH;
                    }
                    // fall through
                    case 113:
                        break;
                    case 6: {
                        return DOLLAR;
                    }
                    // fall through
                    case 114:
                        break;
                    case 7: {
                        return OP_DIV;
                    }
                    // fall through
                    case 115:
                        break;
                    case 8: {
                        return OP_AND;
                    }
                    // fall through
                    case 116:
                        break;
                    case 9: {
                        yybegin(TextCapture1);
                        return STRING_L;
                    }
                    // fall through
                    case 117:
                        break;
                    case 10: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 118:
                        break;
                    case 11: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 119:
                        break;
                    case 12: {
                        return STAR;
                    }
                    // fall through
                    case 120:
                        break;
                    case 13: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 121:
                        break;
                    case 14: {
                        return COMMA;
                    }
                    // fall through
                    case 122:
                        break;
                    case 15: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 123:
                        break;
                    case 16: {
                        return DOT;
                    }
                    // fall through
                    case 124:
                        break;
                    case 17: {
                        return INTEGER;
                    }
                    // fall through
                    case 125:
                        break;
                    case 18: {
                        return COLON;
                    }
                    // fall through
                    case 126:
                        break;
                    case 19: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 127:
                        break;
                    case 20: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 128:
                        break;
                    case 21: {
                        return EQUAL;
                    }
                    // fall through
                    case 129:
                        break;
                    case 22: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 130:
                        break;
                    case 23: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 131:
                        break;
                    case 24: {
                        return AT;
                    }
                    // fall through
                    case 132:
                        break;
                    case 25: {
                        return SYMBOL;
                    }
                    // fall through
                    case 133:
                        break;
                    case 26: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 134:
                        break;
                    case 27: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 135:
                        break;
                    case 28: {
                        return OP_POW;
                    }
                    // fall through
                    case 136:
                        break;
                    case 29: {
                        return BRACE_L;
                    }
                    // fall through
                    case 137:
                        break;
                    case 30: {
                        return OP_OR;
                    }
                    // fall through
                    case 138:
                        break;
                    case 31: {
                        return BRACE_R;
                    }
                    // fall through
                    case 139:
                        break;
                    case 32: {
                        return COLOR;
            }
          // fall through
                    case 140:
                        break;
                    case 33: {
                        return OP_DIV_REM;
                    }
                    // fall through
                    case 141:
                        break;
                    case 34: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 142:
                        break;
                    case 35: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 143:
                        break;
                    case 36: {
                        return OP_CELSIUS;
                    }
                    // fall through
                    case 144:
                        break;
                    case 37: {
                        return OP_FAHRENHEIT;
                    }
                    // fall through
                    case 145:
                        break;
                    case 38: {
                        return OP_ARROW2;
                    }
                    // fall through
                    case 146:
                        break;
                    case 39: {
                        return KW_NIL;
                    }
                    // fall through
                    case 147:
                        break;
                    case 40: {
                        return PROPORTION;
                    }
                    // fall through
                    case 148:
                        break;
                    case 41: {
                        return OP_NE;
                    }
                    // fall through
                    case 149:
                        break;
                    case 42: {
                        return OP_LEQ;
                    }
                    // fall through
                    case 150:
                        break;
                    case 43: {
                        return OP_GEQ;
                    }
                    // fall through
                    case 151:
                        break;
                    case 44: {
                        return OP_LL;
                    }
                    // fall through
                    case 152:
                        break;
                    case 45: {
                        return OP_GG;
                    }
                    // fall through
                    case 153:
                        break;
                    case 46: {
                        return OP_LLL;
                    }
                    // fall through
                    case 154:
                        break;
                    case 47: {
                        return OP_GGG;
                    }
                    // fall through
                    case 155:
                        break;
                    case 48: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 156:
                        break;
                    case 49: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 157:
                        break;
                    case 50: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 158:
                        break;
                    case 51: {
                        return OP_ARROW1;
                    }
                    // fall through
                    case 159:
                        break;
                    case 52: {
                        return DOMAIN_R;
                    }
                    // fall through
                    case 160:
                        break;
                    case 53: {
                        return BUILDER_L;
                    }
                    // fall through
                    case 161:
                        break;
                    case 54: {
                        return BUILDER_R;
                    }
                    // fall through
                    case 162:
                        break;
                    case 55: {
                        return OP_L10N;
                    }
                    // fall through
                    case 163:
                        break;
                    case 56: {
                        return STRING_TEXT;
                    }
                    // fall through
                    case 164:
                        break;
                    case 57: {
                        yybegin(YYINITIAL);
                        return STRING_R;
                    }
                    // fall through
                    case 165:
                        break;
                    case 58: {
                        return OP_EE;
                    }
                    // fall through
                    case 166:
                        break;
                    case 59: {
                        return SYMBOW_RAW;
                    }
                    // fall through
                    case 167:
                        break;
                    case 60: {
                        return KW_AS;
                    }
                    // fall through
                    case 168:
                        break;
                    case 61: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 169:
                        break;
                    case 62: {
                        return KW_IF;
                    }
                    // fall through
                    case 170:
                        break;
                    case 63: {
                        return KW_IN;
                    }
                    // fall through
                    case 171:
                        break;
                    case 64: {
                        return KW_IS;
                    }
                    // fall through
                    case 172:
                        break;
                    case 65: {
                        yybegin(TextCapture6);
                        return STRING_L;
                    }
                    // fall through
          case 173: break;
                    case 66: {
                        yybegin(TextCapture3);
                        return STRING_L;
                    }
                    // fall through
                    case 174:
                        break;
                    case 67: {
                        return DOMAIN_L;
                    }
                    // fall through
                    case 175:
                        break;
                    case 68: {
                        return OP_UNTIL;
            }
          // fall through
                    case 176:
                        break;
                    case 69: {
                        return OP_ARROW3;
            }
          // fall through
                    case 177:
                        break;
                    case 70: {
                        return KW_FOR;
                    }
                    // fall through
                    case 178:
                        break;
                    case 71: {
                        return KW_LET;
                    }
          // fall through
                    case 179:
                        break;
                    case 72: {
                        return KW_NEW;
                    }
                    // fall through
                    case 180:
                        break;
                    case 73: {
                        return KW_NOT;
                    }
                    // fall through
                    case 181:
                        break;
                    case 74: {
                        return KW_TRY;
                    }
                    // fall through
                    case 182:
                        break;
                    case 75: {
                        return COMMENT_BLOCK;
            }
          // fall through
                    case 183:
                        break;
                    case 76: {
                        return KW_CASE;
            }
          // fall through
                    case 184:
                        break;
                    case 77: {
                        return KW_ELSE;
            }
          // fall through
                    case 185:
                        break;
                    case 78: {
                        return KW_ENUMERATE;
                    }
          // fall through
                    case 186:
                        break;
                    case 79: {
                        return KW_FROM;
            }
          // fall through
                    case 187:
                        break;
                    case 80: {
                        return KW_NULL;
            }
          // fall through
                    case 188:
                        break;
                    case 81: {
                        return KW_BOOLEAN;
                    }
                    // fall through
                    case 189:
                        break;
                    case 82: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 190:
                        break;
                    case 83: {
                        return KW_WHEN;
                    }
                    // fall through
                    case 191:
                        break;
                    case 84: {
                        return KW_WITH;
                    }
                    // fall through
                    case 192:
                        break;
                    case 85: {
                        return KW_BREAK;
                    }
                    // fall through
                    case 193:
                        break;
                    case 86: {
                        return KW_MATCH;
                    }
                    // fall through
                    case 194:
                        break;
                    case 87: {
                        return KW_CLASS;
                    }
                    // fall through
                    case 195:
                        break;
                    case 88: {
                        return KW_FLAGS;
            }
          // fall through
                    case 196:
                        break;
                    case 89: {
                        return KW_IMPLY;
                    }
                    // fall through
                    case 197:
                        break;
                    case 90: {
                        return KW_MACRO;
                    }
                    // fall through
                    case 198:
                        break;
                    case 91: {
                        return KW_RAISE;
                    }
                    // fall through
                    case 199:
                        break;
                    case 92: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 200:
                        break;
                    case 93: {
                        return KW_UNION;
                    }
                    // fall through
                    case 201:
                        break;
                    case 94: {
                        return KW_UNITE;
                    }
                    // fall through
                    case 202:
                        break;
                    case 95: {
                        return KW_WHILE;
                    }
                    // fall through
                    case 203:
                        break;
                    case 96: {
                        return KW_USING;
                    }
                    // fall through
                    case 204:
                        break;
                    case 97: {
                        return KW_WHERE;
                    }
                    // fall through
                    case 205:
                        break;
                    case 98: {
                        return KW_YIELD;
                    }
                    // fall through
                    case 206:
                        break;
                    case 99: {
                        return KW_TEMPLATE;
                    }
                    // fall through
                    case 207:
                        break;
                    case 100: {
                        return KW_LAMBDA;
                    }
                    // fall through
                    case 208:
                        break;
                    case 101: {
                        return KW_OBJECT;
                    }
                    // fall through
                    case 209:
                        break;
                    case 102:
            { return KW_RESUME;
            }
          // fall through
                    case 210:
                        break;
                    case 103:
            { return KW_RETURN;
            }
          // fall through
                    case 211:
                        break;
                    case 104:
            { return KW_EXCLUDE;
            }
          // fall through
                    case 212:
                        break;
                    case 105:
            { return KW_CONTINUE;
            }
          // fall through
                    case 213:
                        break;
                    case 106:
            { return KW_COMPONENT;
            }
          // fall through
                    case 214:
                        break;
                    case 107:
            { return KW_NAMESPACE;
            }
          // fall through
                    case 215: break;
          case 108:
            { return KW_THROUGH;
            }
          // fall through
          case 216: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
