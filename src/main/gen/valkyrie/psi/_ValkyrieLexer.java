// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;
import java.util.LinkedList;

public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CommentBlock = 2;
  public static final int TextCapture6 = 4;
  public static final int TextCapture3 = 6;
  public static final int TextCapture2 = 8;
  public static final int TextCapture1 = 10;
  public static final int AfterNumber = 12;
  public static final int AfterNumberBase = 14;
  public static final int AfterNumberExp = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\1\u2100\1\u2300"+
    "\1\u2400\1\u2100\1\u2500\1\u2600\1\u2700\1\u2100\1\u2800\1\u2900"+
    "\2\u2100\31\u0100\1\u2a00\121\u0100\1\u2b00\4\u0100\1\u2c00\1\u0100"+
    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\53\u0100\1\u3300"+
    "\10\u3400\31\u2100\1\u0100\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u0100"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u2100"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00"+
    "\1\u5000\1\u5100\1\u5200\1\u5300\1\u2100\1\u5400\1\u5500\1\u5600"+
    "\1\u2100\3\u0100\1\u5700\1\u5800\1\u5900\12\u2100\4\u0100\1\u5a00"+
    "\17\u2100\2\u0100\1\u5b00\41\u2100\2\u0100\1\u5c00\1\u5d00\2\u2100"+
    "\1\u5e00\1\u5f00\27\u0100\1\u6000\2\u0100\1\u6100\45\u2100\1\u0100"+
    "\1\u6200\1\u6300\11\u2100\1\u6400\24\u2100\1\u6500\1\u6600\1\u2100"+
    "\1\u6700\1\u6800\1\u6900\1\u6a00\2\u2100\1\u6b00\5\u2100\1\u6c00"+
    "\1\u6d00\1\u6e00\5\u2100\1\u6f00\1\u7000\4\u2100\1\u7100\21\u2100"+
    "\246\u0100\1\u7200\20\u0100\1\u7300\1\u7400\25\u0100\1\u7500\34\u0100"+
    "\1\u7600\14\u2100\2\u0100\1\u7700\u0b06\u2100\1\u7800\u02fe\u2100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\13\32\1\33"+
    "\1\32\1\34\14\32\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\32\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\32\1\73\1\74\1\75\1\76\6\0"+
    "\1\1\32\0\1\1\10\0\1\77\1\100\1\0\1\101"+
    "\1\0\1\77\6\0\1\100\1\102\1\103\2\0\1\100"+
    "\5\0\27\100\1\104\37\100\1\105\u01ca\100\4\0\14\100"+
    "\16\0\5\100\7\0\1\100\1\0\1\100\21\0\160\103"+
    "\5\100\1\0\2\100\3\0\3\100\1\0\1\100\6\0"+
    "\1\100\1\103\3\100\1\0\1\100\1\0\24\100\1\0"+
    "\123\100\1\0\213\100\1\0\5\103\2\0\246\100\1\0"+
    "\46\100\2\0\1\100\6\0\51\100\10\0\55\103\1\0"+
    "\1\103\1\0\2\103\1\0\2\103\1\0\1\103\10\0"+
    "\33\100\4\0\4\100\35\0\13\103\5\0\53\100\37\103"+
    "\4\0\2\100\1\103\143\100\1\0\1\100\7\103\2\0"+
    "\6\103\2\100\2\103\1\0\4\103\2\100\12\103\3\100"+
    "\2\0\1\100\20\0\1\100\1\103\36\100\33\103\2\0"+
    "\131\100\13\103\1\100\16\0\12\103\41\100\11\103\2\100"+
    "\4\0\1\100\2\0\1\103\2\0\26\100\4\103\1\100"+
    "\11\103\1\100\3\103\1\100\5\103\22\0\31\100\3\103"+
    "\4\0\13\100\65\0\25\100\1\0\10\100\25\0\17\103"+
    "\1\0\41\103\66\100\3\103\1\100\22\103\1\100\7\103"+
    "\12\100\2\103\2\0\12\103\1\0\20\100\3\103\1\0"+
    "\10\100\2\0\2\100\2\0\26\100\1\0\7\100\1\0"+
    "\1\100\3\0\4\100\2\0\1\103\1\100\7\103\2\0"+
    "\2\103\2\0\3\103\1\100\10\0\1\103\4\0\2\100"+
    "\1\0\3\100\2\103\2\0\12\103\2\100\12\0\1\100"+
    "\1\0\1\103\2\0\3\103\1\0\6\100\4\0\2\100"+
    "\2\0\26\100\1\0\7\100\1\0\2\100\1\0\2\100"+
    "\1\0\2\100\2\0\1\103\1\0\5\103\4\0\2\103"+
    "\2\0\3\103\3\0\1\103\7\0\4\100\1\0\1\100"+
    "\7\0\14\103\3\100\1\103\13\0\3\103\1\0\11\100"+
    "\1\0\3\100\1\0\26\100\1\0\7\100\1\0\2\100"+
    "\1\0\5\100\2\0\1\103\1\100\10\103\1\0\3\103"+
    "\1\0\3\103\2\0\1\100\17\0\2\100\2\103\2\0"+
    "\12\103\11\0\1\100\6\103\1\0\3\103\1\0\10\100"+
    "\2\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100"+
    "\1\0\5\100\2\0\1\103\1\100\7\103\2\0\2\103"+
    "\2\0\3\103\10\0\2\103\4\0\2\100\1\0\3\100"+
    "\2\103\2\0\12\103\1\0\1\100\20\0\1\103\1\100"+
    "\1\0\6\100\3\0\3\100\1\0\4\100\3\0\2\100"+
    "\1\0\1\100\1\0\2\100\3\0\2\100\3\0\3\100"+
    "\3\0\14\100\4\0\5\103\3\0\3\103\1\0\4\103"+
    "\2\0\1\100\6\0\1\103\16\0\12\103\20\0\5\103"+
    "\10\100\1\0\3\100\1\0\27\100\1\0\20\100\3\0"+
    "\1\100\7\103\1\0\3\103\1\0\4\103\7\0\2\103"+
    "\1\0\3\100\5\0\2\100\2\103\2\0\12\103\20\0"+
    "\1\100\3\103\1\0\10\100\1\0\3\100\1\0\27\100"+
    "\1\0\12\100\1\0\5\100\2\0\1\103\1\100\7\103"+
    "\1\0\3\103\1\0\4\103\7\0\2\103\7\0\1\100"+
    "\1\0\2\100\2\103\2\0\12\103\1\0\2\100\15\0"+
    "\4\103\1\0\10\100\1\0\3\100\1\0\51\100\2\103"+
    "\1\100\7\103\1\0\3\103\1\0\4\103\1\100\5\0"+
    "\3\100\1\103\7\0\3\100\2\103\2\0\12\103\12\0"+
    "\6\100\2\0\2\103\1\0\22\100\3\0\30\100\1\0"+
    "\11\100\1\0\1\100\2\0\7\100\3\0\1\103\4\0"+
    "\6\103\1\0\1\103\1\0\10\103\6\0\12\103\2\0"+
    "\2\103\15\0\60\100\1\103\1\100\10\103\5\0\7\100"+
    "\10\103\1\0\12\103\47\0\2\100\1\0\1\100\1\0"+
    "\5\100\1\0\30\100\1\0\1\100\1\0\12\100\1\103"+
    "\1\100\12\103\1\100\2\0\5\100\1\0\1\100\1\0"+
    "\6\103\2\0\12\103\2\0\4\100\40\0\1\100\27\0"+
    "\2\103\6\0\12\103\13\0\1\103\1\0\1\103\1\0"+
    "\1\103\4\0\2\103\10\100\1\0\44\100\4\0\24\103"+
    "\1\0\2\103\5\100\13\103\1\0\44\103\11\0\1\103"+
    "\71\0\53\100\24\103\1\100\12\103\6\0\6\100\4\103"+
    "\4\100\3\103\1\100\3\103\2\100\7\103\3\100\4\103"+
    "\15\100\14\103\1\100\17\103\2\0\46\100\1\0\1\100"+
    "\5\0\1\100\2\0\53\100\1\0\115\100\1\0\4\100"+
    "\2\0\7\100\1\0\1\100\1\0\4\100\2\0\51\100"+
    "\1\0\4\100\2\0\41\100\1\0\4\100\2\0\7\100"+
    "\1\0\1\100\1\0\4\100\2\0\17\100\1\0\71\100"+
    "\1\0\4\100\2\0\103\100\2\0\3\103\11\0\11\103"+
    "\16\0\20\100\20\0\126\100\2\0\6\100\3\0\u016c\100"+
    "\2\0\21\100\1\1\32\100\5\0\113\100\3\0\13\100"+
    "\7\0\15\100\1\0\4\100\3\103\13\0\22\100\3\103"+
    "\13\0\22\100\2\103\14\0\15\100\1\0\3\100\1\0"+
    "\2\103\14\0\64\100\40\103\3\0\1\100\4\0\1\100"+
    "\1\103\2\0\12\103\41\0\3\103\2\0\12\103\6\0"+
    "\131\100\7\0\51\100\1\103\1\100\5\0\106\100\12\0"+
    "\37\100\1\0\14\103\4\0\14\103\12\0\12\103\36\100"+
    "\2\0\5\100\13\0\54\100\4\0\32\100\6\0\13\103"+
    "\45\0\27\100\5\103\4\0\65\100\12\103\1\0\35\103"+
    "\2\0\13\103\6\0\12\103\15\0\1\100\10\0\16\103"+
    "\102\0\5\103\57\100\21\103\7\100\4\0\12\103\21\0"+
    "\11\103\14\0\3\103\36\100\15\103\2\100\12\103\54\100"+
    "\16\103\14\0\44\100\24\103\10\0\12\103\3\0\3\100"+
    "\12\103\44\100\2\0\11\100\7\0\53\100\2\0\3\100"+
    "\20\0\3\103\1\0\25\103\4\100\1\103\6\100\1\103"+
    "\2\100\3\103\1\100\5\0\300\100\72\103\1\0\5\103"+
    "\26\100\2\0\6\100\2\0\46\100\2\0\6\100\2\0"+
    "\10\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0"+
    "\37\100\2\0\65\100\1\0\7\100\1\0\1\100\3\0"+
    "\3\100\1\0\7\100\3\0\4\100\2\0\6\100\4\0"+
    "\15\100\5\0\3\100\1\0\7\100\3\0\13\1\32\0"+
    "\1\106\1\107\1\0\2\1\5\0\1\1\13\0\1\110"+
    "\3\0\2\103\1\0\1\111\1\0\1\112\1\113\1\114"+
    "\4\0\1\115\5\0\1\116\1\117\1\0\1\103\7\0"+
    "\1\120\2\0\1\1\21\0\1\100\15\0\1\100\20\0"+
    "\15\100\63\0\15\103\4\0\1\103\3\0\14\103\21\0"+
    "\1\100\1\121\3\0\1\100\1\0\1\122\12\100\1\0"+
    "\1\100\2\0\6\100\6\0\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\20\100\2\0\4\100\5\0\5\100\4\0"+
    "\1\100\21\0\51\100\7\0\1\123\36\0\1\124\42\0"+
    "\1\125\41\0\1\126\20\0\1\127\17\0\1\112\4\0"+
    "\1\130\1\131\1\132\12\0\1\133\1\134\15\0\1\23"+
    "\1\135\50\0\1\136\3\0\1\137\1\140\4\0\1\141"+
    "\1\142\117\0\1\143\1\144\1\145\32\0\1\146\1\147"+
    "\56\0\1\150\1\151\1\152\1\153\121\0\1\5\u0203\0"+
    "\1\102\206\0\1\154\1\155\14\0\1\156\214\0\1\157"+
    "\1\160\1\161\1\162\256\0\1\126\51\0\1\163\35\0"+
    "\1\137\1\140\201\0\57\100\1\0\57\100\1\0\205\100"+
    "\6\0\4\100\3\103\2\100\14\0\46\100\1\0\1\100"+
    "\5\0\1\100\2\0\70\100\7\0\1\100\17\0\1\103"+
    "\27\100\11\0\7\100\1\0\7\100\1\0\7\100\1\0"+
    "\7\100\1\0\7\100\1\0\7\100\1\0\7\100\1\0"+
    "\7\100\1\0\40\103\54\0\1\135\22\0\1\164\300\0"+
    "\1\1\1\0\1\165\2\0\3\100\31\0\11\100\6\103"+
    "\1\0\5\100\2\0\5\100\4\0\126\100\2\0\2\103"+
    "\2\0\3\100\1\0\132\100\1\0\4\100\5\0\53\100"+
    "\1\0\136\100\21\0\33\100\65\0\306\100\112\0\360\100"+
    "\20\0\215\100\103\0\56\100\2\0\15\100\3\0\20\100"+
    "\12\103\2\100\24\0\57\100\1\103\4\0\12\103\1\0"+
    "\37\100\2\103\120\100\2\103\45\0\11\100\2\0\147\100"+
    "\2\0\65\100\2\0\5\100\60\0\13\100\1\103\3\100"+
    "\1\103\4\100\1\103\27\100\5\103\30\0\64\100\14\0"+
    "\2\103\62\100\22\103\12\0\12\103\6\0\22\103\6\100"+
    "\3\0\1\100\1\0\2\100\13\103\34\100\10\103\2\0"+
    "\27\100\15\103\14\0\35\100\3\0\4\103\57\100\16\103"+
    "\16\0\1\100\12\103\6\0\5\100\1\103\12\100\12\103"+
    "\5\100\1\0\51\100\16\103\11\0\3\100\1\103\10\100"+
    "\2\103\2\0\12\103\6\0\27\100\3\0\1\100\3\103"+
    "\62\100\1\103\1\100\3\103\2\100\2\103\5\100\2\103"+
    "\1\100\1\103\1\100\30\0\3\100\2\0\13\100\5\103"+
    "\2\0\3\100\2\103\12\0\6\100\2\0\6\100\2\0"+
    "\6\100\11\0\7\100\1\0\7\100\1\0\53\100\1\0"+
    "\14\100\10\0\163\100\10\103\1\0\2\103\2\0\12\103"+
    "\6\0\244\100\14\0\27\100\4\0\61\100\u0104\0\156\100"+
    "\2\0\152\100\46\0\7\100\14\0\5\100\5\0\1\100"+
    "\1\103\12\100\1\0\15\100\1\0\5\100\1\0\1\100"+
    "\1\0\2\100\1\0\2\100\1\0\154\100\41\0\213\100"+
    "\6\0\332\100\22\0\100\100\2\0\66\100\50\0\12\100"+
    "\6\0\20\103\20\0\20\103\3\0\2\103\30\0\3\103"+
    "\41\0\1\100\1\0\1\100\3\0\1\100\1\0\1\100"+
    "\1\0\1\100\1\0\1\100\1\0\176\100\4\0\1\166"+
    "\12\0\1\16\3\0\12\103\1\23\4\0\1\167\1\0"+
    "\32\100\4\0\1\103\1\0\32\100\13\0\70\100\2\103"+
    "\37\100\3\0\6\100\2\0\6\100\2\0\6\100\2\0"+
    "\3\100\43\0\14\100\1\0\32\100\1\0\23\100\1\0"+
    "\2\100\1\0\17\100\2\0\16\100\42\0\173\100\105\0"+
    "\65\100\210\0\1\103\202\0\35\100\3\0\61\100\17\0"+
    "\1\103\37\0\40\100\15\0\36\100\5\0\46\100\5\103"+
    "\5\0\36\100\2\0\44\100\4\0\10\100\1\0\5\100"+
    "\52\0\236\100\2\0\12\103\6\0\44\100\4\0\44\100"+
    "\4\0\50\100\10\0\64\100\234\0\67\100\11\0\26\100"+
    "\12\0\10\100\230\0\6\100\2\0\1\100\1\0\54\100"+
    "\1\0\2\100\3\0\1\100\2\0\27\100\12\0\27\100"+
    "\11\0\37\100\101\0\23\100\1\0\2\100\12\0\26\100"+
    "\12\0\32\100\106\0\70\100\6\0\2\100\100\0\1\100"+
    "\3\103\1\0\2\103\5\0\4\103\4\100\1\0\3\100"+
    "\1\0\35\100\2\0\3\103\4\0\1\103\40\0\35\100"+
    "\3\0\35\100\43\0\10\100\1\0\34\100\2\103\31\0"+
    "\66\100\12\0\26\100\12\0\23\100\15\0\22\100\156\0"+
    "\111\100\67\0\63\100\15\0\63\100\15\0\44\100\4\103"+
    "\10\0\12\103\306\0\35\100\12\0\1\100\10\0\26\100"+
    "\13\103\217\0\27\100\11\0\3\103\65\100\17\103\37\0"+
    "\12\103\17\0\4\103\55\100\13\103\25\0\31\100\7\0"+
    "\12\103\6\0\3\103\44\100\16\103\1\0\12\103\4\0"+
    "\1\100\2\103\11\0\43\100\1\103\2\0\1\100\11\0"+
    "\3\103\60\100\16\103\4\100\4\0\4\103\3\0\12\103"+
    "\1\100\1\0\1\100\43\0\22\100\1\0\31\100\14\103"+
    "\6\0\1\103\101\0\7\100\1\0\1\100\1\0\4\100"+
    "\1\0\17\100\1\0\12\100\7\0\57\100\14\103\5\0"+
    "\12\103\6\0\4\103\1\0\10\100\2\0\2\100\2\0"+
    "\26\100\1\0\7\100\1\0\2\100\1\0\5\100\1\0"+
    "\2\103\1\100\7\103\2\0\2\103\2\0\3\103\2\0"+
    "\1\100\6\0\1\103\5\0\5\100\2\103\2\0\7\103"+
    "\3\0\5\103\213\0\65\100\22\103\4\100\5\0\12\103"+
    "\4\0\1\103\1\100\40\0\60\100\24\103\2\100\1\0"+
    "\1\100\10\0\12\103\246\0\57\100\7\103\2\0\11\103"+
    "\27\0\4\100\2\103\42\0\60\100\21\103\3\0\1\100"+
    "\13\0\12\103\46\0\53\100\15\103\1\100\7\0\12\103"+
    "\66\0\33\100\2\0\17\103\4\0\12\103\306\0\54\100"+
    "\17\103\145\0\100\100\12\103\25\0\1\100\240\0\10\100"+
    "\2\0\47\100\7\103\2\0\7\103\1\100\1\0\1\100"+
    "\1\103\33\0\1\100\12\103\50\100\7\103\1\100\4\103"+
    "\10\0\1\103\10\0\1\100\13\103\56\100\20\103\3\0"+
    "\1\100\42\0\71\100\7\0\11\100\1\0\45\100\10\103"+
    "\1\0\10\103\1\100\17\0\12\103\30\0\36\100\2\0"+
    "\26\103\1\0\16\103\111\0\7\100\1\0\2\100\1\0"+
    "\46\100\6\103\3\0\1\103\1\0\2\103\1\0\7\103"+
    "\1\100\1\103\10\0\12\103\6\0\6\100\1\0\2\100"+
    "\1\0\40\100\5\103\1\0\2\103\1\0\5\103\1\100"+
    "\7\0\12\103\u0136\0\23\100\4\103\11\0\232\100\146\0"+
    "\157\100\21\0\304\100\274\0\57\100\321\0\107\100\271\0"+
    "\71\100\7\0\37\100\1\0\12\103\146\0\36\100\2\0"+
    "\5\103\13\0\60\100\7\103\11\0\4\100\14\0\12\103"+
    "\11\0\25\100\5\0\23\100\260\0\100\100\200\0\113\100"+
    "\4\0\1\103\1\100\67\103\7\0\4\103\15\100\100\0"+
    "\2\100\1\0\1\100\34\0\370\100\10\0\363\100\15\0"+
    "\37\100\61\0\3\100\21\0\4\100\10\0\u018c\100\4\0"+
    "\153\100\5\0\15\100\3\0\11\100\7\0\12\100\3\0"+
    "\2\103\306\0\5\103\3\0\6\103\10\0\10\103\2\0"+
    "\7\103\36\0\4\103\224\0\3\103\273\0\125\100\1\0"+
    "\107\100\1\0\2\100\2\0\1\100\2\0\2\100\2\0"+
    "\4\100\1\0\14\100\1\0\1\100\1\0\7\100\1\0"+
    "\101\100\1\0\4\100\2\0\10\100\1\0\7\100\1\0"+
    "\34\100\1\0\4\100\1\0\5\100\1\0\1\100\3\0"+
    "\7\100\1\0\u0154\100\2\0\31\100\1\0\31\100\1\0"+
    "\37\100\1\0\31\100\1\0\37\100\1\0\31\100\1\0"+
    "\37\100\1\0\31\100\1\0\37\100\1\0\31\100\1\0"+
    "\10\100\2\0\151\103\4\0\62\103\10\0\1\103\16\0"+
    "\1\103\26\0\5\103\1\0\17\103\120\0\7\103\1\0"+
    "\21\103\2\0\7\103\1\0\2\103\1\0\5\103\325\0"+
    "\55\100\3\0\7\103\7\100\2\0\12\103\4\0\1\100"+
    "\u0171\0\54\100\16\103\6\0\305\100\13\0\7\103\51\0"+
    "\104\100\7\103\1\100\4\0\12\103\246\0\4\100\1\0"+
    "\33\100\1\0\2\100\1\0\1\100\2\0\1\100\1\0"+
    "\12\100\1\0\4\100\1\0\1\100\1\0\1\100\6\0"+
    "\1\100\4\0\1\100\1\0\1\100\1\0\1\100\1\0"+
    "\3\100\1\0\2\100\1\0\1\100\2\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0"+
    "\2\100\1\0\1\100\2\0\4\100\1\0\7\100\1\0"+
    "\4\100\1\0\4\100\1\0\1\100\1\0\12\100\1\0"+
    "\21\100\5\0\3\100\1\0\5\100\1\0\21\100\104\0"+
    "\327\100\51\0\65\100\13\0\336\100\2\0\u0182\100\16\0"+
    "\u0131\100\37\0\36\100\342\0\360\103\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\1\1\34\1\35\1\1"+
    "\22\32\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\21\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\5\120\4\121\1\122\2\123"+
    "\1\124\3\123\1\1\1\125\1\126\2\1\1\127\1\130"+
    "\1\0\1\131\1\132\2\0\1\133\1\134\1\135\1\46"+
    "\1\136\1\137\1\140\2\0\1\141\1\142\1\143\1\144"+
    "\1\145\1\146\1\147\1\0\1\150\1\151\13\32\1\152"+
    "\4\32\1\153\1\32\1\154\1\155\27\32\1\143\1\156"+
    "\4\0\1\124\1\157\1\0\1\160\3\0\1\161\1\131"+
    "\1\162\1\163\1\164\1\165\1\166\1\143\1\167\1\170"+
    "\1\151\7\32\1\171\5\32\1\172\1\32\1\152\5\32"+
    "\1\173\6\32\1\174\1\63\1\175\12\32\1\176\11\32"+
    "\2\0\1\125\1\32\1\177\4\32\1\200\1\201\1\202"+
    "\5\32\1\203\1\152\5\32\1\172\5\32\1\204\10\32"+
    "\1\205\1\176\1\206\5\32\1\207\3\32\1\210\1\32"+
    "\1\157\1\211\1\212\1\213\3\32\1\202\3\32\1\214"+
    "\4\32\1\215\3\32\1\216\1\217\3\32\1\220\5\32"+
    "\1\221\1\222\1\223\1\224\1\225\1\226\1\227\1\32"+
    "\1\230\4\32\1\215\1\32\1\231\5\32\1\232\1\32"+
    "\1\233\1\234\1\235\1\236\1\32\1\213\1\32\1\225"+
    "\1\237\3\32\1\240\12\32\1\241\11\32\1\242\1\243"+
    "\1\32\1\242\1\244";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\170\0\360\0\u0168\0\u01e0\0\u0258\0\u02d0\0\u0348"+
    "\0\u03c0\0\u0438\0\u04b0\0\u0438\0\u0528\0\u05a0\0\u0618\0\u0690"+
    "\0\u0708\0\u0780\0\u0438\0\u0438\0\u07f8\0\u0870\0\u0438\0\u08e8"+
    "\0\u0960\0\u09d8\0\u0a50\0\u0ac8\0\u0438\0\u0b40\0\u0bb8\0\u0c30"+
    "\0\u0ca8\0\u0d20\0\u0d98\0\u0438\0\u0e10\0\u0438\0\u0438\0\u0e88"+
    "\0\u0f00\0\u0f78\0\u0ff0\0\u1068\0\u10e0\0\u1158\0\u11d0\0\u1248"+
    "\0\u12c0\0\u1338\0\u13b0\0\u1428\0\u14a0\0\u1518\0\u1590\0\u1608"+
    "\0\u1680\0\u16f8\0\u0438\0\u1770\0\u0438\0\u17e8\0\u1860\0\u0438"+
    "\0\u07f8\0\u0438\0\u0438\0\u0438\0\u0438\0\u18d8\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u1950\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u0438\0\u0438\0\u0438\0\u19c8\0\u1a40\0\u1ab8"+
    "\0\u0438\0\u1b30\0\u1ba8\0\u1c20\0\u1c98\0\u1d10\0\u0438\0\u0438"+
    "\0\u1d88\0\u1e00\0\u1e78\0\u1ef0\0\u1f68\0\u1fe0\0\u2058\0\u0438"+
    "\0\u20d0\0\u2148\0\u2148\0\u0438\0\u21c0\0\u2238\0\u0438\0\u22b0"+
    "\0\u2328\0\u0438\0\u0438\0\u0438\0\u23a0\0\u2418\0\u0438\0\u2490"+
    "\0\u2508\0\u2580\0\u0438\0\u0438\0\u25f8\0\u2670\0\u0438\0\u0438"+
    "\0\u0438\0\u0e88\0\u0438\0\u26e8\0\u2760\0\u27d8\0\u2850\0\u28c8"+
    "\0\u2940\0\u29b8\0\u2a30\0\u2aa8\0\u2b20\0\u2b98\0\u2c10\0\u0d98"+
    "\0\u2c88\0\u2d00\0\u2d78\0\u2df0\0\u0d98\0\u2e68\0\u2ee0\0\u0d98"+
    "\0\u2f58\0\u2fd0\0\u3048\0\u30c0\0\u3138\0\u31b0\0\u3228\0\u32a0"+
    "\0\u3318\0\u3390\0\u3408\0\u3480\0\u34f8\0\u3570\0\u35e8\0\u3660"+
    "\0\u36d8\0\u3750\0\u37c8\0\u3840\0\u38b8\0\u3930\0\u39a8\0\u3a20"+
    "\0\u0438\0\u3a98\0\u3b10\0\u3b88\0\u1e78\0\u0438\0\u3c00\0\u3c78"+
    "\0\u3c78\0\u3cf0\0\u3d68\0\u3de0\0\u0438\0\u0438\0\u0438\0\u0438"+
    "\0\u0438\0\u0438\0\u3e58\0\u0438\0\u0438\0\u0438\0\u0438\0\u3ed0"+
    "\0\u3f48\0\u3fc0\0\u4038\0\u40b0\0\u4128\0\u41a0\0\u0d98\0\u4218"+
    "\0\u4290\0\u4308\0\u4380\0\u43f8\0\u4470\0\u44e8\0\u4560\0\u45d8"+
    "\0\u4650\0\u46c8\0\u4740\0\u47b8\0\u0d98\0\u4830\0\u48a8\0\u4920"+
    "\0\u4998\0\u4a10\0\u4a88\0\u0d98\0\u0d98\0\u0d98\0\u4b00\0\u4b78"+
    "\0\u4bf0\0\u4c68\0\u4ce0\0\u4d58\0\u4dd0\0\u4e48\0\u4ec0\0\u4f38"+
    "\0\u4fb0\0\u5028\0\u50a0\0\u5118\0\u5190\0\u5208\0\u5280\0\u52f8"+
    "\0\u5370\0\u53e8\0\u1ef0\0\u5460\0\u54d8\0\u5550\0\u0d98\0\u55c8"+
    "\0\u5640\0\u56b8\0\u5730\0\u0d98\0\u0d98\0\u57a8\0\u5820\0\u5898"+
    "\0\u5910\0\u5988\0\u5a00\0\u0d98\0\u5a78\0\u5af0\0\u5b68\0\u5be0"+
    "\0\u5c58\0\u5cd0\0\u0d98\0\u5d48\0\u5dc0\0\u5e38\0\u5eb0\0\u5f28"+
    "\0\u0d98\0\u5fa0\0\u6018\0\u6090\0\u6108\0\u6180\0\u61f8\0\u6270"+
    "\0\u62e8\0\u0d98\0\u0438\0\u0d98\0\u6360\0\u63d8\0\u6450\0\u64c8"+
    "\0\u6540\0\u0d98\0\u65b8\0\u6630\0\u66a8\0\u0d98\0\u6720\0\u6798"+
    "\0\u0d98\0\u0d98\0\u0d98\0\u6810\0\u6888\0\u6900\0\u0d98\0\u6978"+
    "\0\u69f0\0\u6a68\0\u0d98\0\u6ae0\0\u6b58\0\u6bd0\0\u6c48\0\u0d98"+
    "\0\u6cc0\0\u6d38\0\u6db0\0\u0d98\0\u0d98\0\u6e28\0\u6ea0\0\u6f18"+
    "\0\u0d98\0\u6f90\0\u7008\0\u7080\0\u70f8\0\u7170\0\u0d98\0\u0d98"+
    "\0\u0d98\0\u0d98\0\u71e8\0\u0d98\0\u0d98\0\u7260\0\u0d98\0\u72d8"+
    "\0\u7350\0\u73c8\0\u7440\0\u74b8\0\u7530\0\u0d98\0\u75a8\0\u7620"+
    "\0\u7698\0\u7710\0\u7788\0\u0d98\0\u7800\0\u0d98\0\u0d98\0\u0d98"+
    "\0\u0d98\0\u7878\0\u78f0\0\u7968\0\u0438\0\u0d98\0\u79e0\0\u7a58"+
    "\0\u7ad0\0\u0d98\0\u7b48\0\u7bc0\0\u7c38\0\u7cb0\0\u7d28\0\u7da0"+
    "\0\u7e18\0\u7e90\0\u7f08\0\u7f80\0\u0d98\0\u7ff8\0\u8070\0\u80e8"+
    "\0\u8160\0\u81d8\0\u8250\0\u82c8\0\u8340\0\u83b8\0\u8430\0\u0d98"+
    "\0\u84a8\0\u0438\0\u0d98";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\3\43\1\44\1\45\1\46\1\47\1\43\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\43"+
    "\1\60\2\43\1\61\1\62\1\63\1\64\1\43\1\65"+
    "\1\66\1\67\1\70\1\43\1\71\1\43\1\72\1\73"+
    "\1\74\1\75\1\12\1\76\1\43\1\77\1\100\1\12"+
    "\1\101\1\102\1\103\1\104\1\105\1\12\1\106\1\107"+
    "\1\110\1\111\1\12\1\20\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135"+
    "\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\1\12\1\151\1\152\1\153\1\154"+
    "\1\155\1\31\1\14\1\41\5\156\1\157\17\156\1\160"+
    "\1\156\1\161\124\156\1\162\13\156\4\163\1\164\163\163"+
    "\11\165\1\166\156\165\4\163\1\167\163\163\11\165\1\167"+
    "\156\165\14\170\1\171\15\170\3\172\4\170\1\172\1\173"+
    "\30\172\5\170\1\172\10\170\1\174\4\170\1\175\51\170"+
    "\14\12\1\176\5\12\1\177\7\12\3\177\6\12\30\177"+
    "\16\12\1\200\72\12\1\201\1\202\1\12\1\202\2\12"+
    "\1\203\73\12\1\204\51\12\171\0\2\13\171\0\1\205"+
    "\163\0\2\16\1\0\165\16\27\0\1\206\125\0\1\206"+
    "\40\0\1\207\151\0\1\125\170\0\1\210\145\0\1\211"+
    "\36\0\1\212\167\0\1\213\167\0\1\214\1\150\160\0"+
    "\1\215\144\0\1\215\11\0\1\102\10\0\1\216\5\0"+
    "\1\217\2\0\1\120\6\0\1\220\124\0\1\216\22\0"+
    "\1\221\1\0\1\33\16\0\1\222\151\0\1\127\4\0"+
    "\1\223\136\0\1\223\5\0\1\224\1\225\10\0\1\115"+
    "\6\0\1\131\167\0\1\226\1\117\166\0\1\132\164\0"+
    "\1\223\2\0\1\227\1\0\1\230\136\0\1\230\20\0"+
    "\1\116\17\0\1\231\151\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\30\43\5\0\1\43\2\0\1\43\117\0"+
    "\1\155\1\112\21\0\1\105\111\0\42\232\1\233\125\232"+
    "\22\0\1\43\7\0\3\43\4\0\1\43\1\0\21\43"+
    "\1\234\6\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\20\43\1\235\7\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\1\236\12\43\1\237\2\43\1\240"+
    "\11\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\4\43\1\241\23\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\1\242\12\43\1\243\1\43\1\244\10\43"+
    "\1\245\1\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\1\246\12\43\1\247"+
    "\1\43\1\250\1\251\1\43\1\252\2\43\1\253\4\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\254\23\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\5\43\1\255\6\43\1\256\1\257\3\43\1\260"+
    "\6\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\1\261\3\43\1\262\11\43"+
    "\1\263\11\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\1\264\7\43\1\265"+
    "\17\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\1\266\3\43\1\267\3\43"+
    "\1\270\5\43\1\271\4\43\1\272\4\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\1\43\1\273\26\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\1\274"+
    "\3\43\1\275\23\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\10\43\1\276"+
    "\11\43\1\277\5\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\4\43\1\300"+
    "\13\43\1\301\6\43\1\302\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\15\43"+
    "\1\303\3\43\1\304\6\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\7\43"+
    "\1\305\1\306\17\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\10\43\1\307"+
    "\17\43\5\0\1\43\2\0\1\43\160\0\1\126\115\0"+
    "\1\76\7\0\3\76\6\0\30\76\122\0\1\132\1\130"+
    "\1\131\160\0\1\216\5\0\1\217\11\0\1\220\124\0"+
    "\1\216\7\0\1\224\1\310\161\0\5\156\1\0\17\156"+
    "\1\0\1\156\1\0\140\156\27\0\1\311\125\0\1\311"+
    "\17\0\1\224\162\0\5\156\1\224\17\156\1\0\1\156"+
    "\1\0\140\156\4\163\1\0\163\163\4\0\1\312\163\0"+
    "\11\165\1\0\156\165\11\0\1\313\172\0\1\314\175\0"+
    "\1\172\7\0\3\172\4\0\1\172\1\0\30\172\5\0"+
    "\1\172\2\0\1\172\64\0\42\315\1\316\125\315\22\0"+
    "\1\317\7\0\3\317\6\0\30\317\112\0\1\320\1\0"+
    "\1\320\2\0\1\321\161\0\1\322\173\0\1\323\1\0"+
    "\1\177\7\0\3\177\4\0\1\324\1\0\30\177\111\0"+
    "\1\204\175\0\1\203\151\0\1\325\202\0\2\326\5\0"+
    "\1\326\12\0\1\326\34\0\1\326\102\0\1\327\167\0"+
    "\1\330\176\0\1\104\4\0\2\331\136\0\1\104\42\0"+
    "\1\332\147\0\1\332\144\0\1\332\24\0\1\333\167\0"+
    "\1\33\164\0\2\334\5\0\1\334\1\335\11\0\1\334"+
    "\34\0\1\334\120\0\1\336\143\0\1\337\16\0\1\43"+
    "\5\0\1\337\1\0\3\43\4\0\1\43\1\0\30\43"+
    "\5\0\1\43\2\0\1\43\62\0\2\337\22\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\4\43\1\340\23\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\21\43\1\341\1\342\5\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\1\343\27\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\15\43"+
    "\1\344\12\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\5\43\1\250\22\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\2\43\1\345\25\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\21\43\1\346\6\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\3\43"+
    "\1\347\17\43\1\350\4\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\2\43"+
    "\1\351\17\43\1\352\5\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\13\43"+
    "\1\353\14\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\1\354\27\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\20\43\1\355\7\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\16\43\1\356\11\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\15\43\1\357"+
    "\12\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\15\43\1\360\12\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\17\43\1\361\10\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\3\43\1\362\16\43\1\363\5\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\14\43\1\364\13\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\22\43\1\365"+
    "\5\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\16\43\1\366\11\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\2\43\1\367\17\43\1\370\5\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\2\43\1\371\25\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\14\43\1\372\13\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\23\43\1\373"+
    "\1\43\1\374\2\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\13\43\1\375"+
    "\14\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\22\43\1\376\5\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\13\43\1\377\14\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\11\43\1\u0100\16\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\10\43\1\u0101"+
    "\17\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\21\43\1\u0102\1\u0103\5\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\15\43\1\u0104\12\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\20\43\1\u0105\7\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\14\43"+
    "\1\u0106\13\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\1\u0107\22\43\1\u0108"+
    "\3\43\1\u0109\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\17\43\1\u010a\10\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\10\43\1\u010b\11\43\1\u010c\5\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\10\43\1\u010d\17\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\4\43\1\u010e\3\43\1\u010f\17\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\3\43\1\u0110\16\43\1\u0111\5\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\4\43\1\u0112\23\43\5\0\1\43\2\0\1\43"+
    "\103\0\2\334\5\0\1\334\12\0\1\334\34\0\1\334"+
    "\75\0\1\167\174\0\1\167\172\0\1\u0113\1\320\1\0"+
    "\1\320\2\0\1\321\165\0\1\u0114\1\0\1\317\7\0"+
    "\3\317\4\0\1\u0113\1\0\30\317\117\0\1\321\161\0"+
    "\1\200\175\0\1\u0115\7\0\3\u0115\6\0\30\u0115\117\0"+
    "\1\177\7\0\3\177\6\0\30\177\117\0\1\333\16\0"+
    "\1\221\150\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\1\u0116\27\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\4\43\1\u0117\23\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\2\43\1\u0118\25\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\21\43\1\u0119\6\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\21\43"+
    "\1\u011a\1\u011b\5\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\7\43\1\u011c"+
    "\20\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\4\43\1\u011d\23\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\14\43\1\u011e\13\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\13\43\1\u011f\14\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\4\43\1\u0120"+
    "\23\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\13\43\1\u0121\5\43\1\u0108"+
    "\6\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\6\43\1\u0122\21\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\1\u0123\27\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\14\43"+
    "\1\u0124\13\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\2\43\1\u0125\25\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u0126\23\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\13\43\1\u0127\14\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\23\43"+
    "\1\u0128\4\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\4\43\1\u0129\23\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\1\43\1\u012a\26\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\17\43\1\u012b\10\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\20\43"+
    "\1\u012c\7\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\2\43\1\u012d\25\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\20\43\1\u012e\7\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\4\43\1\u012f\23\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\20\43"+
    "\1\u0130\7\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\13\43\1\u0131\14\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u0132\23\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\21\43\1\u0133\6\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\23\43"+
    "\1\u0134\4\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\23\43\1\u0135\4\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\6\43\1\u0136\21\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\23\43\1\u0137\4\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\17\43"+
    "\1\u0138\10\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\10\43\1\u0139\17\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u013a\23\43\5\0\1\43"+
    "\2\0\1\43\67\0\1\u013b\16\0\1\43\5\0\1\u013b"+
    "\1\0\3\43\4\0\1\43\1\0\30\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\4\43\1\u013c\16\43\1\u013d\4\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\16\43\1\u013e\3\43\1\u013f\5\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\10\43\1\u0140\17\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\15\43"+
    "\1\u0141\12\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\15\43\1\u0142\2\43"+
    "\1\u0143\7\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\13\43\1\u0144\14\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\6\43\1\u0145\21\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\7\43\1\u0146\20\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\13\43"+
    "\1\u0147\14\43\5\0\1\43\2\0\1\43\106\0\1\u0148"+
    "\7\0\3\u0148\6\0\30\u0148\117\0\1\u0115\7\0\3\u0115"+
    "\4\0\1\323\1\0\30\u0115\117\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\12\43\1\u0149\15\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\7\43\1\u014a\20\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\21\43"+
    "\1\u014b\6\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\22\43\1\u014c\5\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\10\43\1\u014d\17\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\4\43\1\u014e\14\43\1\u014f\6\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\23\43\1\u0150\4\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\15\43"+
    "\1\u0151\12\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\22\43\1\u0152\5\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\21\43\1\u0153\6\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\13\43\1\u0154\14\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\22\43"+
    "\1\u0155\5\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\20\43\1\u0156\7\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\10\43\1\u0157\16\43\1\u0158\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\2\43\1\u0159\25\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\20\43\1\u015a\7\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\3\43\1\u015b"+
    "\24\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\16\43\1\u015c\11\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\7\43\1\u015d\20\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\16\43\1\250\11\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\21\43\1\u015e"+
    "\6\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\1\u015f\27\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\2\43\1\u0160\25\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\4\43"+
    "\1\u0161\23\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\14\43\1\u0162\13\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\20\43\1\u0163\7\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\13\43\1\u0164\14\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\2\43"+
    "\1\u0165\25\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\13\43\1\u0166\14\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\22\43\1\u0167\5\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\21\43\1\u013c\6\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\15\43"+
    "\1\u0168\12\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\4\43\1\u0169\22\43"+
    "\1\u0169\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\13\43\1\u016a\14\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\6\43\1\u016b\21\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\4\43\1\u016c\23\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\4\43\1\u016d"+
    "\23\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\4\43\1\u016e\23\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\3\43\1\u016f\24\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\u0148\7\0\3\u0148\4\0\1\u0114\1\0"+
    "\30\u0148\117\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\20\43\1\u0170\7\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\15\43\1\u0171"+
    "\12\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\20\43\1\u0172\7\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\3\43\1\u0173\24\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\3\43\1\u0174\24\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\7\43\1\u0175"+
    "\20\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\13\43\1\u0176\14\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\10\43\1\u0177\17\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\10\43\1\u0178\17\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\14\43\1\u0179"+
    "\13\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\22\43\1\u017a\5\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\5\43\1\u017b\22\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\1\u017c\27\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\17\43\1\u017d\10\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\13\43\1\u017e\14\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\22\43\1\u017f\5\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\4\43"+
    "\1\u0180\23\43\5\0\1\43\2\0\1\43\106\0\1\43"+
    "\7\0\3\43\4\0\1\43\1\0\15\43\1\u0181\12\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\4\43\1\u0182\23\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\22\43\1\u0183\5\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\1\u0184"+
    "\27\43\5\0\1\43\2\0\1\43\67\0\1\u0185\16\0"+
    "\1\43\5\0\1\u0185\1\0\3\43\4\0\1\43\1\0"+
    "\30\43\5\0\1\43\2\0\1\43\62\0\2\u0185\22\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\22\43\1\u0186"+
    "\5\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\1\u0187\27\43\5\0\1\43"+
    "\2\0\1\43\106\0\1\43\7\0\3\43\4\0\1\43"+
    "\1\0\23\43\1\u0188\4\43\5\0\1\43\2\0\1\43"+
    "\106\0\1\43\7\0\3\43\4\0\1\43\1\0\1\u0189"+
    "\27\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\4\43\1\u018a\23\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\21\43\1\u0158\6\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\20\43\1\u018b\7\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\16\43\1\u018c"+
    "\11\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\2\43\1\u0176\25\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\4\43\1\u018d\23\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\10\43\1\u018e\17\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\1\u018f\27\43"+
    "\5\0\1\43\2\0\1\43\106\0\1\43\7\0\3\43"+
    "\4\0\1\43\1\0\1\u0190\27\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\22\43\1\u0191\5\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\23\43\1\u0192"+
    "\4\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\22\43\1\u0193\5\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\10\43\1\u0194\17\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\4\43\1\u0195\23\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\22\43\1\u0196"+
    "\5\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\16\43\1\u0197\11\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\15\43\1\250\12\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\15\43\1\u0198\12\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\24\43\1\u0199"+
    "\3\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\2\43\1\u019a\25\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\2\43\1\u019b\25\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\16\43\1\u019c\11\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\20\43\1\u019a"+
    "\7\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\4\43\1\u0176\23\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\15\43\1\u019d\12\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\4\43\1\u014f\23\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\23\43\1\u019e"+
    "\4\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\22\43\1\u0174\5\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\4\43\1\u0169\23\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\4\43\1\u014b\23\43\5\0\1\43\2\0\1\43\106\0"+
    "\1\43\7\0\3\43\4\0\1\43\1\0\4\43\1\u019f"+
    "\23\43\5\0\1\43\2\0\1\43\106\0\1\43\7\0"+
    "\3\43\4\0\1\43\1\0\15\43\1\u01a0\12\43\5\0"+
    "\1\43\2\0\1\43\106\0\1\43\7\0\3\43\4\0"+
    "\1\43\1\0\22\43\1\u0176\5\43\5\0\1\43\2\0"+
    "\1\43\106\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\6\43\1\u01a1\21\43\5\0\1\43\2\0\1\43\67\0"+
    "\1\u01a2\16\0\1\43\5\0\1\u01a2\1\0\3\43\4\0"+
    "\1\43\1\0\30\43\5\0\1\43\2\0\1\43\62\0"+
    "\2\u01a2\22\0\1\43\7\0\3\43\4\0\1\43\1\0"+
    "\7\43\1\u01a3\20\43\5\0\1\43\2\0\1\43\64\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[34080];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\1\11\6\1\2\11\2\1\1\11"+
    "\5\1\1\11\6\1\1\11\1\1\2\11\23\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\4\11\1\1\37\11"+
    "\1\1\7\11\3\1\1\11\5\1\2\11\7\1\1\11"+
    "\3\1\1\11\1\0\1\1\1\11\2\0\3\11\2\1"+
    "\1\11\1\1\2\0\2\11\2\1\3\11\1\0\1\11"+
    "\55\1\1\11\4\0\1\11\1\1\1\0\1\1\3\0"+
    "\6\11\1\1\4\11\63\1\2\0\46\1\1\11\111\1"+
    "\1\11\34\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private final LinkedList<Integer> states = new LinkedList();

    private void yypushstate(int state) {
        states.addFirst(yystate());
        yybegin(state);
    }
    private void yypopstate() {
        final int state = states.removeFirst();
        yybegin(state);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ValkyrieLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.intellij.psi.tree.IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 165: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 166: break;
          case 3:
            { return OP_BANG;
            }
          // fall through
          case 167: break;
          case 4:
            { yybegin(TextCapture2);
          return STRING_L;
            }
          // fall through
          case 168: break;
          case 5:
            { return COMMENT_LINE;
            }
          // fall through
          case 169: break;
          case 6:
            { return DOLLAR;
            }
          // fall through
          case 170: break;
          case 7:
            { return OP_REM;
            }
          // fall through
          case 171: break;
          case 8:
            { return OP_AND;
            }
          // fall through
          case 172: break;
          case 9:
            { yybegin(TextCapture1);
          return STRING_L;
            }
          // fall through
          case 173: break;
          case 10:
            { return PARENTHESIS_L;
            }
          // fall through
          case 174: break;
          case 11:
            { return PARENTHESIS_R;
            }
          // fall through
          case 175: break;
          case 12:
            { return STAR;
            }
          // fall through
          case 176: break;
          case 13:
            { return OP_ADD;
            }
          // fall through
          case 177: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 178: break;
          case 15:
            { return OP_SUB;
            }
          // fall through
          case 179: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 180: break;
          case 17:
            { return OP_DIV;
            }
          // fall through
          case 181: break;
          case 18:
            { yybegin(AfterNumber);return INTEGER;
            }
          // fall through
          case 182: break;
          case 19:
            { return COLON;
            }
          // fall through
          case 183: break;
          case 20:
            { return SEMICOLON;
            }
          // fall through
          case 184: break;
          case 21:
            { return ANGLE_L;
            }
          // fall through
          case 185: break;
          case 22:
            { return EQUAL;
            }
          // fall through
          case 186: break;
          case 23:
            { return ANGLE_R;
            }
          // fall through
          case 187: break;
          case 24:
            { return OP_AND_THEN;
            }
          // fall through
          case 188: break;
          case 25:
            { return OP_MACRO;
            }
          // fall through
          case 189: break;
          case 26:
            { return SYMBOL;
            }
          // fall through
          case 190: break;
          case 27:
            { return BRACKET_L;
            }
          // fall through
          case 191: break;
          case 28:
            { return BRACKET_R;
            }
          // fall through
          case 192: break;
          case 29:
            { return OP_POW;
            }
          // fall through
          case 193: break;
          case 30:
            { return BRACE_L;
            }
          // fall through
          case 194: break;
          case 31:
            { return OP_OR;
            }
          // fall through
          case 195: break;
          case 32:
            { return BRACE_R;
            }
          // fall through
          case 196: break;
          case 33:
            { return COLOR;
            }
          // fall through
          case 197: break;
          case 34:
            { return OP_NOT;
            }
          // fall through
          case 198: break;
          case 35:
            { return OP_REFERENCE;
            }
          // fall through
          case 199: break;
          case 36:
            { return OP_MUL;
            }
          // fall through
          case 200: break;
          case 37:
            { return OP_DIV_REM;
            }
          // fall through
          case 201: break;
          case 38:
            { return ANY_LIST;
            }
          // fall through
          case 202: break;
          case 39:
            { return ANY_DICT;
            }
          // fall through
          case 203: break;
          case 40:
            { return OP_LABEL;
            }
          // fall through
          case 204: break;
          case 41:
            { return OFFSET_L;
            }
          // fall through
          case 205: break;
          case 42:
            { return OFFSET_R;
            }
          // fall through
          case 206: break;
          case 43:
            { return OP_DEREFERENCE;
            }
          // fall through
          case 207: break;
          case 44:
            { return NAME_SCOPE;
            }
          // fall through
          case 208: break;
          case 45:
            { return OP_CELSIUS;
            }
          // fall through
          case 209: break;
          case 46:
            { return OP_FAHRENHEIT;
            }
          // fall through
          case 210: break;
          case 47:
            { return BIND;
            }
          // fall through
          case 211: break;
          case 48:
            { return OP_MACRO_LOWER;
            }
          // fall through
          case 212: break;
          case 49:
            { return OP_ARROW2;
            }
          // fall through
          case 213: break;
          case 50:
            { return OP_MAP;
            }
          // fall through
          case 214: break;
          case 51:
            { return KW_NIL;
            }
          // fall through
          case 215: break;
          case 52:
            { return OP_SQRT;
            }
          // fall through
          case 216: break;
          case 53:
            { return OP_SURD3;
            }
          // fall through
          case 217: break;
          case 54:
            { return OP_SURD4;
            }
          // fall through
          case 218: break;
          case 55:
            { return LOGIC_AND;
            }
          // fall through
          case 219: break;
          case 56:
            { return LOGIC_OR;
            }
          // fall through
          case 220: break;
          case 57:
            { return NAME_SPLIT;
            }
          // fall through
          case 221: break;
          case 58:
            { return OP_NE;
            }
          // fall through
          case 222: break;
          case 59:
            { return OP_LEQ;
            }
          // fall through
          case 223: break;
          case 60:
            { return OP_GEQ;
            }
          // fall through
          case 224: break;
          case 61:
            { return OP_LL;
            }
          // fall through
          case 225: break;
          case 62:
            { return OP_GG;
            }
          // fall through
          case 226: break;
          case 63:
            { return LOGIC_XOR;
            }
          // fall through
          case 227: break;
          case 64:
            { return LOGIC_NAND;
            }
          // fall through
          case 228: break;
          case 65:
            { return LOGIC_NOR;
            }
          // fall through
          case 229: break;
          case 66:
            { return OP_LLL;
            }
          // fall through
          case 230: break;
          case 67:
            { return OP_GGG;
            }
          // fall through
          case 231: break;
          case 68:
            { return CEIL_L;
            }
          // fall through
          case 232: break;
          case 69:
            { return CEIL_R;
            }
          // fall through
          case 233: break;
          case 70:
            { return FLOOR_L;
            }
          // fall through
          case 234: break;
          case 71:
            { return FLOOR_R;
            }
          // fall through
          case 235: break;
          case 72:
            { return GENERIC_L;
            }
          // fall through
          case 236: break;
          case 73:
            { return GENERIC_R;
            }
          // fall through
          case 237: break;
          case 74:
            { return OP_ARROW1;
            }
          // fall through
          case 238: break;
          case 75:
            { return DOMAIN_R;
            }
          // fall through
          case 239: break;
          case 76:
            { return BUILDER_L;
            }
          // fall through
          case 240: break;
          case 77:
            { return BUILDER_R;
            }
          // fall through
          case 241: break;
          case 78:
            { return LOGIC_XAND;
            }
          // fall through
          case 242: break;
          case 79:
            { return OP_L10N;
            }
          // fall through
          case 243: break;
          case 80:
            { 
            }
          // fall through
          case 244: break;
          case 81:
            { return STRING_TEXT;
            }
          // fall through
          case 245: break;
          case 82:
            { yybegin(YYINITIAL);
        return STRING_R;
            }
          // fall through
          case 246: break;
          case 83:
            { yybegin(YYINITIAL);yypushback(yylength());
            }
          // fall through
          case 247: break;
          case 84:
            { yybegin(YYINITIAL);return NUMBER_SUFFIX;
            }
          // fall through
          case 248: break;
          case 85:
            { yybegin(AfterNumber); return NUMBER_BASE;
            }
          // fall through
          case 249: break;
          case 86:
            { return OP_BASE;
            }
          // fall through
          case 250: break;
          case 87:
            { yybegin(AfterNumber); return NUMBER_EXPONENT;
            }
          // fall through
          case 251: break;
          case 88:
            { return OP_EXPONENT;
            }
          // fall through
          case 252: break;
          case 89:
            { return TEMPLATE_R;
            }
          // fall through
          case 253: break;
          case 90:
            { return OP_REM_ASSIGN;
            }
          // fall through
          case 254: break;
          case 91:
            { return OP_MUL_ASSIGN;
            }
          // fall through
          case 255: break;
          case 92:
            { return OP_ADD_ASSIGN;
            }
          // fall through
          case 256: break;
          case 93:
            { return OP_SUB_ASSIGN;
            }
          // fall through
          case 257: break;
          case 94:
            { return OP_DIV_FLOOR;
            }
          // fall through
          case 258: break;
          case 95:
            { return OP_DIV_ASSIGN;
            }
          // fall through
          case 259: break;
          case 96:
            { return OP_DIV_CEIL;
            }
          // fall through
          case 260: break;
          case 97:
            { return OP_UNWRAP_ELSE;
            }
          // fall through
          case 261: break;
          case 98:
            { yypushstate(CommentBlock);
            }
          // fall through
          case 262: break;
          case 99:
            { return TEMPLATE_L;
            }
          // fall through
          case 263: break;
          case 100:
            { return OP_EE;
            }
          // fall through
          case 264: break;
          case 101:
            { return OP_SET_THEN;
            }
          // fall through
          case 265: break;
          case 102:
            { return OP_UNWRAP_OR;
            }
          // fall through
          case 266: break;
          case 103:
            { return OP_MACRO_UPPER;
            }
          // fall through
          case 267: break;
          case 104:
            { return SYMBOW_RAW;
            }
          // fall through
          case 268: break;
          case 105:
            { return KW_AS;
            }
          // fall through
          case 269: break;
          case 106:
            { return KW_FUNCTION;
            }
          // fall through
          case 270: break;
          case 107:
            { return KW_IF;
            }
          // fall through
          case 271: break;
          case 108:
            { return KW_IN;
            }
          // fall through
          case 272: break;
          case 109:
            { return KW_IS;
            }
          // fall through
          case 273: break;
          case 110:
            { yypopstate();
        if (yystate() != CommentBlock) {
            return COMMENT_BLOCK;
        }
            }
          // fall through
          case 274: break;
          case 111:
            { yybegin(AfterNumberBase);yypushback(yylength());
            }
          // fall through
          case 275: break;
          case 112:
            { yybegin(AfterNumberExp);yypushback(yylength());
            }
          // fall through
          case 276: break;
          case 113:
            { yybegin(TextCapture6);
          return STRING_L;
            }
          // fall through
          case 277: break;
          case 114:
            { yybegin(TextCapture3);
          return STRING_L;
            }
          // fall through
          case 278: break;
          case 115:
            { return DOMAIN_L;
            }
          // fall through
          case 279: break;
          case 116:
            { return OP_UNTIL;
            }
          // fall through
          case 280: break;
          case 117:
            { return OP_DIV_ROUND;
            }
          // fall through
          case 281: break;
          case 118:
            { yybegin(AfterNumber);return DECIMAL;
            }
          // fall through
          case 282: break;
          case 119:
            { return OP_END;
            }
          // fall through
          case 283: break;
          case 120:
            { return OP_ARROW3;
            }
          // fall through
          case 284: break;
          case 121:
            { return KW_END;
            }
          // fall through
          case 285: break;
          case 122:
            { return KW_LOOP;
            }
          // fall through
          case 286: break;
          case 123:
            { return KW_LET;
            }
          // fall through
          case 287: break;
          case 124:
            { return KW_NEW;
            }
          // fall through
          case 288: break;
          case 125:
            { return KW_NOT;
            }
          // fall through
          case 289: break;
          case 126:
            { return KW_TRY;
            }
          // fall through
          case 290: break;
          case 127:
            { return KW_CASE;
            }
          // fall through
          case 291: break;
          case 128:
            { return KW_EACH;
            }
          // fall through
          case 292: break;
          case 129:
            { return KW_ELSE;
            }
          // fall through
          case 293: break;
          case 130:
            { return KW_ENUMERATE;
            }
          // fall through
          case 294: break;
          case 131:
            { return KW_FROM;
            }
          // fall through
          case 295: break;
          case 132:
            { return KW_NULL;
            }
          // fall through
          case 296: break;
          case 133:
            { return KW_BOOLEAN;
            }
          // fall through
          case 297: break;
          case 134:
            { return KW_TYPE;
            }
          // fall through
          case 298: break;
          case 135:
            { return KW_WHEN;
            }
          // fall through
          case 299: break;
          case 136:
            { return KW_WITH;
            }
          // fall through
          case 300: break;
          case 137:
            { return KW_BREAK;
            }
          // fall through
          case 301: break;
          case 138:
            { return KW_CATCH;
            }
          // fall through
          case 302: break;
          case 139:
            { return KW_CLASS;
            }
          // fall through
          case 303: break;
          case 140:
            { return KW_FLAGS;
            }
          // fall through
          case 304: break;
          case 141:
            { return KW_IMPLY;
            }
          // fall through
          case 305: break;
          case 142:
            { return KW_MACRO;
            }
          // fall through
          case 306: break;
          case 143:
            { return KW_MATCH;
            }
          // fall through
          case 307: break;
          case 144:
            { return KW_RAISE;
            }
          // fall through
          case 308: break;
          case 145:
            { return KW_TRAIT;
            }
          // fall through
          case 309: break;
          case 146:
            { return KW_UNION;
            }
          // fall through
          case 310: break;
          case 147:
            { return KW_UNITE;
            }
          // fall through
          case 311: break;
          case 148:
            { return KW_UNTIL;
            }
          // fall through
          case 312: break;
          case 149:
            { return KW_USING;
            }
          // fall through
          case 313: break;
          case 150:
            { return KW_WHERE;
            }
          // fall through
          case 314: break;
          case 151:
            { return KW_WHILE;
            }
          // fall through
          case 315: break;
          case 152:
            { return KW_YIELD;
            }
          // fall through
          case 316: break;
          case 153:
            { return KW_TEMPLATE;
            }
          // fall through
          case 317: break;
          case 154:
            { return KW_LAMBDA;
            }
          // fall through
          case 318: break;
          case 155:
            { return KW_NEURAL;
            }
          // fall through
          case 319: break;
          case 156:
            { return KW_OBJECT;
            }
          // fall through
          case 320: break;
          case 157:
            { return KW_RESUME;
            }
          // fall through
          case 321: break;
          case 158:
            { return KW_RETURN;
            }
          // fall through
          case 322: break;
          case 159:
            { return KW_COMPONENT;
            }
          // fall through
          case 323: break;
          case 160:
            { return KW_EXCLUDE;
            }
          // fall through
          case 324: break;
          case 161:
            { return KW_CONTINUE;
            }
          // fall through
          case 325: break;
          case 162:
            { return KW_NAMESPACE;
            }
          // fall through
          case 326: break;
          case 163:
            { return KW_SINGLETON;
            }
          // fall through
          case 327: break;
          case 164:
            { return KW_THROUGH;
            }
          // fall through
          case 328: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
