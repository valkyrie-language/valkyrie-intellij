// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\4\u2100\1\u2300" +
                    "\1\u2400\2\u2100\1\u2500\1\u2600\2\u2100\31\u0100\1\u2700\121\u0100" +
                    "\1\u2800\4\u0100\1\u2900\1\u0100\1\u2a00\1\u2b00\1\u2c00\1\u2d00" +
                    "\1\u2e00\1\u2f00\53\u0100\1\u3000\10\u3100\31\u2100\1\u0100\1\u3200" +
                    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00" +
                    "\1\u3b00\1\u3c00\1\u3d00\1\u0100\1\u3e00\1\u3f00\1\u4000\1\u4100" +
                    "\1\u4200\1\u4300\1\u4400\1\u2100\1\u4500\1\u4600\1\u4700\1\u4800" +
                    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u5000" +
                    "\1\u2100\1\u5100\1\u5200\1\u5300\1\u2100\3\u0100\1\u5400\1\u5500" +
                    "\1\u5600\12\u2100\4\u0100\1\u5700\17\u2100\2\u0100\1\u5800\41\u2100" +
                    "\2\u0100\1\u5900\1\u5a00\2\u2100\1\u5b00\1\u5c00\27\u0100\1\u5d00" +
                    "\2\u0100\1\u5e00\45\u2100\1\u0100\1\u5f00\1\u6000\11\u2100\1\u6100" +
                    "\24\u2100\1\u6200\1\u6300\1\u2100\1\u6400\1\u6500\1\u6600\1\u6700" +
                    "\2\u2100\1\u6800\5\u2100\1\u6900\1\u6a00\1\u6b00\5\u2100\1\u6c00" +
                    "\1\u6d00\4\u2100\1\u6e00\21\u2100\246\u0100\1\u6f00\20\u0100\1\u7000" +
                    "\1\u7100\25\u0100\1\u7200\34\u0100\1\u7300\14\u2100\2\u0100\1\u7400" +
                    "\u0b06\u2100\1\u7500\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\11\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\32\31\1\32" +
                    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42" +
                    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52" +
                    "\1\53\1\54\1\55\1\56\1\57\1\31\1\60\1\61" +
                    "\1\62\1\63\1\64\1\65\1\66\1\67\1\31\1\70" +
                    "\1\71\1\72\7\0\1\1\32\0\1\1\10\0\1\73" +
                    "\1\74\3\0\1\73\6\0\1\74\1\0\1\75\2\0" +
                    "\1\74\5\0\27\74\1\0\37\74\1\0\u01ca\74\4\0" +
                    "\14\74\16\0\5\74\7\0\1\74\1\0\1\74\21\0" +
                    "\160\75\5\74\1\0\2\74\3\0\3\74\1\0\1\74" +
                    "\6\0\1\74\1\75\3\74\1\0\1\74\1\0\24\74" +
                    "\1\0\123\74\1\0\213\74\1\0\5\75\2\0\246\74" +
                    "\1\0\46\74\2\0\1\74\6\0\51\74\10\0\55\75" +
                    "\1\0\1\75\1\0\2\75\1\0\2\75\1\0\1\75" +
                    "\10\0\33\74\4\0\4\74\35\0\13\75\5\0\53\74" +
                    "\37\75\4\0\2\74\1\75\143\74\1\0\1\74\7\75" +
                    "\2\0\6\75\2\74\2\75\1\0\4\75\2\74\12\75" +
                    "\3\74\2\0\1\74\20\0\1\74\1\75\36\74\33\75" +
                    "\2\0\131\74\13\75\1\74\16\0\12\75\41\74\11\75" +
                    "\2\74\4\0\1\74\2\0\1\75\2\0\26\74\4\75" +
                    "\1\74\11\75\1\74\3\75\1\74\5\75\22\0\31\74" +
                    "\3\75\4\0\13\74\65\0\25\74\1\0\10\74\25\0" +
                    "\17\75\1\0\41\75\66\74\3\75\1\74\22\75\1\74" +
                    "\7\75\12\74\2\75\2\0\12\75\1\0\20\74\3\75" +
                    "\1\0\10\74\2\0\2\74\2\0\26\74\1\0\7\74" +
                    "\1\0\1\74\3\0\4\74\2\0\1\75\1\74\7\75" +
                    "\2\0\2\75\2\0\3\75\1\74\10\0\1\75\4\0" +
                    "\2\74\1\0\3\74\2\75\2\0\12\75\2\74\12\0" +
                    "\1\74\1\0\1\75\2\0\3\75\1\0\6\74\4\0" +
                    "\2\74\2\0\26\74\1\0\7\74\1\0\2\74\1\0" +
                    "\2\74\1\0\2\74\2\0\1\75\1\0\5\75\4\0" +
                    "\2\75\2\0\3\75\3\0\1\75\7\0\4\74\1\0" +
                    "\1\74\7\0\14\75\3\74\1\75\13\0\3\75\1\0" +
                    "\11\74\1\0\3\74\1\0\26\74\1\0\7\74\1\0" +
                    "\2\74\1\0\5\74\2\0\1\75\1\74\10\75\1\0" +
                    "\3\75\1\0\3\75\2\0\1\74\17\0\2\74\2\75" +
                    "\2\0\12\75\11\0\1\74\6\75\1\0\3\75\1\0" +
                    "\10\74\2\0\2\74\2\0\26\74\1\0\7\74\1\0" +
                    "\2\74\1\0\5\74\2\0\1\75\1\74\7\75\2\0" +
                    "\2\75\2\0\3\75\10\0\2\75\4\0\2\74\1\0" +
                    "\3\74\2\75\2\0\12\75\1\0\1\74\20\0\1\75" +
                    "\1\74\1\0\6\74\3\0\3\74\1\0\4\74\3\0" +
                    "\2\74\1\0\1\74\1\0\2\74\3\0\2\74\3\0" +
                    "\3\74\3\0\14\74\4\0\5\75\3\0\3\75\1\0" +
                    "\4\75\2\0\1\74\6\0\1\75\16\0\12\75\20\0" +
                    "\5\75\10\74\1\0\3\74\1\0\27\74\1\0\20\74" +
                    "\3\0\1\74\7\75\1\0\3\75\1\0\4\75\7\0" +
                    "\2\75\1\0\3\74\5\0\2\74\2\75\2\0\12\75" +
                    "\20\0\1\74\3\75\1\0\10\74\1\0\3\74\1\0" +
                    "\27\74\1\0\12\74\1\0\5\74\2\0\1\75\1\74" +
                    "\7\75\1\0\3\75\1\0\4\75\7\0\2\75\7\0" +
                    "\1\74\1\0\2\74\2\75\2\0\12\75\1\0\2\74" +
                    "\15\0\4\75\1\0\10\74\1\0\3\74\1\0\51\74" +
                    "\2\75\1\74\7\75\1\0\3\75\1\0\4\75\1\74" +
                    "\5\0\3\74\1\75\7\0\3\74\2\75\2\0\12\75" +
                    "\12\0\6\74\2\0\2\75\1\0\22\74\3\0\30\74" +
                    "\1\0\11\74\1\0\1\74\2\0\7\74\3\0\1\75" +
                    "\4\0\6\75\1\0\1\75\1\0\10\75\6\0\12\75" +
                    "\2\0\2\75\15\0\60\74\1\75\1\74\10\75\5\0" +
                    "\7\74\10\75\1\0\12\75\47\0\2\74\1\0\1\74" +
                    "\1\0\5\74\1\0\30\74\1\0\1\74\1\0\12\74" +
                    "\1\75\1\74\12\75\1\74\2\0\5\74\1\0\1\74" +
                    "\1\0\6\75\2\0\12\75\2\0\4\74\40\0\1\74" +
                    "\27\0\2\75\6\0\12\75\13\0\1\75\1\0\1\75" +
                    "\1\0\1\75\4\0\2\75\10\74\1\0\44\74\4\0" +
                    "\24\75\1\0\2\75\5\74\13\75\1\0\44\75\11\0" +
                    "\1\75\71\0\53\74\24\75\1\74\12\75\6\0\6\74" +
                    "\4\75\4\74\3\75\1\74\3\75\2\74\7\75\3\74" +
                    "\4\75\15\74\14\75\1\74\17\75\2\0\46\74\1\0" +
                    "\1\74\5\0\1\74\2\0\53\74\1\0\115\74\1\0" +
                    "\4\74\2\0\7\74\1\0\1\74\1\0\4\74\2\0" +
                    "\51\74\1\0\4\74\2\0\41\74\1\0\4\74\2\0" +
                    "\7\74\1\0\1\74\1\0\4\74\2\0\17\74\1\0" +
                    "\71\74\1\0\4\74\2\0\103\74\2\0\3\75\11\0" +
                    "\11\75\16\0\20\74\20\0\126\74\2\0\6\74\3\0" +
                    "\u016c\74\2\0\21\74\1\1\32\74\5\0\113\74\3\0" +
                    "\13\74\7\0\15\74\1\0\4\74\3\75\13\0\22\74" +
                    "\3\75\13\0\22\74\2\75\14\0\15\74\1\0\3\74" +
                    "\1\0\2\75\14\0\64\74\40\75\3\0\1\74\4\0" +
                    "\1\74\1\75\2\0\12\75\41\0\3\75\2\0\12\75" +
                    "\6\0\131\74\7\0\51\74\1\75\1\74\5\0\106\74" +
                    "\12\0\37\74\1\0\14\75\4\0\14\75\12\0\12\75" +
                    "\36\74\2\0\5\74\13\0\54\74\4\0\32\74\6\0" +
                    "\13\75\45\0\27\74\5\75\4\0\65\74\12\75\1\0" +
                    "\35\75\2\0\13\75\6\0\12\75\15\0\1\74\10\0" +
                    "\16\75\102\0\5\75\57\74\21\75\7\74\4\0\12\75" +
                    "\21\0\11\75\14\0\3\75\36\74\15\75\2\74\12\75" +
                    "\54\74\16\75\14\0\44\74\24\75\10\0\12\75\3\0" +
                    "\3\74\12\75\44\74\2\0\11\74\7\0\53\74\2\0" +
                    "\3\74\20\0\3\75\1\0\25\75\4\74\1\75\6\74" +
                    "\1\75\2\74\3\75\1\74\5\0\300\74\72\75\1\0" +
                    "\5\75\26\74\2\0\6\74\2\0\46\74\2\0\6\74" +
                    "\2\0\10\74\1\0\1\74\1\0\1\74\1\0\1\74" +
                    "\1\0\37\74\2\0\65\74\1\0\7\74\1\0\1\74" +
                    "\3\0\3\74\1\0\7\74\3\0\4\74\2\0\6\74" +
                    "\4\0\15\74\5\0\3\74\1\0\7\74\3\0\13\1" +
                    "\35\0\2\1\5\0\1\1\17\0\2\75\3\0\1\76" +
                    "\1\77\1\100\15\0\1\75\12\0\1\1\21\0\1\74" +
                    "\15\0\1\74\20\0\15\74\63\0\15\75\4\0\1\75" +
                    "\3\0\14\75\21\0\1\74\4\0\1\74\2\0\12\74" +
                    "\1\0\1\74\2\0\6\74\6\0\1\74\1\0\1\74" +
                    "\1\0\1\74\1\0\20\74\2\0\4\74\5\0\5\74" +
                    "\4\0\1\74\21\0\51\74\174\0\1\101\17\0\1\76" +
                    "\40\0\1\102\1\103\50\0\1\104\374\0\1\105\u028a\0" +
                    "\1\106\1\107\14\0\1\110\11\0\57\74\1\0\57\74" +
                    "\1\0\205\74\6\0\4\74\3\75\2\74\14\0\46\74" +
                    "\1\0\1\74\5\0\1\74\2\0\70\74\7\0\1\74" +
                    "\17\0\1\75\27\74\11\0\7\74\1\0\7\74\1\0" +
                    "\7\74\1\0\7\74\1\0\7\74\1\0\7\74\1\0" +
                    "\7\74\1\0\7\74\1\0\40\75\1\1\4\0\3\74" +
                    "\31\0\11\74\6\75\1\0\5\74\2\0\5\74\4\0" +
                    "\126\74\2\0\2\75\2\0\3\74\1\0\132\74\1\0" +
                    "\4\74\5\0\53\74\1\0\136\74\21\0\33\74\65\0" +
                    "\306\74\112\0\360\74\20\0\215\74\103\0\56\74\2\0" +
                    "\15\74\3\0\20\74\12\75\2\74\24\0\57\74\1\75" +
                    "\4\0\12\75\1\0\37\74\2\75\120\74\2\75\45\0" +
                    "\11\74\2\0\147\74\2\0\65\74\2\0\5\74\60\0" +
                    "\13\74\1\75\3\74\1\75\4\74\1\75\27\74\5\75" +
                    "\30\0\64\74\14\0\2\75\62\74\22\75\12\0\12\75" +
                    "\6\0\22\75\6\74\3\0\1\74\1\0\2\74\13\75" +
                    "\34\74\10\75\2\0\27\74\15\75\14\0\35\74\3\0" +
                    "\4\75\57\74\16\75\16\0\1\74\12\75\6\0\5\74" +
                    "\1\75\12\74\12\75\5\74\1\0\51\74\16\75\11\0" +
                    "\3\74\1\75\10\74\2\75\2\0\12\75\6\0\27\74" +
                    "\3\0\1\74\3\75\62\74\1\75\1\74\3\75\2\74" +
                    "\2\75\5\74\2\75\1\74\1\75\1\74\30\0\3\74" +
                    "\2\0\13\74\5\75\2\0\3\74\2\75\12\0\6\74" +
                    "\2\0\6\74\2\0\6\74\11\0\7\74\1\0\7\74" +
                    "\1\0\53\74\1\0\14\74\10\0\163\74\10\75\1\0" +
                    "\2\75\2\0\12\75\6\0\244\74\14\0\27\74\4\0" +
                    "\61\74\u0104\0\156\74\2\0\152\74\46\0\7\74\14\0" +
                    "\5\74\5\0\1\74\1\75\12\74\1\0\15\74\1\0" +
                    "\5\74\1\0\1\74\1\0\2\74\1\0\2\74\1\0" +
                    "\154\74\41\0\213\74\6\0\332\74\22\0\100\74\2\0" +
                    "\66\74\50\0\12\74\6\0\20\75\20\0\20\75\3\0" +
                    "\2\75\30\0\3\75\41\0\1\74\1\0\1\74\3\0" +
                    "\1\74\1\0\1\74\1\0\1\74\1\0\1\74\1\0" +
                    "\176\74\23\0\12\75\7\0\32\74\4\0\1\75\1\0" +
                    "\32\74\13\0\70\74\2\75\37\74\3\0\6\74\2\0" +
                    "\6\74\2\0\6\74\2\0\3\74\43\0\14\74\1\0" +
                    "\32\74\1\0\23\74\1\0\2\74\1\0\17\74\2\0" +
                    "\16\74\42\0\173\74\105\0\65\74\210\0\1\75\202\0" +
                    "\35\74\3\0\61\74\17\0\1\75\37\0\40\74\15\0" +
                    "\36\74\5\0\46\74\5\75\5\0\36\74\2\0\44\74" +
                    "\4\0\10\74\1\0\5\74\52\0\236\74\2\0\12\75" +
                    "\6\0\44\74\4\0\44\74\4\0\50\74\10\0\64\74" +
                    "\234\0\67\74\11\0\26\74\12\0\10\74\230\0\6\74" +
                    "\2\0\1\74\1\0\54\74\1\0\2\74\3\0\1\74" +
                    "\2\0\27\74\12\0\27\74\11\0\37\74\101\0\23\74" +
                    "\1\0\2\74\12\0\26\74\12\0\32\74\106\0\70\74" +
                    "\6\0\2\74\100\0\1\74\3\75\1\0\2\75\5\0" +
                    "\4\75\4\74\1\0\3\74\1\0\35\74\2\0\3\75" +
                    "\4\0\1\75\40\0\35\74\3\0\35\74\43\0\10\74" +
                    "\1\0\34\74\2\75\31\0\66\74\12\0\26\74\12\0" +
                    "\23\74\15\0\22\74\156\0\111\74\67\0\63\74\15\0" +
                    "\63\74\15\0\44\74\4\75\10\0\12\75\306\0\35\74" +
                    "\12\0\1\74\10\0\26\74\13\75\217\0\27\74\11\0" +
                    "\3\75\65\74\17\75\37\0\12\75\17\0\4\75\55\74" +
                    "\13\75\25\0\31\74\7\0\12\75\6\0\3\75\44\74" +
                    "\16\75\1\0\12\75\4\0\1\74\2\75\11\0\43\74" +
                    "\1\75\2\0\1\74\11\0\3\75\60\74\16\75\4\74" +
                    "\4\0\4\75\3\0\12\75\1\74\1\0\1\74\43\0" +
                    "\22\74\1\0\31\74\14\75\6\0\1\75\101\0\7\74" +
                    "\1\0\1\74\1\0\4\74\1\0\17\74\1\0\12\74" +
                    "\7\0\57\74\14\75\5\0\12\75\6\0\4\75\1\0" +
                    "\10\74\2\0\2\74\2\0\26\74\1\0\7\74\1\0" +
                    "\2\74\1\0\5\74\1\0\2\75\1\74\7\75\2\0" +
                    "\2\75\2\0\3\75\2\0\1\74\6\0\1\75\5\0" +
                    "\5\74\2\75\2\0\7\75\3\0\5\75\213\0\65\74" +
                    "\22\75\4\74\5\0\12\75\4\0\1\75\1\74\40\0" +
                    "\60\74\24\75\2\74\1\0\1\74\10\0\12\75\246\0" +
                    "\57\74\7\75\2\0\11\75\27\0\4\74\2\75\42\0" +
                    "\60\74\21\75\3\0\1\74\13\0\12\75\46\0\53\74" +
                    "\15\75\1\74\7\0\12\75\66\0\33\74\2\0\17\75" +
                    "\4\0\12\75\306\0\54\74\17\75\145\0\100\74\12\75" +
                    "\25\0\1\74\240\0\10\74\2\0\47\74\7\75\2\0" +
                    "\7\75\1\74\1\0\1\74\1\75\33\0\1\74\12\75" +
                    "\50\74\7\75\1\74\4\75\10\0\1\75\10\0\1\74" +
                    "\13\75\56\74\20\75\3\0\1\74\42\0\71\74\7\0" +
                    "\11\74\1\0\45\74\10\75\1\0\10\75\1\74\17\0" +
                    "\12\75\30\0\36\74\2\0\26\75\1\0\16\75\111\0" +
                    "\7\74\1\0\2\74\1\0\46\74\6\75\3\0\1\75" +
                    "\1\0\2\75\1\0\7\75\1\74\1\75\10\0\12\75" +
                    "\6\0\6\74\1\0\2\74\1\0\40\74\5\75\1\0" +
                    "\2\75\1\0\5\75\1\74\7\0\12\75\u0136\0\23\74" +
                    "\4\75\11\0\232\74\146\0\157\74\21\0\304\74\274\0" +
                    "\57\74\321\0\107\74\271\0\71\74\7\0\37\74\1\0" +
                    "\12\75\146\0\36\74\2\0\5\75\13\0\60\74\7\75" +
                    "\11\0\4\74\14\0\12\75\11\0\25\74\5\0\23\74" +
                    "\260\0\100\74\200\0\113\74\4\0\1\75\1\74\67\75" +
                    "\7\0\4\75\15\74\100\0\2\74\1\0\1\74\34\0" +
                    "\370\74\10\0\363\74\15\0\37\74\61\0\3\74\21\0" +
                    "\4\74\10\0\u018c\74\4\0\153\74\5\0\15\74\3\0" +
                    "\11\74\7\0\12\74\3\0\2\75\306\0\5\75\3\0" +
                    "\6\75\10\0\10\75\2\0\7\75\36\0\4\75\224\0" +
                    "\3\75\273\0\125\74\1\0\107\74\1\0\2\74\2\0" +
                    "\1\74\2\0\2\74\2\0\4\74\1\0\14\74\1\0" +
                    "\1\74\1\0\7\74\1\0\101\74\1\0\4\74\2\0" +
                    "\10\74\1\0\7\74\1\0\34\74\1\0\4\74\1\0" +
                    "\5\74\1\0\1\74\3\0\7\74\1\0\u0154\74\2\0" +
                    "\31\74\1\0\31\74\1\0\37\74\1\0\31\74\1\0" +
                    "\37\74\1\0\31\74\1\0\37\74\1\0\31\74\1\0" +
                    "\37\74\1\0\31\74\1\0\10\74\2\0\151\75\4\0" +
                    "\62\75\10\0\1\75\16\0\1\75\26\0\5\75\1\0" +
                    "\17\75\120\0\7\75\1\0\21\75\2\0\7\75\1\0" +
                    "\2\75\1\0\5\75\325\0\55\74\3\0\7\75\7\74" +
                    "\2\0\12\75\4\0\1\74\u0171\0\54\74\16\75\6\0" +
                    "\305\74\13\0\7\75\51\0\104\74\7\75\1\74\4\0" +
                    "\12\75\246\0\4\74\1\0\33\74\1\0\2\74\1\0" +
                    "\1\74\2\0\1\74\1\0\12\74\1\0\4\74\1\0" +
                    "\1\74\1\0\1\74\6\0\1\74\4\0\1\74\1\0" +
                    "\1\74\1\0\1\74\1\0\3\74\1\0\2\74\1\0" +
                    "\1\74\2\0\1\74\1\0\1\74\1\0\1\74\1\0" +
                    "\1\74\1\0\1\74\1\0\2\74\1\0\1\74\2\0" +
                    "\4\74\1\0\7\74\1\0\4\74\1\0\4\74\1\0" +
                    "\1\74\1\0\12\74\1\0\21\74\5\0\3\74\1\0" +
                    "\5\74\1\0\21\74\104\0\327\74\51\0\65\74\13\0" +
                    "\336\74\2\0\u0182\74\16\0\u0131\74\37\0\36\74\342\0" +
                    "\360\75\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30208];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1" +
                    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\1\1\30\1\31\1\1\21\26\1\32" +
                    "\1\33\1\34\1\35\1\15\1\36\1\37\1\40\1\17" +
                    "\1\41\1\42\1\43\1\44\1\45\1\46\1\0\1\47" +
                    "\2\0\1\50\2\0\1\51\1\0\1\52\1\53\12\26" +
                    "\1\54\2\26\1\55\1\26\1\56\1\57\24\26\1\47" +
                    "\1\60\1\0\1\53\13\26\1\61\1\54\4\26\1\62" +
                    "\2\26\1\63\1\40\1\64\10\26\1\65\10\26\1\66" +
                    "\1\26\1\67\3\26\1\70\1\71\4\26\1\54\6\26" +
                    "\1\72\6\26\1\73\1\65\1\74\5\26\1\75\1\26" +
                    "\1\76\1\26\1\77\1\100\1\101\2\26\1\71\3\26" +
                    "\1\102\2\26\1\103\5\26\1\104\3\26\1\105\1\106" +
                    "\1\107\1\110\1\111\1\112\3\26\1\103\5\26\1\113" +
                    "\1\26\1\114\1\115\1\116\1\101\1\111\2\26\1\117" +
                    "\7\26\1\120\6\26\1\121\1\26\1\121\1\122";

    private static int[] zzUnpackAction() {
        int[] result = new int[258];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\111\0\222\0\333\0\u0124\0\111\0\111\0\u016d" +
                    "\0\111\0\111\0\111\0\111\0\111\0\u01b6\0\u01ff\0\u0248" +
                    "\0\111\0\u0291\0\u02da\0\111\0\111\0\u0323\0\111\0\111" +
                    "\0\111\0\u036c\0\111\0\u03b5\0\111\0\111\0\u03fe\0\u0447" +
                    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f" +
                    "\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7" +
                    "\0\111\0\111\0\111\0\u0920\0\111\0\111\0\111\0\111" +
                    "\0\111\0\111\0\111\0\u0969\0\111\0\111\0\111\0\u0124" +
                    "\0\111\0\u09b2\0\u016d\0\111\0\u09fb\0\u0a44\0\111\0\u03fe" +
                    "\0\111\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43" +
                    "\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u036c\0\u0db0\0\u0df9\0\u036c" +
                    "\0\u0e42\0\u0e8b\0\u036c\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8" +
                    "\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240" +
                    "\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u0124" +
                    "\0\111\0\u1488\0\111\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5" +
                    "\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u036c\0\u17f4" +
                    "\0\u183d\0\u1886\0\u18cf\0\u1918\0\u036c\0\u1961\0\u19aa\0\u036c" +
                    "\0\u036c\0\u036c\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60" +
                    "\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8" +
                    "\0\u1df1\0\u1e3a\0\u1e83\0\111\0\u1ecc\0\u036c\0\u1f15\0\u1f5e" +
                    "\0\u1fa7\0\u036c\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d" +
                    "\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u036c\0\u235c" +
                    "\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u036c\0\111\0\u036c" +
                    "\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u036c\0\u267f\0\u036c" +
                    "\0\u26c8\0\u036c\0\u036c\0\u036c\0\u2711\0\u275a\0\u036c\0\u27a3" +
                    "\0\u27ec\0\u2835\0\u036c\0\u287e\0\u28c7\0\u036c\0\u2910\0\u2959" +
                    "\0\u29a2\0\u29eb\0\u2a34\0\u036c\0\u2a7d\0\u2ac6\0\u2b0f\0\u036c" +
                    "\0\u036c\0\u036c\0\u036c\0\u2b58\0\u036c\0\u2ba1\0\u2bea\0\u2c33" +
                    "\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u036c\0\u2e32" +
                    "\0\u036c\0\u036c\0\u036c\0\u2e7b\0\111\0\u2ec4\0\u2f0d\0\u036c" +
                    "\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u036c" +
                    "\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354" +
                    "\0\111\0\u036c";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[258];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\32\1\37\1\40" +
                    "\1\41\1\42\1\43\1\44\1\45\2\32\1\46\2\32" +
                    "\1\47\1\50\1\51\1\52\1\32\1\53\1\54\1\55" +
                    "\1\56\1\32\1\57\1\32\1\60\1\61\1\62\1\63" +
                    "\1\64\1\32\1\2\1\65\1\66\1\67\1\70\1\71" +
                    "\1\72\1\73\1\74\1\75\1\76\1\77\112\0\2\3" +
                    "\133\0\1\73\63\0\4\100\1\101\26\100\1\102\55\100" +
                    "\7\103\1\104\101\103\26\0\1\77\100\0\1\105\104\0" +
                    "\1\106\116\0\2\22\14\0\1\22\74\0\1\72\113\0" +
                    "\1\107\103\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\30\32\4\0\2\32\46\0\1\74\55\0\37\110\1\111" +
                    "\51\110\20\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\21\32\1\112\6\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\20\32\1\113\7\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\1\114\12\32\1\115\2\32\1\116\11\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\4\32" +
                    "\1\117\23\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\13\32\1\120\1\32\1\121\10\32" +
                    "\1\122\1\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\1\123\12\32\1\124\1\32\1\125" +
                    "\1\126\4\32\1\127\4\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\5\32\1\130\6\32" +
                    "\1\131\1\132\3\32\1\133\6\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\1\134\3\32" +
                    "\1\135\23\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\1\136\7\32\1\137\17\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\1\140\3\32\1\141\3\32\1\142\5\32\1\143\4\32" +
                    "\1\144\4\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\1\32\1\145\26\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\1\146" +
                    "\3\32\1\147\23\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\22\32\1\150\5\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\20\32\1\151\6\32\1\152\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\15\32\1\153\3\32" +
                    "\1\154\6\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\7\32\1\155\1\156\17\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\10\32\1\157\17\32\4\0\2\32\33\0\2\64\7\0" +
                    "\1\64\6\0\30\64\21\0\2\74\1\0\106\74\4\100" +
                    "\1\160\26\100\1\102\55\100\24\0\2\161\63\0\12\106" +
                    "\1\162\76\106\3\0\1\163\14\0\2\32\5\0\1\163" +
                    "\1\0\1\32\4\0\1\32\1\0\30\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\4\32" +
                    "\1\164\23\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\21\32\1\165\1\166\5\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\1\167\27\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\15\32\1\170\12\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\5\32" +
                    "\1\125\22\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\21\32\1\171\6\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\23\32" +
                    "\1\172\4\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\2\32\1\173\17\32\1\174\5\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\13\32\1\175\14\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\1\176\27\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\20\32\1\177\7\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\15\32\1\200\12\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\17\32\1\201\10\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\3\32\1\202\16\32\1\203" +
                    "\5\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\14\32\1\204\13\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\22\32\1\205" +
                    "\5\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\2\32\1\206\17\32\1\166\5\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\2\32\1\206\25\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\14\32\1\207\13\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\25\32\1\210\2\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\13\32\1\211\14\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\22\32\1\212\5\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\13\32\1\213\14\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\11\32\1\214\16\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\10\32\1\215\17\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\21\32\1\216\1\217\5\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\20\32\1\220\7\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\1\221\22\32\1\222\3\32\1\223\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\17\32" +
                    "\1\224\10\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\10\32\1\225\11\32\1\226\5\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\10\32\1\227\17\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\4\32\1\230\3\32" +
                    "\1\231\17\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\22\32\1\232\5\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\4\32" +
                    "\1\233\23\32\4\0\2\32\13\0\12\106\1\162\4\106" +
                    "\1\234\71\106\20\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\1\235\27\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\4\32\1\236\23\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\2\32\1\237\25\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\21\32\1\240\6\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\22\32\1\241\5\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\4\32\1\242\23\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\14\32\1\243\13\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\13\32\1\244\14\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\4\32\1\245\23\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\13\32\1\246\5\32\1\222" +
                    "\6\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\6\32\1\247\21\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\2\32\1\250" +
                    "\25\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\13\32\1\251\14\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\23\32\1\252" +
                    "\4\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\4\32\1\253\23\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\1\32\1\254" +
                    "\26\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\20\32\1\255\7\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\4\32\1\256" +
                    "\23\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\13\32\1\257\14\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\4\32\1\260" +
                    "\23\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\21\32\1\261\6\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\23\32\1\262" +
                    "\4\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\23\32\1\263\4\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\23\32\1\264" +
                    "\4\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\10\32\1\265\17\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\4\32\1\266" +
                    "\23\32\4\0\2\32\16\0\1\267\14\0\2\32\5\0" +
                    "\1\267\1\0\1\32\4\0\1\32\1\0\30\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\4\32\1\270\16\32\1\271\4\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\16\32\1\272" +
                    "\3\32\1\273\5\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\10\32\1\274\17\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\15\32\1\275\12\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\15\32\1\276\12\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\13\32\1\277\14\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\7\32\1\300\20\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\13\32\1\301\14\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\12\32\1\302\15\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\7\32\1\303\20\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\21\32\1\304\6\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\10\32\1\305\17\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\4\32\1\306\14\32\1\307" +
                    "\6\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\23\32\1\310\4\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\15\32\1\311" +
                    "\12\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\22\32\1\312\5\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\21\32\1\313" +
                    "\6\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\22\32\1\314\5\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\10\32\1\315" +
                    "\16\32\1\316\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\2\32\1\317\25\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\20\32" +
                    "\1\320\7\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\3\32\1\321\24\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\16\32" +
                    "\1\125\11\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\21\32\1\322\6\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\2\32" +
                    "\1\323\25\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\4\32\1\324\23\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\14\32" +
                    "\1\325\13\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\20\32\1\326\7\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\2\32" +
                    "\1\327\25\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\22\32\1\330\5\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\21\32" +
                    "\1\270\6\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\15\32\1\331\12\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\4\32" +
                    "\1\332\23\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\13\32\1\333\14\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\6\32" +
                    "\1\334\21\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\4\32\1\333\23\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\3\32" +
                    "\1\335\24\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\15\32\1\336\12\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\20\32" +
                    "\1\337\7\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\3\32\1\340\24\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\3\32" +
                    "\1\341\24\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\7\32\1\342\20\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\10\32" +
                    "\1\343\17\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\14\32\1\344\13\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\22\32" +
                    "\1\345\5\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\5\32\1\346\22\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\1\347" +
                    "\27\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\17\32\1\350\10\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\22\32\1\351" +
                    "\5\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\4\32\1\352\23\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\15\32\1\353" +
                    "\12\32\4\0\2\32\33\0\2\32\7\0\1\32\4\0" +
                    "\1\32\1\0\22\32\1\354\5\32\4\0\2\32\16\0" +
                    "\1\355\14\0\2\32\5\0\1\355\1\0\1\32\4\0" +
                    "\1\32\1\0\30\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\4\0\1\32\1\0\23\32\1\356\4\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\4\0\1\32\1\0" +
                    "\1\357\27\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\4\32\1\360\23\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\21\32" +
                    "\1\316\6\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\20\32\1\361\7\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\16\32" +
                    "\1\362\11\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\4\32\1\363\23\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\10\32" +
                    "\1\364\17\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\4\0\1\32\1\0\1\365\27\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\4\0\1\32\1\0\1\366\27\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\23\32\1\367\4\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\4\32\1\370\23\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\22\32\1\371\5\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\16\32\1\372\11\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\15\32\1\125\12\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\15\32\1\373\12\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\24\32\1\273\3\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\2\32\1\374\25\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\2\32\1\375\25\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\20\32\1\374\7\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\4\32\1\307\23\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\23\32\1\376\4\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\22\32\1\341\5\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\4\32\1\304\23\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\4\0\1\32" +
                    "\1\0\4\32\1\377\23\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\4\0\1\32\1\0\6\32\1\u0100\21\32" +
                    "\4\0\2\32\16\0\1\u0101\14\0\2\32\5\0\1\u0101" +
                    "\1\0\1\32\4\0\1\32\1\0\30\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\4\0\1\32\1\0\7\32" +
                    "\1\u0102\20\32\4\0\2\32\13\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[13213];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\3\1\2\11\1\1\5\11\3\1\1\11" +
                    "\2\1\2\11\1\1\3\11\1\1\1\11\1\1\2\11" +
                    "\22\1\3\11\1\1\7\11\1\1\3\11\1\0\1\11" +
                    "\2\0\1\11\2\0\1\11\1\0\1\11\47\1\1\11" +
                    "\1\0\1\11\50\1\1\11\32\1\1\11\65\1\1\11" +
                    "\23\1\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[258];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 83:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 84:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 85:
                        break;
                    case 4: {
                        return HASH;
                    }
                    // fall through
                    case 86:
                        break;
                    case 5: {
                        return DOLLAR;
                    }
                    // fall through
                    case 87:
                        break;
                    case 6: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 88:
                        break;
                    case 7: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 89:
                        break;
                    case 8: {
                        return STAR;
                    }
                    // fall through
                    case 90:
                        break;
                    case 9: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 91:
                        break;
                    case 10: {
                        return COMMA;
                    }
                    // fall through
                    case 92:
                        break;
                    case 11: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 93:
                        break;
                    case 12: {
                        return DOT;
                    }
                    // fall through
                    case 94:
                        break;
                    case 13: {
                        return OP_DIV;
                    }
                    // fall through
                    case 95:
                        break;
                    case 14: {
                        return INTEGER;
                    }
                    // fall through
                    case 96:
                        break;
                    case 15: {
                        return COLON;
                    }
                    // fall through
                    case 97:
                        break;
                    case 16: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 98:
                        break;
                    case 17: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 99:
                        break;
                    case 18: {
                        return EQUAL;
                    }
                    // fall through
                    case 100:
                        break;
                    case 19: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 101:
                        break;
                    case 20: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 102:
                        break;
                    case 21: {
                        return AT;
                    }
                    // fall through
                    case 103:
                        break;
                    case 22: {
                        return SYMBOL;
                    }
                    // fall through
                    case 104:
                        break;
                    case 23: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 105:
                        break;
                    case 24: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 106:
                        break;
                    case 25: {
                        return OP_POW;
                    }
                    // fall through
                    case 107:
                        break;
                    case 26: {
                        return BRACE_L;
                    }
                    // fall through
                    case 108:
                        break;
                    case 27: {
                        return OP_OR;
                    }
                    // fall through
                    case 109:
                        break;
                    case 28: {
                        return BRACE_R;
                    }
                    // fall through
                    case 110:
                        break;
                    case 29: {
                        return COLOR;
                    }
                    // fall through
                    case 111:
                        break;
                    case 30: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 112:
                        break;
                    case 31: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 113:
                        break;
                    case 32: {
                        return KW_NIL;
                    }
                    // fall through
                    case 114:
                        break;
                    case 33: {
                        return PROPORTION;
                    }
                    // fall through
                    case 115:
                        break;
                    case 34: {
                        return OP_NE;
                    }
                    // fall through
                    case 116:
                        break;
                    case 35: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 117:
                        break;
                    case 36: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 118:
                        break;
                    case 37: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 119:
                        break;
                    case 38: {
                        return OP_ARROW1;
                    }
                    // fall through
                    case 120:
                        break;
                    case 39: {
                        return TEXT_DOUBLE;
                    }
                    // fall through
                    case 121:
                        break;
                    case 40: {
                        return TEXT_SINGLE;
                    }
                    // fall through
                    case 122:
                        break;
                    case 41: {
                        return OP_EQ;
                    }
                    // fall through
                    case 123:
                        break;
                    case 42: {
                        return SYMBOW_RAW;
            }
          // fall through
                    case 124:
                        break;
                    case 43: {
                        return KW_AS;
                    }
                    // fall through
                    case 125:
                        break;
                    case 44: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 126:
                        break;
                    case 45: {
                        return KW_IF;
                    }
                    // fall through
                    case 127:
                        break;
                    case 46: {
                        return KW_IN;
                    }
                    // fall through
                    case 128:
                        break;
                    case 47: {
                        return KW_IS;
                    }
                    // fall through
                    case 129:
                        break;
                    case 48: {
                        return OP_UNTIL;
                    }
                    // fall through
                    case 130:
                        break;
                    case 49: {
                        return KW_FOR;
                    }
                    // fall through
                    case 131:
                        break;
                    case 50: {
                        return KW_LET;
                    }
                    // fall through
                    case 132:
                        break;
                    case 51: {
                        return KW_NEW;
                    }
                    // fall through
                    case 133:
                        break;
                    case 52: {
                        return KW_NOT;
                    }
                    // fall through
                    case 134:
                        break;
                    case 53: {
                        return KW_TRY;
                    }
                    // fall through
                    case 135:
                        break;
                    case 54: {
                        return COMMENT_BLOCK;
                    }
                    // fall through
                    case 136:
                        break;
                    case 55: {
                        return KW_CASE;
                    }
                    // fall through
                    case 137:
                        break;
                    case 56: {
                        return KW_ELSE;
                    }
                    // fall through
                    case 138:
                        break;
                    case 57: {
                        return KW_ENUMERATE;
                    }
                    // fall through
                    case 139:
                        break;
                    case 58: {
                        return KW_NULL;
                    }
                    // fall through
                    case 140:
                        break;
                    case 59: {
                        return KW_BOOLEAN;
                    }
                    // fall through
                    case 141:
                        break;
                    case 60: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 142:
                        break;
                    case 61: {
                        return KW_WHEN;
                    }
                    // fall through
                    case 143:
                        break;
                    case 62: {
                        return KW_WITH;
                    }
                    // fall through
                    case 144:
                        break;
                    case 63: {
                        return KW_BREAK;
                    }
                    // fall through
                    case 145:
                        break;
                    case 64: {
                        return KW_MATCH;
                    }
                    // fall through
                    case 146:
                        break;
                    case 65: {
                        return KW_CLASS;
                    }
                    // fall through
                    case 147:
                        break;
                    case 66: {
                        return KW_FLAGS;
                    }
                    // fall through
                    case 148:
                        break;
                    case 67: {
                        return KW_IMPLY;
                    }
                    // fall through
                    case 149:
                        break;
                    case 68: {
                        return KW_RAISE;
                    }
                    // fall through
                    case 150:
                        break;
                    case 69: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 151:
                        break;
                    case 70: {
                        return KW_UNION;
                    }
                    // fall through
                    case 152:
                        break;
                    case 71: {
                        return KW_UNITE;
            }
          // fall through
                    case 153:
                        break;
                    case 72: {
                        return KW_WHILE;
                    }
                    // fall through
                    case 154:
                        break;
                    case 73: {
                        return KW_USING;
            }
          // fall through
                    case 155:
                        break;
                    case 74: {
                        return KW_YIELD;
                    }
                    // fall through
                    case 156:
                        break;
                    case 75: {
                        return KW_LAMBDA;
                    }
                    // fall through
                    case 157:
                        break;
                    case 76: {
                        return KW_OBJECT;
            }
          // fall through
                    case 158:
                        break;
                    case 77: {
                        return KW_RESUME;
            }
          // fall through
                    case 159:
                        break;
                    case 78: {
                        return KW_RETURN;
                    }
                    // fall through
                    case 160:
                        break;
                    case 79: {
                        return KW_EXCLUDE;
                    }
          // fall through
                    case 161:
                        break;
                    case 80:
            { return KW_CONTINUE;
            }
          // fall through
                    case 162: break;
          case 81:
            { return KW_NAMESPACE;
            }
          // fall through
          case 163: break;
          case 82:
            { return KW_THROUGH;
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
