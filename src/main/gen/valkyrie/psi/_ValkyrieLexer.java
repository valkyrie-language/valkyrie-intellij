// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int TextCapture6 = 2;
    public static final int TextCapture3 = 4;
    public static final int TextCapture2 = 6;
    public static final int TextCapture1 = 8;
    public static final int IntegerHandler = 10;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1,  2,  2, 3, 3, 4, 4, 5, 5
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\1\u2100\1\u2300" +
                    "\1\u2400\1\u2100\1\u2500\1\u2600\1\u2700\1\u2100\1\u2800\1\u2900" +
                    "\2\u2100\31\u0100\1\u2a00\121\u0100\1\u2b00\4\u0100\1\u2c00\1\u0100" +
                    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\53\u0100\1\u3300" +
                    "\41\u2100\1\u0100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900" +
                    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u0100\1\u4000" +
                    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u2100\1\u4700" +
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00" +
                    "\1\u5000\1\u5100\1\u5200\1\u2100\1\u5300\1\u5400\1\u5500\1\u2100" +
                    "\3\u0100\1\u5600\1\u5700\1\u5800\12\u2100\4\u0100\1\u5900\17\u2100" +
                    "\2\u0100\1\u5a00\41\u2100\2\u0100\1\u5b00\1\u5c00\2\u2100\1\u5d00" +
                    "\1\u5e00\27\u0100\1\u5f00\2\u0100\1\u6000\45\u2100\1\u0100\1\u6100" +
                    "\1\u6200\11\u2100\1\u6300\24\u2100\1\u6400\1\u6500\1\u2100\1\u6600" +
                    "\1\u6700\1\u6800\1\u6900\2\u2100\1\u6a00\5\u2100\1\u6b00\1\u6c00" +
                    "\1\u6d00\5\u2100\1\u6e00\1\u6f00\4\u2100\1\u7000\21\u2100\246\u0100" +
                    "\1\u7100\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500" +
                    "\14\u2100\2\u0100\1\u7600\u0b06\u2100\1\u7700\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\13\33" +
                    "\1\34\1\33\1\35\14\33\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61" +
                    "\1\62\1\63\1\33\1\64\1\65\1\66\1\67\1\70" +
                    "\1\71\1\72\1\73\1\33\1\74\1\75\1\76\7\0" +
                    "\1\1\32\0\1\1\10\0\1\77\1\100\1\0\1\101" +
                    "\1\0\1\77\6\0\1\100\1\102\1\103\2\0\1\100" +
                    "\5\0\27\100\1\104\37\100\1\105\u01ca\100\4\0\14\100" +
                    "\16\0\5\100\7\0\1\100\1\0\1\100\21\0\160\103" +
                    "\5\100\1\0\2\100\3\0\3\100\1\0\1\100\6\0" +
                    "\1\100\1\103\3\100\1\0\1\100\1\0\24\100\1\0" +
                    "\123\100\1\0\213\100\1\0\5\103\2\0\246\100\1\0" +
                    "\46\100\2\0\1\100\6\0\51\100\10\0\55\103\1\0" +
                    "\1\103\1\0\2\103\1\0\2\103\1\0\1\103\10\0" +
                    "\33\100\4\0\4\100\35\0\13\103\5\0\53\100\37\103" +
                    "\4\0\2\100\1\103\143\100\1\0\1\100\7\103\2\0" +
                    "\6\103\2\100\2\103\1\0\4\103\2\100\12\103\3\100" +
                    "\2\0\1\100\20\0\1\100\1\103\36\100\33\103\2\0" +
                    "\131\100\13\103\1\100\16\0\12\103\41\100\11\103\2\100" +
                    "\4\0\1\100\2\0\1\103\2\0\26\100\4\103\1\100" +
                    "\11\103\1\100\3\103\1\100\5\103\22\0\31\100\3\103" +
                    "\4\0\13\100\65\0\25\100\1\0\10\100\25\0\17\103" +
                    "\1\0\41\103\66\100\3\103\1\100\22\103\1\100\7\103" +
                    "\12\100\2\103\2\0\12\103\1\0\20\100\3\103\1\0" +
                    "\10\100\2\0\2\100\2\0\26\100\1\0\7\100\1\0" +
                    "\1\100\3\0\4\100\2\0\1\103\1\100\7\103\2\0" +
                    "\2\103\2\0\3\103\1\100\10\0\1\103\4\0\2\100" +
                    "\1\0\3\100\2\103\2\0\12\103\2\100\12\0\1\100" +
                    "\1\0\1\103\2\0\3\103\1\0\6\100\4\0\2\100" +
                    "\2\0\26\100\1\0\7\100\1\0\2\100\1\0\2\100" +
                    "\1\0\2\100\2\0\1\103\1\0\5\103\4\0\2\103" +
                    "\2\0\3\103\3\0\1\103\7\0\4\100\1\0\1\100" +
                    "\7\0\14\103\3\100\1\103\13\0\3\103\1\0\11\100" +
                    "\1\0\3\100\1\0\26\100\1\0\7\100\1\0\2\100" +
                    "\1\0\5\100\2\0\1\103\1\100\10\103\1\0\3\103" +
                    "\1\0\3\103\2\0\1\100\17\0\2\100\2\103\2\0" +
                    "\12\103\11\0\1\100\6\103\1\0\3\103\1\0\10\100" +
                    "\2\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100" +
                    "\1\0\5\100\2\0\1\103\1\100\7\103\2\0\2\103" +
                    "\2\0\3\103\10\0\2\103\4\0\2\100\1\0\3\100" +
                    "\2\103\2\0\12\103\1\0\1\100\20\0\1\103\1\100" +
                    "\1\0\6\100\3\0\3\100\1\0\4\100\3\0\2\100" +
                    "\1\0\1\100\1\0\2\100\3\0\2\100\3\0\3\100" +
                    "\3\0\14\100\4\0\5\103\3\0\3\103\1\0\4\103" +
                    "\2\0\1\100\6\0\1\103\16\0\12\103\20\0\5\103" +
                    "\10\100\1\0\3\100\1\0\27\100\1\0\20\100\3\0" +
                    "\1\100\7\103\1\0\3\103\1\0\4\103\7\0\2\103" +
                    "\1\0\3\100\5\0\2\100\2\103\2\0\12\103\20\0" +
                    "\1\100\3\103\1\0\10\100\1\0\3\100\1\0\27\100" +
                    "\1\0\12\100\1\0\5\100\2\0\1\103\1\100\7\103" +
                    "\1\0\3\103\1\0\4\103\7\0\2\103\7\0\1\100" +
                    "\1\0\2\100\2\103\2\0\12\103\1\0\2\100\15\0" +
                    "\4\103\1\0\10\100\1\0\3\100\1\0\51\100\2\103" +
                    "\1\100\7\103\1\0\3\103\1\0\4\103\1\100\5\0" +
                    "\3\100\1\103\7\0\3\100\2\103\2\0\12\103\12\0" +
                    "\6\100\2\0\2\103\1\0\22\100\3\0\30\100\1\0" +
                    "\11\100\1\0\1\100\2\0\7\100\3\0\1\103\4\0" +
                    "\6\103\1\0\1\103\1\0\10\103\6\0\12\103\2\0" +
                    "\2\103\15\0\60\100\1\103\1\100\10\103\5\0\7\100" +
                    "\10\103\1\0\12\103\47\0\2\100\1\0\1\100\1\0" +
                    "\5\100\1\0\30\100\1\0\1\100\1\0\12\100\1\103" +
                    "\1\100\12\103\1\100\2\0\5\100\1\0\1\100\1\0" +
                    "\6\103\2\0\12\103\2\0\4\100\40\0\1\100\27\0" +
                    "\2\103\6\0\12\103\13\0\1\103\1\0\1\103\1\0" +
                    "\1\103\4\0\2\103\10\100\1\0\44\100\4\0\24\103" +
                    "\1\0\2\103\5\100\13\103\1\0\44\103\11\0\1\103" +
                    "\71\0\53\100\24\103\1\100\12\103\6\0\6\100\4\103" +
                    "\4\100\3\103\1\100\3\103\2\100\7\103\3\100\4\103" +
                    "\15\100\14\103\1\100\17\103\2\0\46\100\1\0\1\100" +
                    "\5\0\1\100\2\0\53\100\1\0\115\100\1\0\4\100" +
                    "\2\0\7\100\1\0\1\100\1\0\4\100\2\0\51\100" +
                    "\1\0\4\100\2\0\41\100\1\0\4\100\2\0\7\100" +
                    "\1\0\1\100\1\0\4\100\2\0\17\100\1\0\71\100" +
                    "\1\0\4\100\2\0\103\100\2\0\3\103\11\0\11\103" +
                    "\16\0\20\100\20\0\126\100\2\0\6\100\3\0\u016c\100" +
                    "\2\0\21\100\1\1\32\100\5\0\113\100\3\0\13\100" +
                    "\7\0\15\100\1\0\4\100\3\103\13\0\22\100\3\103" +
                    "\13\0\22\100\2\103\14\0\15\100\1\0\3\100\1\0" +
                    "\2\103\14\0\64\100\40\103\3\0\1\100\4\0\1\100" +
                    "\1\103\2\0\12\103\41\0\3\103\2\0\12\103\6\0" +
                    "\131\100\7\0\51\100\1\103\1\100\5\0\106\100\12\0" +
                    "\37\100\1\0\14\103\4\0\14\103\12\0\12\103\36\100" +
                    "\2\0\5\100\13\0\54\100\4\0\32\100\6\0\13\103" +
                    "\45\0\27\100\5\103\4\0\65\100\12\103\1\0\35\103" +
                    "\2\0\13\103\6\0\12\103\15\0\1\100\10\0\16\103" +
                    "\102\0\5\103\57\100\21\103\7\100\4\0\12\103\21\0" +
                    "\11\103\14\0\3\103\36\100\15\103\2\100\12\103\54\100" +
                    "\16\103\14\0\44\100\24\103\10\0\12\103\3\0\3\100" +
                    "\12\103\44\100\2\0\11\100\7\0\53\100\2\0\3\100" +
                    "\20\0\3\103\1\0\25\103\4\100\1\103\6\100\1\103" +
                    "\2\100\3\103\1\100\5\0\300\100\72\103\1\0\5\103" +
                    "\26\100\2\0\6\100\2\0\46\100\2\0\6\100\2\0" +
                    "\10\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0" +
                    "\37\100\2\0\65\100\1\0\7\100\1\0\1\100\3\0" +
                    "\3\100\1\0\7\100\3\0\4\100\2\0\6\100\4\0" +
                    "\15\100\5\0\3\100\1\0\7\100\3\0\13\1\32\0" +
                    "\1\106\1\107\1\0\2\1\5\0\1\1\13\0\1\110" +
                    "\3\0\2\103\3\0\1\111\1\112\1\113\4\0\1\114" +
                    "\6\0\1\115\1\0\1\103\7\0\1\116\2\0\1\1" +
                    "\21\0\1\100\15\0\1\100\20\0\15\100\63\0\15\103" +
                    "\4\0\1\103\3\0\14\103\21\0\1\100\1\117\3\0" +
                    "\1\100\1\0\1\120\12\100\1\0\1\100\2\0\6\100" +
                    "\6\0\1\100\1\0\1\100\1\0\1\100\1\0\20\100" +
                    "\2\0\4\100\5\0\5\100\4\0\1\100\21\0\51\100" +
                    "\7\0\1\121\101\0\1\122\62\0\1\123\17\0\1\111" +
                    "\21\0\1\124\1\125\15\0\1\24\1\126\50\0\1\127" +
                    "\3\0\1\130\1\131\4\0\1\132\1\133\117\0\1\134" +
                    "\1\135\1\136\32\0\1\137\1\140\203\0\1\141\u0203\0" +
                    "\1\102\206\0\1\142\1\143\14\0\1\144\214\0\1\145" +
                    "\1\146\1\147\1\150\330\0\1\151\35\0\1\130\1\131" +
                    "\201\0\57\100\1\0\57\100\1\0\205\100\6\0\4\100" +
                    "\3\103\2\100\14\0\46\100\1\0\1\100\5\0\1\100" +
                    "\2\0\70\100\7\0\1\100\17\0\1\103\27\100\11\0" +
                    "\7\100\1\0\7\100\1\0\7\100\1\0\7\100\1\0" +
                    "\7\100\1\0\7\100\1\0\7\100\1\0\7\100\1\0" +
                    "\40\103\54\0\1\126\22\0\1\152\300\0\1\1\1\0" +
                    "\1\20\2\0\3\100\31\0\11\100\6\103\1\0\5\100" +
                    "\2\0\5\100\4\0\126\100\2\0\2\103\2\0\3\100" +
                    "\1\0\132\100\1\0\4\100\5\0\53\100\1\0\136\100" +
                    "\21\0\33\100\65\0\306\100\112\0\360\100\20\0\215\100" +
                    "\103\0\56\100\2\0\15\100\3\0\20\100\12\103\2\100" +
                    "\24\0\57\100\1\103\4\0\12\103\1\0\37\100\2\103" +
                    "\120\100\2\103\45\0\11\100\2\0\147\100\2\0\65\100" +
                    "\2\0\5\100\60\0\13\100\1\103\3\100\1\103\4\100" +
                    "\1\103\27\100\5\103\30\0\64\100\14\0\2\103\62\100" +
                    "\22\103\12\0\12\103\6\0\22\103\6\100\3\0\1\100" +
                    "\1\0\2\100\13\103\34\100\10\103\2\0\27\100\15\103" +
                    "\14\0\35\100\3\0\4\103\57\100\16\103\16\0\1\100" +
                    "\12\103\6\0\5\100\1\103\12\100\12\103\5\100\1\0" +
                    "\51\100\16\103\11\0\3\100\1\103\10\100\2\103\2\0" +
                    "\12\103\6\0\27\100\3\0\1\100\3\103\62\100\1\103" +
                    "\1\100\3\103\2\100\2\103\5\100\2\103\1\100\1\103" +
                    "\1\100\30\0\3\100\2\0\13\100\5\103\2\0\3\100" +
                    "\2\103\12\0\6\100\2\0\6\100\2\0\6\100\11\0" +
                    "\7\100\1\0\7\100\1\0\53\100\1\0\14\100\10\0" +
                    "\163\100\10\103\1\0\2\103\2\0\12\103\6\0\244\100" +
                    "\14\0\27\100\4\0\61\100\4\0\156\100\2\0\152\100" +
                    "\46\0\7\100\14\0\5\100\5\0\1\100\1\103\12\100" +
                    "\1\0\15\100\1\0\5\100\1\0\1\100\1\0\2\100" +
                    "\1\0\2\100\1\0\154\100\41\0\213\100\6\0\332\100" +
                    "\22\0\100\100\2\0\66\100\50\0\12\100\6\0\20\103" +
                    "\20\0\20\103\3\0\2\103\30\0\3\103\41\0\1\100" +
                    "\1\0\1\100\3\0\1\100\1\0\1\100\1\0\1\100" +
                    "\1\0\1\100\1\0\176\100\4\0\1\153\12\0\1\16" +
                    "\3\0\12\103\1\24\4\0\1\154\1\0\32\100\4\0" +
                    "\1\103\1\0\32\100\13\0\70\100\2\103\37\100\3\0" +
                    "\6\100\2\0\6\100\2\0\6\100\2\0\3\100\43\0" +
                    "\14\100\1\0\32\100\1\0\23\100\1\0\2\100\1\0" +
                    "\17\100\2\0\16\100\42\0\173\100\105\0\65\100\210\0" +
                    "\1\103\202\0\35\100\3\0\61\100\17\0\1\103\37\0" +
                    "\40\100\15\0\36\100\5\0\46\100\5\103\5\0\36\100" +
                    "\2\0\44\100\4\0\10\100\1\0\5\100\52\0\236\100" +
                    "\2\0\12\103\6\0\44\100\4\0\44\100\4\0\50\100" +
                    "\10\0\64\100\234\0\67\100\11\0\26\100\12\0\10\100" +
                    "\230\0\6\100\2\0\1\100\1\0\54\100\1\0\2\100" +
                    "\3\0\1\100\2\0\27\100\12\0\27\100\11\0\37\100" +
                    "\101\0\23\100\1\0\2\100\12\0\26\100\12\0\32\100" +
                    "\106\0\70\100\6\0\2\100\100\0\1\100\3\103\1\0" +
                    "\2\103\5\0\4\103\4\100\1\0\3\100\1\0\35\100" +
                    "\2\0\3\103\4\0\1\103\40\0\35\100\3\0\35\100" +
                    "\43\0\10\100\1\0\34\100\2\103\31\0\66\100\12\0" +
                    "\26\100\12\0\23\100\15\0\22\100\156\0\111\100\67\0" +
                    "\63\100\15\0\63\100\15\0\44\100\4\103\10\0\12\103" +
                    "\306\0\35\100\12\0\1\100\10\0\26\100\13\103\217\0" +
                    "\27\100\11\0\3\103\65\100\17\103\37\0\12\103\17\0" +
                    "\4\103\55\100\13\103\25\0\31\100\7\0\12\103\6\0" +
                    "\3\103\44\100\16\103\1\0\12\103\4\0\1\100\2\103" +
                    "\11\0\43\100\1\103\2\0\1\100\11\0\3\103\60\100" +
                    "\16\103\4\100\4\0\4\103\3\0\12\103\1\100\1\0" +
                    "\1\100\43\0\22\100\1\0\31\100\14\103\6\0\1\103" +
                    "\101\0\7\100\1\0\1\100\1\0\4\100\1\0\17\100" +
                    "\1\0\12\100\7\0\57\100\14\103\5\0\12\103\6\0" +
                    "\4\103\1\0\10\100\2\0\2\100\2\0\26\100\1\0" +
                    "\7\100\1\0\2\100\1\0\5\100\1\0\2\103\1\100" +
                    "\7\103\2\0\2\103\2\0\3\103\2\0\1\100\6\0" +
                    "\1\103\5\0\5\100\2\103\2\0\7\103\3\0\5\103" +
                    "\213\0\65\100\22\103\4\100\5\0\12\103\4\0\1\103" +
                    "\1\100\40\0\60\100\24\103\2\100\1\0\1\100\10\0" +
                    "\12\103\246\0\57\100\7\103\2\0\11\103\27\0\4\100" +
                    "\2\103\42\0\60\100\21\103\3\0\1\100\13\0\12\103" +
                    "\46\0\53\100\15\103\1\100\7\0\12\103\66\0\33\100" +
                    "\2\0\17\103\4\0\12\103\306\0\54\100\17\103\145\0" +
                    "\100\100\12\103\25\0\1\100\240\0\10\100\2\0\47\100" +
                    "\7\103\2\0\7\103\1\100\1\0\1\100\1\103\33\0" +
                    "\1\100\12\103\50\100\7\103\1\100\4\103\10\0\1\103" +
                    "\10\0\1\100\13\103\56\100\20\103\3\0\1\100\42\0" +
                    "\71\100\7\0\11\100\1\0\45\100\10\103\1\0\10\103" +
                    "\1\100\17\0\12\103\30\0\36\100\2\0\26\103\1\0" +
                    "\16\103\111\0\7\100\1\0\2\100\1\0\46\100\6\103" +
                    "\3\0\1\103\1\0\2\103\1\0\7\103\1\100\1\103" +
                    "\10\0\12\103\6\0\6\100\1\0\2\100\1\0\40\100" +
                    "\5\103\1\0\2\103\1\0\5\103\1\100\7\0\12\103" +
                    "\u0136\0\23\100\4\103\11\0\232\100\146\0\157\100\21\0" +
                    "\304\100\274\0\57\100\321\0\107\100\271\0\71\100\7\0" +
                    "\37\100\1\0\12\103\146\0\36\100\2\0\5\103\13\0" +
                    "\60\100\7\103\11\0\4\100\14\0\12\103\11\0\25\100" +
                    "\5\0\23\100\260\0\100\100\200\0\113\100\4\0\1\103" +
                    "\1\100\67\103\7\0\4\103\15\100\100\0\2\100\1\0" +
                    "\1\100\34\0\370\100\10\0\363\100\15\0\37\100\61\0" +
                    "\3\100\21\0\4\100\10\0\u018c\100\4\0\153\100\5\0" +
                    "\15\100\3\0\11\100\7\0\12\100\3\0\2\103\306\0" +
                    "\5\103\3\0\6\103\10\0\10\103\2\0\7\103\36\0" +
                    "\4\103\224\0\3\103\273\0\125\100\1\0\107\100\1\0" +
                    "\2\100\2\0\1\100\2\0\2\100\2\0\4\100\1\0" +
                    "\14\100\1\0\1\100\1\0\7\100\1\0\101\100\1\0" +
                    "\4\100\2\0\10\100\1\0\7\100\1\0\34\100\1\0" +
                    "\4\100\1\0\5\100\1\0\1\100\3\0\7\100\1\0" +
                    "\u0154\100\2\0\31\100\1\0\31\100\1\0\37\100\1\0" +
                    "\31\100\1\0\37\100\1\0\31\100\1\0\37\100\1\0" +
                    "\31\100\1\0\37\100\1\0\31\100\1\0\10\100\2\0" +
                    "\151\103\4\0\62\103\10\0\1\103\16\0\1\103\26\0" +
                    "\5\103\1\0\17\103\120\0\7\103\1\0\21\103\2\0" +
                    "\7\103\1\0\2\103\1\0\5\103\325\0\55\100\3\0" +
                    "\7\103\7\100\2\0\12\103\4\0\1\100\u0171\0\54\100" +
                    "\16\103\6\0\305\100\13\0\7\103\51\0\104\100\7\103" +
                    "\1\100\4\0\12\103\246\0\4\100\1\0\33\100\1\0" +
                    "\2\100\1\0\1\100\2\0\1\100\1\0\12\100\1\0" +
                    "\4\100\1\0\1\100\1\0\1\100\6\0\1\100\4\0" +
                    "\1\100\1\0\1\100\1\0\1\100\1\0\3\100\1\0" +
                    "\2\100\1\0\1\100\2\0\1\100\1\0\1\100\1\0" +
                    "\1\100\1\0\1\100\1\0\1\100\1\0\2\100\1\0" +
                    "\1\100\2\0\4\100\1\0\7\100\1\0\4\100\1\0" +
                    "\4\100\1\0\1\100\1\0\12\100\1\0\21\100\5\0" +
                    "\3\100\1\0\5\100\1\0\21\100\104\0\327\100\51\0" +
                    "\65\100\13\0\336\100\2\0\u0182\100\16\0\u0131\100\37\0" +
                    "\36\100\342\0\360\103\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30720];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27" +
                    "\1\30\1\31\1\32\1\33\1\1\1\34\1\35\1\1" +
                    "\22\32\1\36\1\37\1\40\1\41\1\42\1\43\1\44" +
                    "\1\45\1\46\1\47\1\50\1\21\1\51\1\52\1\53" +
                    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63" +
                    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73" +
                    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103" +
                    "\1\104\1\105\1\106\1\107\4\110\1\111\3\0\1\112" +
                    "\1\113\1\114\1\46\1\115\1\116\1\117\1\120\1\121" +
                    "\1\122\1\0\1\123\1\124\13\32\1\125\4\32\1\126" +
                    "\1\32\1\127\1\130\27\32\2\0\1\131\1\132\1\133" +
                    "\1\134\1\135\1\124\16\32\1\125\5\32\1\136\6\32" +
                    "\1\137\1\61\1\140\12\32\1\141\12\32\1\142\4\32" +
                    "\1\143\1\144\6\32\1\145\1\125\5\32\1\146\5\32" +
                    "\1\147\10\32\1\150\1\141\1\151\5\32\1\152\3\32" +
                    "\1\153\1\32\1\154\1\155\1\156\3\32\1\157\3\32" +
                    "\1\160\4\32\1\161\3\32\1\162\1\163\3\32\1\164" +
                    "\5\32\1\165\1\166\1\167\1\170\1\171\1\172\1\173" +
                    "\1\32\1\174\4\32\1\161\1\32\1\175\5\32\1\176" +
                    "\1\32\1\177\1\200\1\201\1\202\1\32\1\156\1\32" +
                    "\1\171\1\203\3\32\1\204\12\32\1\205\10\32\1\206" +
                    "\1\207\1\32\1\206\1\210";

    private static int[] zzUnpackAction() {
        int[] result = new int[361];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\155\0\332\0\u0147\0\u01b4\0\u0221\0\u028e\0\u02fb" +
                    "\0\u028e\0\u0368\0\u028e\0\u028e\0\u028e\0\u03d5\0\u0442\0\u028e" +
                    "\0\u028e\0\u04af\0\u051c\0\u028e\0\u0589\0\u05f6\0\u0663\0\u028e" +
                    "\0\u06d0\0\u073d\0\u028e\0\u07aa\0\u0817\0\u0884\0\u08f1\0\u028e" +
                    "\0\u095e\0\u028e\0\u09cb\0\u028e\0\u0a38\0\u0aa5\0\u0b12\0\u0b7f" +
                    "\0\u0bec\0\u0c59\0\u0cc6\0\u0d33\0\u0da0\0\u0e0d\0\u0e7a\0\u0ee7" +
                    "\0\u0f54\0\u0fc1\0\u102e\0\u109b\0\u1108\0\u1175\0\u11e2\0\u124f" +
                    "\0\u028e\0\u12bc\0\u028e\0\u1329\0\u1396\0\u028e\0\u04af\0\u028e" +
                    "\0\u028e\0\u028e\0\u028e\0\u1403\0\u028e\0\u028e\0\u028e\0\u028e" +
                    "\0\u028e\0\u028e\0\u028e\0\u028e\0\u028e\0\u028e\0\u028e\0\u028e" +
                    "\0\u028e\0\u028e\0\u028e\0\u028e\0\u028e\0\u028e\0\u028e\0\u028e" +
                    "\0\u028e\0\u028e\0\u1470\0\u028e\0\u028e\0\u028e\0\u028e\0\u028e" +
                    "\0\u028e\0\u028e\0\u028e\0\u14dd\0\u154a\0\u15b7\0\u1624\0\u028e" +
                    "\0\u1691\0\u16fe\0\u176b\0\u028e\0\u028e\0\u028e\0\u17d8\0\u028e" +
                    "\0\u028e\0\u1845\0\u028e\0\u028e\0\u028e\0\u0aa5\0\u028e\0\u18b2" +
                    "\0\u191f\0\u198c\0\u19f9\0\u1a66\0\u1ad3\0\u1b40\0\u1bad\0\u1c1a" +
                    "\0\u1c87\0\u1cf4\0\u1d61\0\u095e\0\u1dce\0\u1e3b\0\u1ea8\0\u1f15" +
                    "\0\u095e\0\u1f82\0\u1fef\0\u095e\0\u205c\0\u20c9\0\u2136\0\u21a3" +
                    "\0\u2210\0\u227d\0\u22ea\0\u2357\0\u23c4\0\u2431\0\u249e\0\u250b" +
                    "\0\u2578\0\u25e5\0\u2652\0\u26bf\0\u272c\0\u2799\0\u2806\0\u2873" +
                    "\0\u28e0\0\u294d\0\u29ba\0\u2a27\0\u2a94\0\u028e\0\u028e\0\u028e" +
                    "\0\u028e\0\u028e\0\u028e\0\u2b01\0\u2b6e\0\u2bdb\0\u2c48\0\u2cb5" +
                    "\0\u2d22\0\u2d8f\0\u2dfc\0\u2e69\0\u2ed6\0\u2f43\0\u2fb0\0\u301d" +
                    "\0\u308a\0\u30f7\0\u3164\0\u31d1\0\u323e\0\u32ab\0\u3318\0\u095e" +
                    "\0\u3385\0\u33f2\0\u345f\0\u34cc\0\u3539\0\u35a6\0\u095e\0\u095e" +
                    "\0\u095e\0\u3613\0\u3680\0\u36ed\0\u375a\0\u37c7\0\u3834\0\u38a1" +
                    "\0\u390e\0\u397b\0\u39e8\0\u3a55\0\u3ac2\0\u3b2f\0\u3b9c\0\u3c09" +
                    "\0\u3c76\0\u3ce3\0\u3d50\0\u3dbd\0\u3e2a\0\u3e97\0\u095e\0\u3f04" +
                    "\0\u3f71\0\u3fde\0\u404b\0\u095e\0\u095e\0\u40b8\0\u4125\0\u4192" +
                    "\0\u41ff\0\u426c\0\u42d9\0\u095e\0\u4346\0\u43b3\0\u4420\0\u448d" +
                    "\0\u44fa\0\u4567\0\u095e\0\u45d4\0\u4641\0\u46ae\0\u471b\0\u4788" +
                    "\0\u095e\0\u47f5\0\u4862\0\u48cf\0\u493c\0\u49a9\0\u4a16\0\u4a83" +
                    "\0\u4af0\0\u095e\0\u028e\0\u095e\0\u4b5d\0\u4bca\0\u4c37\0\u4ca4" +
                    "\0\u4d11\0\u095e\0\u4d7e\0\u4deb\0\u4e58\0\u095e\0\u4ec5\0\u095e" +
                    "\0\u095e\0\u095e\0\u4f32\0\u4f9f\0\u500c\0\u095e\0\u5079\0\u50e6" +
                    "\0\u5153\0\u095e\0\u51c0\0\u522d\0\u529a\0\u5307\0\u095e\0\u5374" +
                    "\0\u53e1\0\u544e\0\u095e\0\u095e\0\u54bb\0\u5528\0\u5595\0\u095e" +
                    "\0\u5602\0\u566f\0\u56dc\0\u5749\0\u57b6\0\u095e\0\u095e\0\u095e" +
                    "\0\u095e\0\u5823\0\u095e\0\u095e\0\u5890\0\u095e\0\u58fd\0\u596a" +
                    "\0\u59d7\0\u5a44\0\u5ab1\0\u5b1e\0\u095e\0\u5b8b\0\u5bf8\0\u5c65" +
                    "\0\u5cd2\0\u5d3f\0\u095e\0\u5dac\0\u095e\0\u095e\0\u095e\0\u095e" +
                    "\0\u5e19\0\u5e86\0\u5ef3\0\u028e\0\u095e\0\u5f60\0\u5fcd\0\u603a" +
                    "\0\u095e\0\u60a7\0\u6114\0\u6181\0\u61ee\0\u625b\0\u62c8\0\u6335" +
                    "\0\u63a2\0\u640f\0\u647c\0\u095e\0\u64e9\0\u6556\0\u65c3\0\u6630" +
                    "\0\u669d\0\u670a\0\u6777\0\u67e4\0\u6851\0\u095e\0\u68be\0\u028e" +
                    "\0\u095e";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[361];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16" +
                    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
                    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36" +
                    "\1\37\1\40\3\41\1\42\1\43\1\44\1\45\1\41" +
                    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55" +
                    "\1\41\1\56\2\41\1\57\1\60\1\61\1\62\1\41" +
                    "\1\63\1\64\1\65\1\66\1\41\1\67\1\41\1\70" +
                    "\1\71\1\72\1\73\1\74\1\41\1\75\1\76\1\7" +
                    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106" +
                    "\1\107\1\15\1\110\1\111\1\112\1\113\1\114\1\115" +
                    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125" +
                    "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135" +
                    "\1\136\1\7\1\137\1\140\1\141\1\142\1\143\1\11" +
                    "\1\37\4\144\1\145\150\144\11\146\1\147\143\146\4\144" +
                    "\1\150\150\144\11\146\1\150\143\146\155\7\156\0\2\10" +
                    "\156\0\1\151\160\0\1\116\155\0\1\152\133\0\1\153" +
                    "\36\0\1\154\154\0\1\155\154\0\1\156\1\136\144\0" +
                    "\1\157\143\0\1\100\17\0\1\160\147\0\2\31\16\0" +
                    "\1\31\136\0\1\120\4\0\1\161\122\0\1\161\17\0" +
                    "\1\113\7\0\1\122\154\0\1\162\1\114\153\0\1\123" +
                    "\151\0\1\161\2\0\1\163\1\0\1\164\122\0\1\164" +
                    "\22\0\2\41\7\0\3\41\4\0\1\41\1\0\30\41" +
                    "\4\0\1\41\2\0\1\41\56\0\1\74\26\0\1\143" +
                    "\1\110\1\0\1\133\17\0\1\103\124\0\1\165\125\0" +
                    "\43\166\1\167\111\166\22\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\21\41\1\170\6\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\20\41\1\171\7\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\1\172\12\41" +
                    "\1\173\2\41\1\174\11\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\4\41" +
                    "\1\175\23\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\1\176\12\41\1\177" +
                    "\1\41\1\200\10\41\1\201\1\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\1\202\12\41\1\203\1\41\1\204\1\205\1\41\1\206" +
                    "\2\41\1\207\4\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\4\41\1\210" +
                    "\23\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\5\41\1\211\6\41\1\212" +
                    "\1\213\3\41\1\214\6\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\1\215" +
                    "\3\41\1\216\11\41\1\217\11\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\1\220\7\41\1\221\17\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\1\222" +
                    "\3\41\1\223\3\41\1\224\5\41\1\225\4\41\1\226" +
                    "\4\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\1\41\1\227\26\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\1\230\3\41\1\231\23\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\10\41\1\232\11\41\1\233\5\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\4\41\1\234\13\41\1\235\6\41\1\236\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\15\41\1\237\3\41\1\240\6\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\7\41\1\241\1\242\17\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\10\41\1\243\17\41\4\0\1\41\2\0\1\41" +
                    "\146\0\1\117\101\0\2\74\7\0\3\74\6\0\30\74" +
                    "\107\0\1\123\1\121\1\122\153\0\1\160\125\0\2\133" +
                    "\1\0\152\133\4\144\1\0\150\144\4\0\1\244\150\0" +
                    "\11\146\1\0\143\146\11\0\1\245\147\0\1\246\161\0" +
                    "\1\247\154\0\1\250\163\0\1\102\5\0\2\251\155\0" +
                    "\1\252\127\0\1\253\16\0\2\41\5\0\1\253\1\0" +
                    "\3\41\4\0\1\41\1\0\30\41\4\0\1\41\2\0" +
                    "\1\41\47\0\2\253\22\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\4\41\1\254\23\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\21\41\1\255\1\256\5\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\1\257" +
                    "\27\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\15\41\1\260\12\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\5\41\1\204\22\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\2\41\1\261\25\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\21\41\1\262" +
                    "\6\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\23\41\1\263\4\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\2\41\1\264\17\41\1\265\5\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\13\41\1\266\14\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\1\267\27\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\20\41\1\270\7\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\16\41\1\271\11\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\15\41\1\272\12\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\15\41" +
                    "\1\273\12\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\17\41\1\274\10\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\3\41\1\275\16\41\1\276\5\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\14\41\1\277\13\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\22\41\1\300\5\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\16\41" +
                    "\1\301\11\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\2\41\1\302\17\41" +
                    "\1\303\5\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\2\41\1\304\25\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\14\41\1\305\13\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\23\41\1\306\1\41\1\307\2\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\13\41\1\310\14\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\22\41" +
                    "\1\311\5\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\13\41\1\312\14\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\11\41\1\313\16\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\10\41\1\314\17\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\21\41" +
                    "\1\315\1\316\5\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\15\41\1\317" +
                    "\12\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\20\41\1\320\7\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\14\41\1\321\13\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\1\322\22\41\1\323\3\41\1\324\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\17\41\1\325\10\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\10\41\1\326" +
                    "\11\41\1\327\5\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\10\41\1\330" +
                    "\17\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\4\41\1\331\3\41\1\332" +
                    "\17\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\3\41\1\333\16\41\1\334" +
                    "\5\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\4\41\1\335\23\41\4\0" +
                    "\1\41\2\0\1\41\55\0\1\150\161\0\1\150\165\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\1\336\27\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\4\41\1\337\23\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\2\41\1\340\25\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\21\41" +
                    "\1\341\6\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\21\41\1\342\1\343" +
                    "\5\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\7\41\1\344\20\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\4\41\1\345\23\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\14\41\1\346\13\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\13\41\1\347" +
                    "\14\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\4\41\1\350\23\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\13\41\1\351\5\41\1\323\6\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\6\41\1\352\21\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\1\353\27\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\14\41\1\354\13\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\2\41\1\355\25\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\4\41\1\356\23\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\13\41" +
                    "\1\357\14\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\23\41\1\360\4\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\4\41\1\361\23\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\1\41\1\362\26\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\17\41" +
                    "\1\363\10\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\20\41\1\364\7\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\2\41\1\365\25\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\20\41\1\366\7\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\4\41" +
                    "\1\367\23\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\20\41\1\370\7\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\13\41\1\371\14\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\4\41\1\372\23\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\21\41" +
                    "\1\373\6\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\23\41\1\374\4\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\23\41\1\375\4\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\6\41\1\376\21\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\23\41" +
                    "\1\377\4\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\17\41\1\u0100\10\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\10\41\1\u0101\17\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\4\41\1\u0102\23\41\4\0\1\41\2\0\1\41" +
                    "\54\0\1\u0103\16\0\2\41\5\0\1\u0103\1\0\3\41" +
                    "\4\0\1\41\1\0\30\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\4\41" +
                    "\1\u0104\16\41\1\u0105\4\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\16\41" +
                    "\1\u0106\3\41\1\u0107\5\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\10\41" +
                    "\1\u0108\17\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\15\41\1\u0109\12\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\15\41\1\u010a\2\41\1\u010b\7\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\13\41\1\u010c\14\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\6\41\1\u010d\21\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\7\41" +
                    "\1\u010e\20\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\13\41\1\u010f\14\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\12\41\1\u0110\15\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\7\41\1\u0111\20\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\21\41" +
                    "\1\u0112\6\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\22\41\1\u0113\5\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\10\41\1\u0114\17\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\4\41\1\u0115\14\41\1\u0116\6\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\23\41\1\u0117\4\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\15\41" +
                    "\1\u0118\12\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\22\41\1\u0119\5\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\21\41\1\u011a\6\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\13\41\1\u011b\14\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\22\41" +
                    "\1\u011c\5\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\20\41\1\u011d\7\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\10\41\1\u011e\16\41\1\u011f\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\2\41\1\u0120\25\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\20\41\1\u0121\7\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\3\41\1\u0122" +
                    "\24\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\16\41\1\u0123\11\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\7\41\1\u0124\20\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\16\41\1\204\11\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\21\41\1\u0125" +
                    "\6\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\1\u0126\27\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\2\41\1\u0127\25\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\4\41" +
                    "\1\u0128\23\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\14\41\1\u0129\13\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\20\41\1\u012a\7\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\13\41\1\u012b\14\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\2\41" +
                    "\1\u012c\25\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\13\41\1\u012d\14\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\22\41\1\u012e\5\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\21\41\1\u0104\6\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\15\41" +
                    "\1\u012f\12\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\4\41\1\u0130\23\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\13\41\1\u0131\14\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\6\41\1\u0132\21\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\4\41" +
                    "\1\u0133\23\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\4\41\1\u0134\23\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\4\41\1\u0135\23\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\3\41\1\u0136\24\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\20\41" +
                    "\1\u0137\7\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\15\41\1\u0138\12\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\20\41\1\u0139\7\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\3\41\1\u013a\24\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\3\41" +
                    "\1\u013b\24\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\7\41\1\u013c\20\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\13\41\1\u013d\14\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\10\41\1\u013e\17\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\10\41" +
                    "\1\u013f\17\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\14\41\1\u0140\13\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\22\41\1\u0141\5\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\5\41\1\u0142\22\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\1\u0143" +
                    "\27\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\17\41\1\u0144\10\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\13\41\1\u0145\14\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\22\41\1\u0146\5\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\4\41\1\u0147" +
                    "\23\41\4\0\1\41\2\0\1\41\73\0\2\41\7\0" +
                    "\3\41\4\0\1\41\1\0\15\41\1\u0148\12\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\4\41\1\u0149\23\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\22\41\1\u014a\5\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\1\u014b\27\41" +
                    "\4\0\1\41\2\0\1\41\54\0\1\u014c\16\0\2\41" +
                    "\5\0\1\u014c\1\0\3\41\4\0\1\41\1\0\30\41" +
                    "\4\0\1\41\2\0\1\41\47\0\2\u014c\22\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\22\41\1\u014d\5\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\1\u014e\27\41\4\0\1\41\2\0" +
                    "\1\41\73\0\2\41\7\0\3\41\4\0\1\41\1\0" +
                    "\23\41\1\u014f\4\41\4\0\1\41\2\0\1\41\73\0" +
                    "\2\41\7\0\3\41\4\0\1\41\1\0\1\u0150\27\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\4\41\1\u0151\23\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\21\41\1\u011f\6\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\20\41" +
                    "\1\u0152\7\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\16\41\1\u0153\11\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\2\41\1\u013d\25\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\4\41\1\u0154\23\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\10\41" +
                    "\1\u0155\17\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\1\u0156\27\41\4\0" +
                    "\1\41\2\0\1\41\73\0\2\41\7\0\3\41\4\0" +
                    "\1\41\1\0\1\u0157\27\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\22\41" +
                    "\1\u0158\5\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\23\41\1\u0159\4\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\22\41\1\u015a\5\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\10\41\1\u015b\17\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\4\41" +
                    "\1\u015c\23\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\22\41\1\u015d\5\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\16\41\1\u015e\11\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\15\41\1\204\12\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\15\41" +
                    "\1\u015f\12\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\24\41\1\u0107\3\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\2\41\1\u0160\25\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\2\41\1\u0161\25\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\16\41" +
                    "\1\u0162\11\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\20\41\1\u0160\7\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\4\41\1\u013d\23\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\15\41\1\u0163\12\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\4\41" +
                    "\1\u0116\23\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\23\41\1\u0164\4\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\22\41\1\u013b\5\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\4\41\1\u0112\23\41\4\0\1\41\2\0\1\41" +
                    "\73\0\2\41\7\0\3\41\4\0\1\41\1\0\4\41" +
                    "\1\u0165\23\41\4\0\1\41\2\0\1\41\73\0\2\41" +
                    "\7\0\3\41\4\0\1\41\1\0\15\41\1\u0166\12\41" +
                    "\4\0\1\41\2\0\1\41\73\0\2\41\7\0\3\41" +
                    "\4\0\1\41\1\0\22\41\1\u013d\5\41\4\0\1\41" +
                    "\2\0\1\41\73\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\6\41\1\u0167\21\41\4\0\1\41\2\0\1\41" +
                    "\54\0\1\u0168\16\0\2\41\5\0\1\u0168\1\0\3\41" +
                    "\4\0\1\41\1\0\30\41\4\0\1\41\2\0\1\41" +
                    "\47\0\2\u0168\22\0\2\41\7\0\3\41\4\0\1\41" +
                    "\1\0\7\41\1\u0169\20\41\4\0\1\41\2\0\1\41" +
                    "\51\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[26923];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\6\0\1\11\1\1\1\11\1\1\3\11\2\1\2\11" +
                    "\2\1\1\11\3\1\1\11\2\1\1\11\4\1\1\11" +
                    "\1\1\1\11\1\1\1\11\24\1\1\11\1\1\1\11" +
                    "\2\1\1\11\1\1\4\11\1\1\26\11\1\1\10\11" +
                    "\4\1\1\11\3\0\3\11\1\1\2\11\1\1\3\11" +
                    "\1\0\1\11\54\1\2\0\6\11\127\1\1\11\110\1" +
                    "\1\11\33\1\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[361];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 137:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 138:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 139:
                        break;
                    case 4: {
                        yybegin(TextCapture2);
                        return STRING_L;
                    }
                    // fall through
                    case 140:
                        break;
                    case 5: {
                        return HASH;
                    }
                    // fall through
                    case 141:
                        break;
                    case 6: {
                        return DOLLAR;
                    }
                    // fall through
                    case 142:
                        break;
                    case 7: {
                        return OP_REM;
                    }
                    // fall through
                    case 143:
                        break;
                    case 8: {
                        return OP_AND;
                    }
                    // fall through
                    case 144:
                        break;
                    case 9: {
                        yybegin(TextCapture1);
                        return STRING_L;
                    }
                    // fall through
                    case 145:
                        break;
                    case 10: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 146:
                        break;
                    case 11: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 147:
                        break;
                    case 12: {
                        return STAR;
                    }
                    // fall through
                    case 148:
                        break;
                    case 13: {
                        return OP_ADD;
                    }
                    // fall through
                    case 149:
                        break;
                    case 14: {
                        return COMMA;
                    }
                    // fall through
                    case 150:
                        break;
                    case 15: {
                        return OP_SUB;
                    }
                    // fall through
                    case 151:
                        break;
                    case 16: {
                        return DOT;
                    }
                    // fall through
                    case 152:
                        break;
                    case 17: {
                        return OP_DIV;
                    }
                    // fall through
                    case 153:
                        break;
                    case 18: {
                        return INTEGER;
                    }
                    // fall through
                    case 154:
                        break;
                    case 19: {
                        return COLON;
                    }
                    // fall through
                    case 155:
                        break;
                    case 20: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 156:
                        break;
                    case 21: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 157:
                        break;
                    case 22: {
                        return EQUAL;
                    }
                    // fall through
                    case 158:
                        break;
                    case 23: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 159:
                        break;
                    case 24: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 160:
                        break;
                    case 25: {
                        return AT;
                    }
                    // fall through
                    case 161:
                        break;
                    case 26: {
                        return SYMBOL;
            }
          // fall through
                    case 162:
                        break;
                    case 27: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 163:
                        break;
                    case 28: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 164:
                        break;
                    case 29: {
                        return OP_POW;
                    }
                    // fall through
                    case 165:
                        break;
                    case 30: {
                        return BRACE_L;
                    }
                    // fall through
                    case 166:
                        break;
                    case 31: {
                        return OP_OR;
                    }
                    // fall through
                    case 167:
                        break;
                    case 32: {
                        return BRACE_R;
                    }
                    // fall through
                    case 168:
                        break;
                    case 33: {
                        return COLOR;
                    }
                    // fall through
                    case 169:
                        break;
                    case 34: {
                        return OP_NOT;
                    }
                    // fall through
                    case 170:
                        break;
                    case 35: {
                        return OP_REFERENCE;
                    }
                    // fall through
                    case 171:
                        break;
                    case 36: {
                        return OP_MUL;
                    }
                    // fall through
                    case 172:
                        break;
                    case 37: {
                        return OP_DIV_REM;
                    }
                    // fall through
                    case 173:
                        break;
                    case 38: {
                        return ANY_LIST;
                    }
                    // fall through
                    case 174:
                        break;
                    case 39: {
                        return ANY_DICT;
                    }
                    // fall through
                    case 175:
                        break;
                    case 40: {
                        return OP_LABEL;
                    }
                    // fall through
                    case 176:
                        break;
                    case 41: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 177:
                        break;
                    case 42: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 178:
                        break;
                    case 43: {
                        return OP_DEREFERENCE;
                    }
                    // fall through
                    case 179:
                        break;
                    case 44: {
                        return NAME_SCOPE;
                    }
                    // fall through
                    case 180:
                        break;
                    case 45: {
                        return OP_CELSIUS;
                    }
                    // fall through
                    case 181:
                        break;
                    case 46: {
                        return OP_FAHRENHEIT;
                    }
                    // fall through
                    case 182:
                        break;
                    case 47: {
                        return BIND;
                    }
                    // fall through
                    case 183:
                        break;
                    case 48: {
                        return OP_ARROW2;
                    }
                    // fall through
                    case 184:
                        break;
                    case 49: {
                        return KW_NIL;
                    }
                    // fall through
                    case 185:
                        break;
                    case 50: {
                        return LOGIC_AND;
                    }
                    // fall through
                    case 186:
                        break;
                    case 51: {
                        return LOGIC_OR;
                    }
                    // fall through
                    case 187:
                        break;
                    case 52: {
                        return NAME_SPLIT;
                    }
                    // fall through
                    case 188:
                        break;
                    case 53: {
                        return OP_NE;
                    }
                    // fall through
                    case 189:
                        break;
                    case 54: {
                        return OP_LEQ;
                    }
                    // fall through
                    case 190:
                        break;
                    case 55: {
                        return OP_GEQ;
                    }
                    // fall through
                    case 191:
                        break;
                    case 56: {
                        return OP_LL;
                    }
                    // fall through
                    case 192:
                        break;
                    case 57: {
                        return OP_GG;
                    }
                    // fall through
                    case 193:
                        break;
                    case 58: {
                        return LOGIC_XOR;
                    }
                    // fall through
                    case 194:
                        break;
                    case 59: {
                        return LOGIC_NAND;
                    }
                    // fall through
                    case 195:
                        break;
                    case 60: {
                        return LOGIC_NOR;
                    }
                    // fall through
                    case 196:
                        break;
                    case 61: {
                        return OP_LLL;
                    }
                    // fall through
                    case 197:
                        break;
                    case 62: {
                        return OP_GGG;
                    }
                    // fall through
                    case 198:
                        break;
                    case 63: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 199:
                        break;
                    case 64: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 200:
                        break;
                    case 65: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 201:
                        break;
                    case 66: {
                        return OP_ARROW1;
                    }
                    // fall through
                    case 202:
                        break;
                    case 67: {
                        return DOMAIN_R;
                    }
                    // fall through
                    case 203:
                        break;
                    case 68: {
                        return BUILDER_L;
                    }
                    // fall through
                    case 204:
                        break;
                    case 69: {
                        return BUILDER_R;
                    }
                    // fall through
                    case 205:
                        break;
                    case 70: {
                        return LOGIC_XAND;
                    }
                    // fall through
                    case 206:
                        break;
                    case 71: {
                        return OP_L10N;
                    }
                    // fall through
                    case 207:
                        break;
                    case 72: {
                        return STRING_TEXT;
                    }
                    // fall through
                    case 208:
                        break;
                    case 73: {
                        yybegin(YYINITIAL);
                        return STRING_R;
            }
          // fall through
                    case 209:
                        break;
                    case 74: {
                        return OP_MUL_ASSIGN;
                    }
                    // fall through
                    case 210:
                        break;
                    case 75: {
                        return OP_ADD_ASSIGN;
                    }
                    // fall through
                    case 211:
                        break;
                    case 76: {
                        return OP_SUB_ASSIGN;
                    }
                    // fall through
                    case 212:
                        break;
                    case 77: {
                        return OP_DIV_ASSIGN;
                    }
                    // fall through
                    case 213:
                        break;
                    case 78: {
                        return OP_UNWRAP_ELSE;
                    }
                    // fall through
                    case 214:
                        break;
                    case 79: {
                        return OP_EE;
                    }
                    // fall through
                    case 215:
                        break;
                    case 80: {
                        return OP_SET_THEN;
                    }
                    // fall through
                    case 216:
                        break;
                    case 81: {
                        return OP_UNWRAP_OR;
                    }
                    // fall through
                    case 217:
                        break;
                    case 82: {
                        return OP_POW_ASSIGN;
                    }
                    // fall through
                    case 218:
                        break;
                    case 83: {
                        return SYMBOW_RAW;
            }
          // fall through
                    case 219:
                        break;
                    case 84: {
                        return KW_AS;
                    }
                    // fall through
                    case 220:
                        break;
                    case 85: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 221:
                        break;
                    case 86: {
                        return KW_IF;
                    }
                    // fall through
                    case 222:
                        break;
                    case 87: {
                        return KW_IN;
                    }
                    // fall through
                    case 223:
                        break;
                    case 88: {
                        return KW_IS;
                    }
                    // fall through
                    case 224:
                        break;
                    case 89: {
                        yybegin(TextCapture6);
                        return STRING_L;
                    }
                    // fall through
                    case 225:
                        break;
                    case 90: {
                        yybegin(TextCapture3);
                        return STRING_L;
                    }
                    // fall through
                    case 226:
                        break;
                    case 91: {
                        return DOMAIN_L;
                    }
                    // fall through
                    case 227:
                        break;
                    case 92: {
                        return OP_UNTIL;
                    }
                    // fall through
                    case 228:
                        break;
                    case 93: {
                        return OP_ARROW3;
                    }
                    // fall through
                    case 229:
                        break;
                    case 94: {
                        return KW_LET;
                    }
                    // fall through
                    case 230:
                        break;
                    case 95: {
                        return KW_NEW;
                    }
                    // fall through
                    case 231:
                        break;
                    case 96: {
                        return KW_NOT;
            }
          // fall through
                    case 232:
                        break;
                    case 97: {
                        return KW_TRY;
                    }
                    // fall through
                    case 233:
                        break;
                    case 98: {
                        return KW_CASE;
                    }
                    // fall through
                    case 234:
                        break;
                    case 99: {
                        return KW_EACH;
                    }
                    // fall through
                    case 235:
                        break;
                    case 100: {
                        return KW_ELSE;
                    }
                    // fall through
                    case 236:
                        break;
                    case 101: {
                        return KW_FROM;
                    }
                    // fall through
                    case 237:
                        break;
                    case 102: {
                        return KW_LOOP;
                    }
                    // fall through
                    case 238:
                        break;
                    case 103: {
                        return KW_NULL;
                    }
                    // fall through
                    case 239:
                        break;
                    case 104: {
                        return KW_BOOLEAN;
                    }
                    // fall through
                    case 240:
                        break;
                    case 105: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 241:
                        break;
                    case 106: {
                        return KW_WHEN;
                    }
                    // fall through
                    case 242:
                        break;
                    case 107: {
                        return KW_WITH;
                    }
                    // fall through
                    case 243:
                        break;
                    case 108: {
                        return KW_BREAK;
                    }
                    // fall through
                    case 244:
                        break;
                    case 109: {
                        return KW_CATCH;
                    }
                    // fall through
                    case 245:
                        break;
                    case 110: {
                        return KW_CLASS;
            }
          // fall through
                    case 246:
                        break;
                    case 111: {
                        return KW_ENUMERATE;
            }
          // fall through
                    case 247:
                        break;
                    case 112: {
                        return KW_FLAGS;
            }
          // fall through
                    case 248:
                        break;
                    case 113: {
                        return KW_IMPLY;
            }
          // fall through
                    case 249:
                        break;
                    case 114: {
                        return KW_MACRO;
            }
          // fall through
                    case 250:
                        break;
                    case 115: {
                        return KW_MATCH;
                    }
                    // fall through
                    case 251:
                        break;
                    case 116: {
                        return KW_RAISE;
            }
          // fall through
                    case 252:
                        break;
                    case 117: {
                        return KW_TRAIT;
                    }
          // fall through
                    case 253:
                        break;
                    case 118: {
                        return KW_UNION;
                    }
                    // fall through
                    case 254:
                        break;
                    case 119: {
                        return KW_UNITE;
                    }
                    // fall through
                    case 255:
                        break;
                    case 120: {
                        return KW_UNTIL;
                    }
                    // fall through
                    case 256:
                        break;
                    case 121: {
                        return KW_USING;
                    }
                    // fall through
                    case 257:
                        break;
                    case 122: {
                        return KW_WHERE;
            }
          // fall through
                    case 258:
                        break;
                    case 123: {
                        return KW_WHILE;
                    }
                    // fall through
                    case 259:
                        break;
                    case 124:
            { return KW_YIELD;
            }
          // fall through
                    case 260:
                        break;
                    case 125:
            { return KW_TEMPLATE;
            }
          // fall through
                    case 261:
                        break;
                    case 126: {
                        return KW_LAMBDA;
                    }
                    // fall through
                    case 262:
                        break;
                    case 127:
            { return KW_NEURAL;
            }
          // fall through
                    case 263:
                        break;
                    case 128:
            { return KW_OBJECT;
            }
          // fall through
                    case 264:
                        break;
                    case 129:
            { return KW_RESUME;
            }
          // fall through
                    case 265:
                        break;
                    case 130:
            { return KW_RETURN;
            }
          // fall through
                    case 266:
                        break;
                    case 131:
            { return KW_COMPONENT;
            }
          // fall through
                    case 267:
                        break;
                    case 132:
            { return KW_EXCLUDE;
            }
          // fall through
                    case 268:
                        break;
                    case 133:
            { return KW_CONTINUE;
            }
          // fall through
                    case 269:
                        break;
                    case 134: {
                        return KW_NAMESPACE;
                    }
                    // fall through
                    case 270:
                        break;
                    case 135:
            { return KW_SINGLETON;
            }
          // fall through
                    case 271: break;
          case 136:
            { return KW_THROUGH;
            }
          // fall through
          case 272: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
