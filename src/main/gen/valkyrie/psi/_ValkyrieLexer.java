// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\4\u2100\1\u2300" +
                    "\1\u2400\2\u2100\1\u2500\1\u2600\2\u2100\31\u0100\1\u2700\121\u0100" +
                    "\1\u2800\4\u0100\1\u2900\1\u0100\1\u2a00\1\u2b00\1\u2c00\1\u2d00" +
                    "\1\u2e00\1\u2f00\53\u0100\1\u3000\10\u3100\31\u2100\1\u0100\1\u3200" +
                    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00" +
                    "\1\u3b00\1\u3c00\1\u3d00\1\u0100\1\u3e00\1\u3f00\1\u4000\1\u4100" +
                    "\1\u4200\1\u4300\1\u4400\1\u2100\1\u4500\1\u4600\1\u4700\1\u4800" +
                    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u5000" +
                    "\1\u2100\1\u5100\1\u5200\1\u5300\1\u2100\3\u0100\1\u5400\1\u5500" +
                    "\1\u5600\12\u2100\4\u0100\1\u5700\17\u2100\2\u0100\1\u5800\41\u2100" +
                    "\2\u0100\1\u5900\1\u5a00\2\u2100\1\u5b00\1\u5c00\27\u0100\1\u5d00" +
                    "\2\u0100\1\u5e00\45\u2100\1\u0100\1\u5f00\1\u6000\11\u2100\1\u6100" +
                    "\24\u2100\1\u6200\1\u6300\1\u2100\1\u6400\1\u6500\1\u6600\1\u6700" +
                    "\2\u2100\1\u6800\5\u2100\1\u6900\1\u6a00\1\u6b00\5\u2100\1\u6c00" +
                    "\1\u6d00\4\u2100\1\u6e00\21\u2100\246\u0100\1\u6f00\20\u0100\1\u7000" +
                    "\1\u7100\25\u0100\1\u7200\34\u0100\1\u7300\14\u2100\2\u0100\1\u7400" +
                    "\u0b06\u2100\1\u7500\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\11\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\32\31\1\32" +
                    "\1\33\1\34\1\0\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\31\1\57\1\60" +
                    "\1\61\1\62\1\63\1\64\1\65\1\66\1\31\1\67" +
                    "\1\70\1\71\7\0\1\1\32\0\1\1\10\0\1\72" +
                    "\1\73\3\0\1\72\6\0\1\73\1\0\1\74\2\0" +
                    "\1\73\5\0\27\73\1\0\37\73\1\0\u01ca\73\4\0" +
                    "\14\73\16\0\5\73\7\0\1\73\1\0\1\73\21\0" +
                    "\160\74\5\73\1\0\2\73\3\0\3\73\1\0\1\73" +
                    "\6\0\1\73\1\74\3\73\1\0\1\73\1\0\24\73" +
                    "\1\0\123\73\1\0\213\73\1\0\5\74\2\0\246\73" +
                    "\1\0\46\73\2\0\1\73\6\0\51\73\10\0\55\74" +
                    "\1\0\1\74\1\0\2\74\1\0\2\74\1\0\1\74" +
                    "\10\0\33\73\4\0\4\73\35\0\13\74\5\0\53\73" +
                    "\37\74\4\0\2\73\1\74\143\73\1\0\1\73\7\74" +
                    "\2\0\6\74\2\73\2\74\1\0\4\74\2\73\12\74" +
                    "\3\73\2\0\1\73\20\0\1\73\1\74\36\73\33\74" +
                    "\2\0\131\73\13\74\1\73\16\0\12\74\41\73\11\74" +
                    "\2\73\4\0\1\73\2\0\1\74\2\0\26\73\4\74" +
                    "\1\73\11\74\1\73\3\74\1\73\5\74\22\0\31\73" +
                    "\3\74\4\0\13\73\65\0\25\73\1\0\10\73\25\0" +
                    "\17\74\1\0\41\74\66\73\3\74\1\73\22\74\1\73" +
                    "\7\74\12\73\2\74\2\0\12\74\1\0\20\73\3\74" +
                    "\1\0\10\73\2\0\2\73\2\0\26\73\1\0\7\73" +
                    "\1\0\1\73\3\0\4\73\2\0\1\74\1\73\7\74" +
                    "\2\0\2\74\2\0\3\74\1\73\10\0\1\74\4\0" +
                    "\2\73\1\0\3\73\2\74\2\0\12\74\2\73\12\0" +
                    "\1\73\1\0\1\74\2\0\3\74\1\0\6\73\4\0" +
                    "\2\73\2\0\26\73\1\0\7\73\1\0\2\73\1\0" +
                    "\2\73\1\0\2\73\2\0\1\74\1\0\5\74\4\0" +
                    "\2\74\2\0\3\74\3\0\1\74\7\0\4\73\1\0" +
                    "\1\73\7\0\14\74\3\73\1\74\13\0\3\74\1\0" +
                    "\11\73\1\0\3\73\1\0\26\73\1\0\7\73\1\0" +
                    "\2\73\1\0\5\73\2\0\1\74\1\73\10\74\1\0" +
                    "\3\74\1\0\3\74\2\0\1\73\17\0\2\73\2\74" +
                    "\2\0\12\74\11\0\1\73\6\74\1\0\3\74\1\0" +
                    "\10\73\2\0\2\73\2\0\26\73\1\0\7\73\1\0" +
                    "\2\73\1\0\5\73\2\0\1\74\1\73\7\74\2\0" +
                    "\2\74\2\0\3\74\10\0\2\74\4\0\2\73\1\0" +
                    "\3\73\2\74\2\0\12\74\1\0\1\73\20\0\1\74" +
                    "\1\73\1\0\6\73\3\0\3\73\1\0\4\73\3\0" +
                    "\2\73\1\0\1\73\1\0\2\73\3\0\2\73\3\0" +
                    "\3\73\3\0\14\73\4\0\5\74\3\0\3\74\1\0" +
                    "\4\74\2\0\1\73\6\0\1\74\16\0\12\74\20\0" +
                    "\5\74\10\73\1\0\3\73\1\0\27\73\1\0\20\73" +
                    "\3\0\1\73\7\74\1\0\3\74\1\0\4\74\7\0" +
                    "\2\74\1\0\3\73\5\0\2\73\2\74\2\0\12\74" +
                    "\20\0\1\73\3\74\1\0\10\73\1\0\3\73\1\0" +
                    "\27\73\1\0\12\73\1\0\5\73\2\0\1\74\1\73" +
                    "\7\74\1\0\3\74\1\0\4\74\7\0\2\74\7\0" +
                    "\1\73\1\0\2\73\2\74\2\0\12\74\1\0\2\73" +
                    "\15\0\4\74\1\0\10\73\1\0\3\73\1\0\51\73" +
                    "\2\74\1\73\7\74\1\0\3\74\1\0\4\74\1\73" +
                    "\5\0\3\73\1\74\7\0\3\73\2\74\2\0\12\74" +
                    "\12\0\6\73\2\0\2\74\1\0\22\73\3\0\30\73" +
                    "\1\0\11\73\1\0\1\73\2\0\7\73\3\0\1\74" +
                    "\4\0\6\74\1\0\1\74\1\0\10\74\6\0\12\74" +
                    "\2\0\2\74\15\0\60\73\1\74\1\73\10\74\5\0" +
                    "\7\73\10\74\1\0\12\74\47\0\2\73\1\0\1\73" +
                    "\1\0\5\73\1\0\30\73\1\0\1\73\1\0\12\73" +
                    "\1\74\1\73\12\74\1\73\2\0\5\73\1\0\1\73" +
                    "\1\0\6\74\2\0\12\74\2\0\4\73\40\0\1\73" +
                    "\27\0\2\74\6\0\12\74\13\0\1\74\1\0\1\74" +
                    "\1\0\1\74\4\0\2\74\10\73\1\0\44\73\4\0" +
                    "\24\74\1\0\2\74\5\73\13\74\1\0\44\74\11\0" +
                    "\1\74\71\0\53\73\24\74\1\73\12\74\6\0\6\73" +
                    "\4\74\4\73\3\74\1\73\3\74\2\73\7\74\3\73" +
                    "\4\74\15\73\14\74\1\73\17\74\2\0\46\73\1\0" +
                    "\1\73\5\0\1\73\2\0\53\73\1\0\115\73\1\0" +
                    "\4\73\2\0\7\73\1\0\1\73\1\0\4\73\2\0" +
                    "\51\73\1\0\4\73\2\0\41\73\1\0\4\73\2\0" +
                    "\7\73\1\0\1\73\1\0\4\73\2\0\17\73\1\0" +
                    "\71\73\1\0\4\73\2\0\103\73\2\0\3\74\11\0" +
                    "\11\74\16\0\20\73\20\0\126\73\2\0\6\73\3\0" +
                    "\u016c\73\2\0\21\73\1\1\32\73\5\0\113\73\3\0" +
                    "\13\73\7\0\15\73\1\0\4\73\3\74\13\0\22\73" +
                    "\3\74\13\0\22\73\2\74\14\0\15\73\1\0\3\73" +
                    "\1\0\2\74\14\0\64\73\40\74\3\0\1\73\4\0" +
                    "\1\73\1\74\2\0\12\74\41\0\3\74\2\0\12\74" +
                    "\6\0\131\73\7\0\51\73\1\74\1\73\5\0\106\73" +
                    "\12\0\37\73\1\0\14\74\4\0\14\74\12\0\12\74" +
                    "\36\73\2\0\5\73\13\0\54\73\4\0\32\73\6\0" +
                    "\13\74\45\0\27\73\5\74\4\0\65\73\12\74\1\0" +
                    "\35\74\2\0\13\74\6\0\12\74\15\0\1\73\10\0" +
                    "\16\74\102\0\5\74\57\73\21\74\7\73\4\0\12\74" +
                    "\21\0\11\74\14\0\3\74\36\73\15\74\2\73\12\74" +
                    "\54\73\16\74\14\0\44\73\24\74\10\0\12\74\3\0" +
                    "\3\73\12\74\44\73\2\0\11\73\7\0\53\73\2\0" +
                    "\3\73\20\0\3\74\1\0\25\74\4\73\1\74\6\73" +
                    "\1\74\2\73\3\74\1\73\5\0\300\73\72\74\1\0" +
                    "\5\74\26\73\2\0\6\73\2\0\46\73\2\0\6\73" +
                    "\2\0\10\73\1\0\1\73\1\0\1\73\1\0\1\73" +
                    "\1\0\37\73\2\0\65\73\1\0\7\73\1\0\1\73" +
                    "\3\0\3\73\1\0\7\73\3\0\4\73\2\0\6\73" +
                    "\4\0\15\73\5\0\3\73\1\0\7\73\3\0\13\1" +
                    "\35\0\2\1\5\0\1\1\17\0\2\74\3\0\1\75" +
                    "\1\76\1\77\15\0\1\74\12\0\1\1\21\0\1\73" +
                    "\15\0\1\73\20\0\15\73\63\0\15\74\4\0\1\74" +
                    "\3\0\14\74\21\0\1\73\4\0\1\73\2\0\12\73" +
                    "\1\0\1\73\2\0\6\73\6\0\1\73\1\0\1\73" +
                    "\1\0\1\73\1\0\20\73\2\0\4\73\5\0\5\73" +
                    "\4\0\1\73\21\0\51\73\174\0\1\100\17\0\1\75" +
                    "\40\0\1\101\1\102\50\0\1\103\374\0\1\104\u028a\0" +
                    "\1\105\1\106\14\0\1\107\11\0\57\73\1\0\57\73" +
                    "\1\0\205\73\6\0\4\73\3\74\2\73\14\0\46\73" +
                    "\1\0\1\73\5\0\1\73\2\0\70\73\7\0\1\73" +
                    "\17\0\1\74\27\73\11\0\7\73\1\0\7\73\1\0" +
                    "\7\73\1\0\7\73\1\0\7\73\1\0\7\73\1\0" +
                    "\7\73\1\0\7\73\1\0\40\74\1\1\4\0\3\73" +
                    "\31\0\11\73\6\74\1\0\5\73\2\0\5\73\4\0" +
                    "\126\73\2\0\2\74\2\0\3\73\1\0\132\73\1\0" +
                    "\4\73\5\0\53\73\1\0\136\73\21\0\33\73\65\0" +
                    "\306\73\112\0\360\73\20\0\215\73\103\0\56\73\2\0" +
                    "\15\73\3\0\20\73\12\74\2\73\24\0\57\73\1\74" +
                    "\4\0\12\74\1\0\37\73\2\74\120\73\2\74\45\0" +
                    "\11\73\2\0\147\73\2\0\65\73\2\0\5\73\60\0" +
                    "\13\73\1\74\3\73\1\74\4\73\1\74\27\73\5\74" +
                    "\30\0\64\73\14\0\2\74\62\73\22\74\12\0\12\74" +
                    "\6\0\22\74\6\73\3\0\1\73\1\0\2\73\13\74" +
                    "\34\73\10\74\2\0\27\73\15\74\14\0\35\73\3\0" +
                    "\4\74\57\73\16\74\16\0\1\73\12\74\6\0\5\73" +
                    "\1\74\12\73\12\74\5\73\1\0\51\73\16\74\11\0" +
                    "\3\73\1\74\10\73\2\74\2\0\12\74\6\0\27\73" +
                    "\3\0\1\73\3\74\62\73\1\74\1\73\3\74\2\73" +
                    "\2\74\5\73\2\74\1\73\1\74\1\73\30\0\3\73" +
                    "\2\0\13\73\5\74\2\0\3\73\2\74\12\0\6\73" +
                    "\2\0\6\73\2\0\6\73\11\0\7\73\1\0\7\73" +
                    "\1\0\53\73\1\0\14\73\10\0\163\73\10\74\1\0" +
                    "\2\74\2\0\12\74\6\0\244\73\14\0\27\73\4\0" +
                    "\61\73\u0104\0\156\73\2\0\152\73\46\0\7\73\14\0" +
                    "\5\73\5\0\1\73\1\74\12\73\1\0\15\73\1\0" +
                    "\5\73\1\0\1\73\1\0\2\73\1\0\2\73\1\0" +
                    "\154\73\41\0\213\73\6\0\332\73\22\0\100\73\2\0" +
                    "\66\73\50\0\12\73\6\0\20\74\20\0\20\74\3\0" +
                    "\2\74\30\0\3\74\41\0\1\73\1\0\1\73\3\0" +
                    "\1\73\1\0\1\73\1\0\1\73\1\0\1\73\1\0" +
                    "\176\73\23\0\12\74\7\0\32\73\4\0\1\74\1\0" +
                    "\32\73\13\0\70\73\2\74\37\73\3\0\6\73\2\0" +
                    "\6\73\2\0\6\73\2\0\3\73\43\0\14\73\1\0" +
                    "\32\73\1\0\23\73\1\0\2\73\1\0\17\73\2\0" +
                    "\16\73\42\0\173\73\105\0\65\73\210\0\1\74\202\0" +
                    "\35\73\3\0\61\73\17\0\1\74\37\0\40\73\15\0" +
                    "\36\73\5\0\46\73\5\74\5\0\36\73\2\0\44\73" +
                    "\4\0\10\73\1\0\5\73\52\0\236\73\2\0\12\74" +
                    "\6\0\44\73\4\0\44\73\4\0\50\73\10\0\64\73" +
                    "\234\0\67\73\11\0\26\73\12\0\10\73\230\0\6\73" +
                    "\2\0\1\73\1\0\54\73\1\0\2\73\3\0\1\73" +
                    "\2\0\27\73\12\0\27\73\11\0\37\73\101\0\23\73" +
                    "\1\0\2\73\12\0\26\73\12\0\32\73\106\0\70\73" +
                    "\6\0\2\73\100\0\1\73\3\74\1\0\2\74\5\0" +
                    "\4\74\4\73\1\0\3\73\1\0\35\73\2\0\3\74" +
                    "\4\0\1\74\40\0\35\73\3\0\35\73\43\0\10\73" +
                    "\1\0\34\73\2\74\31\0\66\73\12\0\26\73\12\0" +
                    "\23\73\15\0\22\73\156\0\111\73\67\0\63\73\15\0" +
                    "\63\73\15\0\44\73\4\74\10\0\12\74\306\0\35\73" +
                    "\12\0\1\73\10\0\26\73\13\74\217\0\27\73\11\0" +
                    "\3\74\65\73\17\74\37\0\12\74\17\0\4\74\55\73" +
                    "\13\74\25\0\31\73\7\0\12\74\6\0\3\74\44\73" +
                    "\16\74\1\0\12\74\4\0\1\73\2\74\11\0\43\73" +
                    "\1\74\2\0\1\73\11\0\3\74\60\73\16\74\4\73" +
                    "\4\0\4\74\3\0\12\74\1\73\1\0\1\73\43\0" +
                    "\22\73\1\0\31\73\14\74\6\0\1\74\101\0\7\73" +
                    "\1\0\1\73\1\0\4\73\1\0\17\73\1\0\12\73" +
                    "\7\0\57\73\14\74\5\0\12\74\6\0\4\74\1\0" +
                    "\10\73\2\0\2\73\2\0\26\73\1\0\7\73\1\0" +
                    "\2\73\1\0\5\73\1\0\2\74\1\73\7\74\2\0" +
                    "\2\74\2\0\3\74\2\0\1\73\6\0\1\74\5\0" +
                    "\5\73\2\74\2\0\7\74\3\0\5\74\213\0\65\73" +
                    "\22\74\4\73\5\0\12\74\4\0\1\74\1\73\40\0" +
                    "\60\73\24\74\2\73\1\0\1\73\10\0\12\74\246\0" +
                    "\57\73\7\74\2\0\11\74\27\0\4\73\2\74\42\0" +
                    "\60\73\21\74\3\0\1\73\13\0\12\74\46\0\53\73" +
                    "\15\74\1\73\7\0\12\74\66\0\33\73\2\0\17\74" +
                    "\4\0\12\74\306\0\54\73\17\74\145\0\100\73\12\74" +
                    "\25\0\1\73\240\0\10\73\2\0\47\73\7\74\2\0" +
                    "\7\74\1\73\1\0\1\73\1\74\33\0\1\73\12\74" +
                    "\50\73\7\74\1\73\4\74\10\0\1\74\10\0\1\73" +
                    "\13\74\56\73\20\74\3\0\1\73\42\0\71\73\7\0" +
                    "\11\73\1\0\45\73\10\74\1\0\10\74\1\73\17\0" +
                    "\12\74\30\0\36\73\2\0\26\74\1\0\16\74\111\0" +
                    "\7\73\1\0\2\73\1\0\46\73\6\74\3\0\1\74" +
                    "\1\0\2\74\1\0\7\74\1\73\1\74\10\0\12\74" +
                    "\6\0\6\73\1\0\2\73\1\0\40\73\5\74\1\0" +
                    "\2\74\1\0\5\74\1\73\7\0\12\74\u0136\0\23\73" +
                    "\4\74\11\0\232\73\146\0\157\73\21\0\304\73\274\0" +
                    "\57\73\321\0\107\73\271\0\71\73\7\0\37\73\1\0" +
                    "\12\74\146\0\36\73\2\0\5\74\13\0\60\73\7\74" +
                    "\11\0\4\73\14\0\12\74\11\0\25\73\5\0\23\73" +
                    "\260\0\100\73\200\0\113\73\4\0\1\74\1\73\67\74" +
                    "\7\0\4\74\15\73\100\0\2\73\1\0\1\73\34\0" +
                    "\370\73\10\0\363\73\15\0\37\73\61\0\3\73\21\0" +
                    "\4\73\10\0\u018c\73\4\0\153\73\5\0\15\73\3\0" +
                    "\11\73\7\0\12\73\3\0\2\74\306\0\5\74\3\0" +
                    "\6\74\10\0\10\74\2\0\7\74\36\0\4\74\224\0" +
                    "\3\74\273\0\125\73\1\0\107\73\1\0\2\73\2\0" +
                    "\1\73\2\0\2\73\2\0\4\73\1\0\14\73\1\0" +
                    "\1\73\1\0\7\73\1\0\101\73\1\0\4\73\2\0" +
                    "\10\73\1\0\7\73\1\0\34\73\1\0\4\73\1\0" +
                    "\5\73\1\0\1\73\3\0\7\73\1\0\u0154\73\2\0" +
                    "\31\73\1\0\31\73\1\0\37\73\1\0\31\73\1\0" +
                    "\37\73\1\0\31\73\1\0\37\73\1\0\31\73\1\0" +
                    "\37\73\1\0\31\73\1\0\10\73\2\0\151\74\4\0" +
                    "\62\74\10\0\1\74\16\0\1\74\26\0\5\74\1\0" +
                    "\17\74\120\0\7\74\1\0\21\74\2\0\7\74\1\0" +
                    "\2\74\1\0\5\74\325\0\55\73\3\0\7\74\7\73" +
                    "\2\0\12\74\4\0\1\73\u0171\0\54\73\16\74\6\0" +
                    "\305\73\13\0\7\74\51\0\104\73\7\74\1\73\4\0" +
                    "\12\74\246\0\4\73\1\0\33\73\1\0\2\73\1\0" +
                    "\1\73\2\0\1\73\1\0\12\73\1\0\4\73\1\0" +
                    "\1\73\1\0\1\73\6\0\1\73\4\0\1\73\1\0" +
                    "\1\73\1\0\1\73\1\0\3\73\1\0\2\73\1\0" +
                    "\1\73\2\0\1\73\1\0\1\73\1\0\1\73\1\0" +
                    "\1\73\1\0\1\73\1\0\2\73\1\0\1\73\2\0" +
                    "\4\73\1\0\7\73\1\0\4\73\1\0\4\73\1\0" +
                    "\1\73\1\0\12\73\1\0\21\73\5\0\3\73\1\0" +
                    "\5\73\1\0\21\73\104\0\327\73\51\0\65\73\13\0" +
                    "\336\73\2\0\u0182\73\16\0\u0131\73\37\0\36\73\342\0" +
                    "\360\74\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30208];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1" +
                    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\1\1\30\1\1\22\26\1\31\1\32" +
                    "\1\33\1\34\1\15\1\35\1\36\1\37\1\17\1\40" +
                    "\1\41\1\42\1\43\1\44\1\45\1\0\1\46\2\0" +
                    "\1\47\2\0\1\50\1\0\1\51\1\52\12\26\1\53" +
                    "\2\26\1\54\1\26\1\55\1\56\25\26\1\46\1\57" +
                    "\1\0\1\52\13\26\1\60\1\53\4\26\1\61\2\26" +
                    "\1\62\1\37\1\63\10\26\1\64\10\26\1\65\1\26" +
                    "\1\66\3\26\1\67\1\70\4\26\1\53\6\26\1\71" +
                    "\6\26\1\72\1\64\1\73\5\26\1\74\1\26\1\75" +
                    "\1\26\1\76\1\77\1\100\2\26\1\70\3\26\1\101" +
                    "\2\26\1\102\5\26\1\103\3\26\1\104\1\105\1\106" +
                    "\1\107\1\110\1\111\3\26\1\102\5\26\1\112\1\26" +
                    "\1\113\1\114\1\115\1\100\1\110\2\26\1\116\7\26" +
                    "\1\117\6\26\1\120\1\26\1\120\1\121";

    private static int[] zzUnpackAction() {
        int[] result = new int[259];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\110\0\220\0\330\0\u0120\0\110\0\110\0\u0168" +
                    "\0\110\0\110\0\110\0\110\0\110\0\u01b0\0\u01f8\0\u0240" +
                    "\0\110\0\u0288\0\u02d0\0\110\0\110\0\u0318\0\110\0\110" +
                    "\0\110\0\u0360\0\110\0\u03a8\0\110\0\u03f0\0\u0438\0\u0480" +
                    "\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0" +
                    "\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900" +
                    "\0\110\0\110\0\110\0\u0948\0\110\0\110\0\110\0\110" +
                    "\0\110\0\110\0\110\0\u0990\0\110\0\110\0\110\0\u0120" +
                    "\0\110\0\u09d8\0\u0168\0\110\0\u0a20\0\u0a68\0\110\0\u03f0" +
                    "\0\110\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\u0c60" +
                    "\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0360\0\u0dc8\0\u0e10\0\u0360" +
                    "\0\u0e58\0\u0ea0\0\u0360\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008" +
                    "\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248" +
                    "\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u1488" +
                    "\0\u0120\0\110\0\u14d0\0\110\0\u1518\0\u1560\0\u15a8\0\u15f0" +
                    "\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u0360" +
                    "\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u0360\0\u1998\0\u19e0" +
                    "\0\u0360\0\u0360\0\u0360\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48" +
                    "\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88" +
                    "\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\110\0\u1ef0\0\u0360\0\u1f38" +
                    "\0\u1f80\0\u1fc8\0\u0360\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130" +
                    "\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u0360" +
                    "\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u0360\0\110" +
                    "\0\u0360\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u0360\0\u2688" +
                    "\0\u0360\0\u26d0\0\u0360\0\u0360\0\u0360\0\u2718\0\u2760\0\u0360" +
                    "\0\u27a8\0\u27f0\0\u2838\0\u0360\0\u2880\0\u28c8\0\u0360\0\u2910" +
                    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u0360\0\u2a78\0\u2ac0\0\u2b08" +
                    "\0\u0360\0\u0360\0\u0360\0\u0360\0\u2b50\0\u0360\0\u2b98\0\u2be0" +
                    "\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u0360" +
                    "\0\u2e20\0\u0360\0\u0360\0\u0360\0\u2e68\0\110\0\u2eb0\0\u2ef8" +
                    "\0\u0360\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0" +
                    "\0\u0360\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8" +
                    "\0\u3330\0\110\0\u0360";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[259];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\32\1\36\1\37\1\40" +
                    "\1\41\1\42\1\43\1\44\2\32\1\45\2\32\1\46" +
                    "\1\47\1\50\1\51\1\32\1\52\1\53\1\54\1\55" +
                    "\1\56\1\57\1\32\1\60\1\61\1\62\1\63\1\64" +
                    "\1\32\1\2\1\65\1\66\1\67\1\70\1\71\1\72" +
                    "\1\73\1\74\1\75\1\76\1\77\111\0\2\3\132\0" +
                    "\1\73\62\0\4\100\1\101\26\100\1\102\54\100\7\103" +
                    "\1\104\100\103\26\0\1\77\77\0\1\105\103\0\1\106" +
                    "\115\0\2\22\13\0\1\22\74\0\1\72\112\0\1\107" +
                    "\102\0\2\32\7\0\1\32\3\0\1\32\1\0\30\32" +
                    "\4\0\2\32\46\0\1\74\54\0\36\110\1\111\51\110" +
                    "\20\0\2\32\7\0\1\32\3\0\1\32\1\0\21\32" +
                    "\1\112\6\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\20\32\1\113\7\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\1\114" +
                    "\12\32\1\115\2\32\1\116\11\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\4\32\1\117" +
                    "\23\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\13\32\1\120\1\32\1\121\10\32\1\122" +
                    "\1\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\1\123\12\32\1\124\1\32\1\125\1\126" +
                    "\4\32\1\127\4\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\5\32\1\130\6\32\1\131" +
                    "\1\132\3\32\1\133\6\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\1\134\3\32\1\135" +
                    "\23\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\1\136\7\32\1\137\17\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\1\140" +
                    "\3\32\1\141\3\32\1\142\5\32\1\143\4\32\1\144" +
                    "\4\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\1\32\1\145\26\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\1\146\3\32" +
                    "\1\147\23\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\22\32\1\150\5\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\20\32" +
                    "\1\151\6\32\1\152\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\15\32\1\153\3\32\1\154" +
                    "\6\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\1\155\27\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\7\32\1\156\1\157" +
                    "\17\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\10\32\1\160\17\32\4\0\2\32\33\0" +
                    "\2\64\7\0\1\64\5\0\30\64\21\0\2\74\1\0" +
                    "\105\74\4\100\1\161\26\100\1\102\54\100\24\0\2\162" +
                    "\62\0\12\106\1\163\75\106\3\0\1\164\14\0\2\32" +
                    "\5\0\1\164\1\0\1\32\3\0\1\32\1\0\30\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\4\32\1\165\23\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\21\32\1\166\1\167" +
                    "\5\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\1\170\27\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\15\32\1\171\12\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\5\32\1\125\22\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\21\32\1\172\6\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\23\32\1\173\4\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\2\32\1\174\17\32" +
                    "\1\175\5\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\13\32\1\176\14\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\1\177" +
                    "\27\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\20\32\1\200\7\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\15\32\1\201" +
                    "\12\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\17\32\1\202\10\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\3\32\1\203" +
                    "\16\32\1\204\5\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\14\32\1\205\13\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\22\32\1\206\5\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\2\32\1\207\17\32\1\167" +
                    "\5\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\2\32\1\207\25\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\14\32\1\210" +
                    "\13\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\25\32\1\211\2\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\13\32\1\212" +
                    "\14\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\22\32\1\213\5\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\13\32\1\214" +
                    "\14\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\11\32\1\215\16\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\10\32\1\216" +
                    "\17\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\21\32\1\217\1\220\5\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\20\32" +
                    "\1\221\7\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\1\222\22\32\1\223\3\32\1\224" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\17\32\1\225\10\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\10\32\1\226\11\32" +
                    "\1\227\5\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\10\32\1\230\17\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\13\32" +
                    "\1\206\4\32\1\206\7\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\4\32\1\231\3\32" +
                    "\1\232\17\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\22\32\1\233\5\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\4\32" +
                    "\1\234\23\32\4\0\2\32\13\0\12\106\1\163\4\106" +
                    "\1\235\70\106\20\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\1\236\27\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\4\32\1\237\23\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\2\32\1\240\25\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\21\32\1\241\6\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\22\32\1\242\5\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\4\32\1\243\23\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\14\32\1\244\13\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\13\32\1\245\14\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\4\32\1\246\23\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\13\32\1\247\5\32\1\223" +
                    "\6\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\6\32\1\250\21\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\2\32\1\251" +
                    "\25\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\13\32\1\252\14\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\23\32\1\253" +
                    "\4\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\4\32\1\254\23\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\1\32\1\255" +
                    "\26\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\20\32\1\256\7\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\4\32\1\257" +
                    "\23\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\13\32\1\260\14\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\4\32\1\261" +
                    "\23\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\21\32\1\262\6\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\23\32\1\263" +
                    "\4\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\23\32\1\264\4\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\23\32\1\265" +
                    "\4\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\10\32\1\266\17\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\4\32\1\267" +
                    "\23\32\4\0\2\32\16\0\1\270\14\0\2\32\5\0" +
                    "\1\270\1\0\1\32\3\0\1\32\1\0\30\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\4\32\1\271\16\32\1\272\4\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\16\32\1\273" +
                    "\3\32\1\274\5\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\10\32\1\275\17\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\15\32\1\276\12\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\15\32\1\277\12\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\13\32\1\300\14\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\7\32\1\301\20\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\13\32\1\302\14\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\12\32\1\303\15\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\7\32\1\304\20\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\21\32\1\305\6\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\10\32\1\306\17\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\4\32\1\307\14\32\1\310" +
                    "\6\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\23\32\1\311\4\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\15\32\1\312" +
                    "\12\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\22\32\1\313\5\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\21\32\1\314" +
                    "\6\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\22\32\1\315\5\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\10\32\1\316" +
                    "\16\32\1\317\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\2\32\1\320\25\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\20\32" +
                    "\1\321\7\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\3\32\1\322\24\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\16\32" +
                    "\1\125\11\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\21\32\1\323\6\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\2\32" +
                    "\1\324\25\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\4\32\1\325\23\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\14\32" +
                    "\1\326\13\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\20\32\1\327\7\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\2\32" +
                    "\1\330\25\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\22\32\1\331\5\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\21\32" +
                    "\1\271\6\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\15\32\1\332\12\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\4\32" +
                    "\1\333\23\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\13\32\1\334\14\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\6\32" +
                    "\1\335\21\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\4\32\1\334\23\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\3\32" +
                    "\1\336\24\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\15\32\1\337\12\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\20\32" +
                    "\1\340\7\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\3\32\1\341\24\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\3\32" +
                    "\1\342\24\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\7\32\1\343\20\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\10\32" +
                    "\1\344\17\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\14\32\1\345\13\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\22\32" +
                    "\1\346\5\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\5\32\1\347\22\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\1\350" +
                    "\27\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\17\32\1\351\10\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\22\32\1\352" +
                    "\5\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\4\32\1\353\23\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\15\32\1\354" +
                    "\12\32\4\0\2\32\33\0\2\32\7\0\1\32\3\0" +
                    "\1\32\1\0\22\32\1\355\5\32\4\0\2\32\16\0" +
                    "\1\356\14\0\2\32\5\0\1\356\1\0\1\32\3\0" +
                    "\1\32\1\0\30\32\4\0\2\32\33\0\2\32\7\0" +
                    "\1\32\3\0\1\32\1\0\23\32\1\357\4\32\4\0" +
                    "\2\32\33\0\2\32\7\0\1\32\3\0\1\32\1\0" +
                    "\1\360\27\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\4\32\1\361\23\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\21\32" +
                    "\1\317\6\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\20\32\1\362\7\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\16\32" +
                    "\1\363\11\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\4\32\1\364\23\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\10\32" +
                    "\1\365\17\32\4\0\2\32\33\0\2\32\7\0\1\32" +
                    "\3\0\1\32\1\0\1\366\27\32\4\0\2\32\33\0" +
                    "\2\32\7\0\1\32\3\0\1\32\1\0\1\367\27\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\23\32\1\370\4\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\4\32\1\371\23\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\22\32\1\372\5\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\16\32\1\373\11\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\15\32\1\125\12\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\15\32\1\374\12\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\24\32\1\274\3\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\2\32\1\375\25\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\2\32\1\376\25\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\20\32\1\375\7\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\4\32\1\310\23\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\23\32\1\377\4\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\22\32\1\342\5\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\4\32\1\305\23\32" +
                    "\4\0\2\32\33\0\2\32\7\0\1\32\3\0\1\32" +
                    "\1\0\4\32\1\u0100\23\32\4\0\2\32\33\0\2\32" +
                    "\7\0\1\32\3\0\1\32\1\0\6\32\1\u0101\21\32" +
                    "\4\0\2\32\16\0\1\u0102\14\0\2\32\5\0\1\u0102" +
                    "\1\0\1\32\3\0\1\32\1\0\30\32\4\0\2\32" +
                    "\33\0\2\32\7\0\1\32\3\0\1\32\1\0\7\32" +
                    "\1\u0103\20\32\4\0\2\32\13\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[13176];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\3\1\2\11\1\1\5\11\3\1\1\11" +
                    "\2\1\2\11\1\1\3\11\1\1\1\11\1\1\1\11" +
                    "\23\1\3\11\1\1\7\11\1\1\3\11\1\0\1\11" +
                    "\2\0\1\11\2\0\1\11\1\0\1\11\50\1\1\11" +
                    "\1\0\1\11\50\1\1\11\32\1\1\11\65\1\1\11" +
                    "\23\1\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[259];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 82:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 83:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 84:
                        break;
                    case 4: {
                        return HASH;
                    }
                    // fall through
                    case 85:
                        break;
                    case 5: {
                        return DOLLAR;
                    }
                    // fall through
                    case 86:
                        break;
                    case 6: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 87:
                        break;
                    case 7: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 88:
                        break;
                    case 8: {
                        return STAR;
                    }
                    // fall through
                    case 89:
                        break;
                    case 9: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 90:
                        break;
                    case 10: {
                        return COMMA;
                    }
                    // fall through
                    case 91:
                        break;
                    case 11: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 92:
                        break;
                    case 12: {
                        return DOT;
                    }
                    // fall through
                    case 93:
                        break;
                    case 13: {
                        return OP_DIV;
                    }
                    // fall through
                    case 94:
                        break;
                    case 14: {
                        return INTEGER;
                    }
                    // fall through
                    case 95:
                        break;
                    case 15: {
                        return COLON;
                    }
                    // fall through
                    case 96:
                        break;
                    case 16: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 97:
                        break;
                    case 17: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 98:
                        break;
                    case 18: {
                        return EQUAL;
                    }
                    // fall through
                    case 99:
                        break;
                    case 19: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 100:
                        break;
                    case 20: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 101:
                        break;
                    case 21: {
                        return AT;
                    }
                    // fall through
                    case 102:
                        break;
                    case 22: {
                        return SYMBOL;
                    }
                    // fall through
                    case 103:
                        break;
                    case 23: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 104:
                        break;
                    case 24: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 105:
                        break;
                    case 25: {
                        return BRACE_L;
                    }
                    // fall through
                    case 106:
                        break;
                    case 26: {
                        return OP_OR;
                    }
                    // fall through
                    case 107:
                        break;
                    case 27: {
                        return BRACE_R;
                    }
                    // fall through
                    case 108:
                        break;
                    case 28: {
                        return COLOR;
                    }
                    // fall through
                    case 109:
                        break;
                    case 29: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 110:
                        break;
                    case 30: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 111:
                        break;
                    case 31: {
                        return KW_NIL;
                    }
                    // fall through
                    case 112:
                        break;
                    case 32: {
                        return PROPORTION;
                    }
                    // fall through
                    case 113:
                        break;
                    case 33: {
                        return OP_NE;
                    }
                    // fall through
                    case 114:
                        break;
                    case 34: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 115:
                        break;
                    case 35: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 116:
                        break;
                    case 36: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 117:
                        break;
                    case 37: {
                        return OP_ARROW1;
                    }
                    // fall through
                    case 118:
                        break;
                    case 38: {
                        return TEXT_DOUBLE;
                    }
                    // fall through
                    case 119:
                        break;
                    case 39: {
                        return TEXT_SINGLE;
                    }
                    // fall through
                    case 120:
                        break;
                    case 40: {
                        return OP_EQ;
                    }
                    // fall through
                    case 121:
                        break;
                    case 41: {
                        return SYMBOW_RAW;
                    }
                    // fall through
                    case 122:
                        break;
                    case 42: {
                        return KW_AS;
                    }
                    // fall through
                    case 123:
                        break;
                    case 43: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 124:
                        break;
                    case 44: {
                        return KW_IF;
                    }
                    // fall through
                    case 125:
                        break;
                    case 45: { return KW_IN;
            }
          // fall through
                    case 126:
                        break;
                    case 46: {
                        return KW_IS;
                    }
                    // fall through
                    case 127:
                        break;
                    case 47: {
                        return OP_UNTIL;
                    }
                    // fall through
                    case 128:
                        break;
                    case 48: {
                        return KW_FOR;
                    }
                    // fall through
                    case 129:
                        break;
                    case 49: {
                        return KW_LET;
                    }
                    // fall through
                    case 130:
                        break;
                    case 50: {
                        return KW_NEW;
                    }
                    // fall through
                    case 131:
                        break;
                    case 51: {
                        return KW_NOT;
                    }
                    // fall through
                    case 132:
                        break;
                    case 52: {
                        return KW_TRY;
                    }
                    // fall through
                    case 133:
                        break;
                    case 53: {
                        return COMMENT_BLOCK;
                    }
                    // fall through
                    case 134:
                        break;
                    case 54: {
                        return KW_CASE;
                    }
                    // fall through
                    case 135:
                        break;
                    case 55: {
                        return KW_ELSE;
                    }
                    // fall through
                    case 136:
                        break;
                    case 56: {
                        return KW_ENUMERATE;
                    }
                    // fall through
                    case 137:
                        break;
                    case 57: {
                        return KW_NULL;
                    }
                    // fall through
                    case 138:
                        break;
                    case 58: {
                        return KW_BOOLEAN;
                    }
                    // fall through
                    case 139:
                        break;
                    case 59: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 140:
                        break;
                    case 60: {
                        return KW_WHEN;
                    }
                    // fall through
                    case 141:
                        break;
                    case 61: {
                        return KW_WITH;
                    }
                    // fall through
                    case 142:
                        break;
                    case 62: {
                        return KW_BREAK;
                    }
                    // fall through
                    case 143:
                        break;
                    case 63: {
                        return KW_MATCH;
                    }
                    // fall through
                    case 144:
                        break;
                    case 64: {
                        return KW_CLASS;
                    }
                    // fall through
                    case 145:
                        break;
                    case 65: {
                        return KW_FLAGS;
                    }
                    // fall through
                    case 146:
                        break;
                    case 66: {
                        return KW_IMPLY;
                    }
                    // fall through
                    case 147:
                        break;
                    case 67: {
                        return KW_RAISE;
                    }
                    // fall through
                    case 148:
                        break;
                    case 68: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 149:
                        break;
                    case 69: {
                        return KW_UNION;
                    }
                    // fall through
                    case 150:
                        break;
                    case 70: {
                        return KW_UNITE;
                    }
                    // fall through
                    case 151:
                        break;
                    case 71: {
                        return KW_WHILE;
                    }
                    // fall through
                    case 152:
                        break;
                    case 72: {
                        return KW_USING;
                    }
                    // fall through
                    case 153:
                        break;
                    case 73: {
                        return KW_YIELD;
                    }
                    // fall through
                    case 154:
                        break;
                    case 74: {
                        return KW_LAMBDA;
            }
          // fall through
                    case 155:
                        break;
                    case 75: {
                        return KW_OBJECT;
                    }
                    // fall through
                    case 156:
                        break;
                    case 76: {
                        return KW_RESUME;
            }
          // fall through
                    case 157:
                        break;
                    case 77: {
                        return KW_RETURN;
                    }
                    // fall through
                    case 158:
                        break;
                    case 78: {
                        return KW_EXCLUDE;
                    }
                    // fall through
                    case 159:
                        break;
                    case 79: {
                        return KW_CONTINUE;
            }
          // fall through
                    case 160: break;
          case 80:
            { return KW_NAMESPACE;
            }
          // fall through
                    case 161: break;
          case 81:
            { return KW_THROUGH;
            }
          // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
