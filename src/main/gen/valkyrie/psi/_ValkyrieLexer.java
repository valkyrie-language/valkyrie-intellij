// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: valkyrie.flex

package valkyrie.psi;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static valkyrie.psi.ValkyrieTypes.*;


public class _ValkyrieLexer implements com.intellij.lexer.FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\3\u2100\1\u2200\4\u2100\1\u2300" +
                    "\1\u2400\2\u2100\1\u2500\1\u2600\2\u2100\31\u0100\1\u2700\121\u0100" +
                    "\1\u2800\4\u0100\1\u2900\1\u0100\1\u2a00\1\u2b00\1\u2c00\1\u2d00" +
                    "\1\u2e00\1\u2f00\53\u0100\1\u3000\10\u3100\31\u2100\1\u0100\1\u3200" +
                    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00" +
                    "\1\u3b00\1\u3c00\1\u3d00\1\u0100\1\u3e00\1\u3f00\1\u4000\1\u4100" +
                    "\1\u4200\1\u4300\1\u4400\1\u2100\1\u4500\1\u4600\1\u4700\1\u4800" +
                    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u5000" +
                    "\1\u2100\1\u5100\1\u5200\1\u5300\1\u2100\3\u0100\1\u5400\1\u5500" +
                    "\1\u5600\12\u2100\4\u0100\1\u5700\17\u2100\2\u0100\1\u5800\41\u2100" +
                    "\2\u0100\1\u5900\1\u5a00\2\u2100\1\u5b00\1\u5c00\27\u0100\1\u5d00" +
                    "\2\u0100\1\u5e00\45\u2100\1\u0100\1\u5f00\1\u6000\11\u2100\1\u6100" +
                    "\24\u2100\1\u6200\1\u6300\1\u2100\1\u6400\1\u6500\1\u6600\1\u6700" +
                    "\2\u2100\1\u6800\5\u2100\1\u6900\1\u6a00\1\u6b00\5\u2100\1\u6c00" +
                    "\1\u6d00\4\u2100\1\u6e00\21\u2100\246\u0100\1\u6f00\20\u0100\1\u7000" +
                    "\1\u7100\25\u0100\1\u7200\34\u0100\1\u7300\14\u2100\2\u0100\1\u7400" +
                    "\u0b06\u2100\1\u7500\u02fe\u2100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\1\17\12\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\6\30\24\31\1\32" +
                    "\1\33\1\34\1\35\1\31\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\31\1\57\1\60" +
                    "\1\61\1\62\1\63\1\64\1\65\1\66\1\31\1\67" +
                    "\1\70\1\71\1\72\6\0\1\1\32\0\1\1\10\0" +
                    "\1\73\1\31\3\0\1\73\6\0\1\31\1\0\1\74" +
                    "\2\0\1\31\5\0\27\31\1\0\37\31\1\0\u01ca\31" +
                    "\4\0\14\31\16\0\5\31\7\0\1\31\1\0\1\31" +
                    "\21\0\160\74\5\31\1\0\2\31\3\0\3\31\1\0" +
                    "\1\31\6\0\1\31\1\74\3\31\1\0\1\31\1\0" +
                    "\24\31\1\0\123\31\1\0\213\31\1\0\5\74\2\0" +
                    "\246\31\1\0\46\31\2\0\1\31\6\0\51\31\10\0" +
                    "\55\74\1\0\1\74\1\0\2\74\1\0\2\74\1\0" +
                    "\1\74\10\0\33\31\4\0\4\31\35\0\13\74\5\0" +
                    "\53\31\37\74\4\0\2\31\1\74\143\31\1\0\1\31" +
                    "\7\74\2\0\6\74\2\31\2\74\1\0\4\74\2\31" +
                    "\12\74\3\31\2\0\1\31\20\0\1\31\1\74\36\31" +
                    "\33\74\2\0\131\31\13\74\1\31\16\0\12\74\41\31" +
                    "\11\74\2\31\4\0\1\31\2\0\1\74\2\0\26\31" +
                    "\4\74\1\31\11\74\1\31\3\74\1\31\5\74\22\0" +
                    "\31\31\3\74\4\0\13\31\65\0\25\31\1\0\10\31" +
                    "\25\0\17\74\1\0\41\74\66\31\3\74\1\31\22\74" +
                    "\1\31\7\74\12\31\2\74\2\0\12\74\1\0\20\31" +
                    "\3\74\1\0\10\31\2\0\2\31\2\0\26\31\1\0" +
                    "\7\31\1\0\1\31\3\0\4\31\2\0\1\74\1\31" +
                    "\7\74\2\0\2\74\2\0\3\74\1\31\10\0\1\74" +
                    "\4\0\2\31\1\0\3\31\2\74\2\0\12\74\2\31" +
                    "\12\0\1\31\1\0\1\74\2\0\3\74\1\0\6\31" +
                    "\4\0\2\31\2\0\26\31\1\0\7\31\1\0\2\31" +
                    "\1\0\2\31\1\0\2\31\2\0\1\74\1\0\5\74" +
                    "\4\0\2\74\2\0\3\74\3\0\1\74\7\0\4\31" +
                    "\1\0\1\31\7\0\14\74\3\31\1\74\13\0\3\74" +
                    "\1\0\11\31\1\0\3\31\1\0\26\31\1\0\7\31" +
                    "\1\0\2\31\1\0\5\31\2\0\1\74\1\31\10\74" +
                    "\1\0\3\74\1\0\3\74\2\0\1\31\17\0\2\31" +
                    "\2\74\2\0\12\74\11\0\1\31\6\74\1\0\3\74" +
                    "\1\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31" +
                    "\1\0\2\31\1\0\5\31\2\0\1\74\1\31\7\74" +
                    "\2\0\2\74\2\0\3\74\10\0\2\74\4\0\2\31" +
                    "\1\0\3\31\2\74\2\0\12\74\1\0\1\31\20\0" +
                    "\1\74\1\31\1\0\6\31\3\0\3\31\1\0\4\31" +
                    "\3\0\2\31\1\0\1\31\1\0\2\31\3\0\2\31" +
                    "\3\0\3\31\3\0\14\31\4\0\5\74\3\0\3\74" +
                    "\1\0\4\74\2\0\1\31\6\0\1\74\16\0\12\74" +
                    "\20\0\5\74\10\31\1\0\3\31\1\0\27\31\1\0" +
                    "\20\31\3\0\1\31\7\74\1\0\3\74\1\0\4\74" +
                    "\7\0\2\74\1\0\3\31\5\0\2\31\2\74\2\0" +
                    "\12\74\20\0\1\31\3\74\1\0\10\31\1\0\3\31" +
                    "\1\0\27\31\1\0\12\31\1\0\5\31\2\0\1\74" +
                    "\1\31\7\74\1\0\3\74\1\0\4\74\7\0\2\74" +
                    "\7\0\1\31\1\0\2\31\2\74\2\0\12\74\1\0" +
                    "\2\31\15\0\4\74\1\0\10\31\1\0\3\31\1\0" +
                    "\51\31\2\74\1\31\7\74\1\0\3\74\1\0\4\74" +
                    "\1\31\5\0\3\31\1\74\7\0\3\31\2\74\2\0" +
                    "\12\74\12\0\6\31\2\0\2\74\1\0\22\31\3\0" +
                    "\30\31\1\0\11\31\1\0\1\31\2\0\7\31\3\0" +
                    "\1\74\4\0\6\74\1\0\1\74\1\0\10\74\6\0" +
                    "\12\74\2\0\2\74\15\0\60\31\1\74\1\31\10\74" +
                    "\5\0\7\31\10\74\1\0\12\74\47\0\2\31\1\0" +
                    "\1\31\1\0\5\31\1\0\30\31\1\0\1\31\1\0" +
                    "\12\31\1\74\1\31\12\74\1\31\2\0\5\31\1\0" +
                    "\1\31\1\0\6\74\2\0\12\74\2\0\4\31\40\0" +
                    "\1\31\27\0\2\74\6\0\12\74\13\0\1\74\1\0" +
                    "\1\74\1\0\1\74\4\0\2\74\10\31\1\0\44\31" +
                    "\4\0\24\74\1\0\2\74\5\31\13\74\1\0\44\74" +
                    "\11\0\1\74\71\0\53\31\24\74\1\31\12\74\6\0" +
                    "\6\31\4\74\4\31\3\74\1\31\3\74\2\31\7\74" +
                    "\3\31\4\74\15\31\14\74\1\31\17\74\2\0\46\31" +
                    "\1\0\1\31\5\0\1\31\2\0\53\31\1\0\115\31" +
                    "\1\0\4\31\2\0\7\31\1\0\1\31\1\0\4\31" +
                    "\2\0\51\31\1\0\4\31\2\0\41\31\1\0\4\31" +
                    "\2\0\7\31\1\0\1\31\1\0\4\31\2\0\17\31" +
                    "\1\0\71\31\1\0\4\31\2\0\103\31\2\0\3\74" +
                    "\11\0\11\74\16\0\20\31\20\0\126\31\2\0\6\31" +
                    "\3\0\u016c\31\2\0\21\31\1\1\32\31\5\0\113\31" +
                    "\3\0\13\31\7\0\15\31\1\0\4\31\3\74\13\0" +
                    "\22\31\3\74\13\0\22\31\2\74\14\0\15\31\1\0" +
                    "\3\31\1\0\2\74\14\0\64\31\40\74\3\0\1\31" +
                    "\4\0\1\31\1\74\2\0\12\74\41\0\3\74\2\0" +
                    "\12\74\6\0\131\31\7\0\51\31\1\74\1\31\5\0" +
                    "\106\31\12\0\37\31\1\0\14\74\4\0\14\74\12\0" +
                    "\12\74\36\31\2\0\5\31\13\0\54\31\4\0\32\31" +
                    "\6\0\13\74\45\0\27\31\5\74\4\0\65\31\12\74" +
                    "\1\0\35\74\2\0\13\74\6\0\12\74\15\0\1\31" +
                    "\10\0\16\74\102\0\5\74\57\31\21\74\7\31\4\0" +
                    "\12\74\21\0\11\74\14\0\3\74\36\31\15\74\2\31" +
                    "\12\74\54\31\16\74\14\0\44\31\24\74\10\0\12\74" +
                    "\3\0\3\31\12\74\44\31\2\0\11\31\7\0\53\31" +
                    "\2\0\3\31\20\0\3\74\1\0\25\74\4\31\1\74" +
                    "\6\31\1\74\2\31\3\74\1\31\5\0\300\31\72\74" +
                    "\1\0\5\74\26\31\2\0\6\31\2\0\46\31\2\0" +
                    "\6\31\2\0\10\31\1\0\1\31\1\0\1\31\1\0" +
                    "\1\31\1\0\37\31\2\0\65\31\1\0\7\31\1\0" +
                    "\1\31\3\0\3\31\1\0\7\31\3\0\4\31\2\0" +
                    "\6\31\4\0\15\31\5\0\3\31\1\0\7\31\3\0" +
                    "\13\1\35\0\2\1\5\0\1\1\17\0\2\74\4\0" +
                    "\1\75\1\76\15\0\1\74\12\0\1\1\21\0\1\31" +
                    "\15\0\1\31\20\0\15\31\63\0\15\74\4\0\1\74" +
                    "\3\0\14\74\21\0\1\31\4\0\1\31\2\0\12\31" +
                    "\1\0\1\31\2\0\6\31\6\0\1\31\1\0\1\31" +
                    "\1\0\1\31\1\0\20\31\2\0\4\31\5\0\5\31" +
                    "\4\0\1\31\21\0\51\31\174\0\1\77\60\0\1\100" +
                    "\1\101\u0125\0\1\102\u028a\0\1\103\1\104\26\0\57\31" +
                    "\1\0\57\31\1\0\205\31\6\0\4\31\3\74\2\31" +
                    "\14\0\46\31\1\0\1\31\5\0\1\31\2\0\70\31" +
                    "\7\0\1\31\17\0\1\74\27\31\11\0\7\31\1\0" +
                    "\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0" +
                    "\7\31\1\0\7\31\1\0\7\31\1\0\40\74\1\1" +
                    "\4\0\3\31\31\0\11\31\6\74\1\0\5\31\2\0" +
                    "\5\31\4\0\126\31\2\0\2\74\2\0\3\31\1\0" +
                    "\132\31\1\0\4\31\5\0\53\31\1\0\136\31\21\0" +
                    "\33\31\65\0\306\31\112\0\360\31\20\0\215\31\103\0" +
                    "\56\31\2\0\15\31\3\0\20\31\12\74\2\31\24\0" +
                    "\57\31\1\74\4\0\12\74\1\0\37\31\2\74\120\31" +
                    "\2\74\45\0\11\31\2\0\147\31\2\0\65\31\2\0" +
                    "\5\31\60\0\13\31\1\74\3\31\1\74\4\31\1\74" +
                    "\27\31\5\74\30\0\64\31\14\0\2\74\62\31\22\74" +
                    "\12\0\12\74\6\0\22\74\6\31\3\0\1\31\1\0" +
                    "\2\31\13\74\34\31\10\74\2\0\27\31\15\74\14\0" +
                    "\35\31\3\0\4\74\57\31\16\74\16\0\1\31\12\74" +
                    "\6\0\5\31\1\74\12\31\12\74\5\31\1\0\51\31" +
                    "\16\74\11\0\3\31\1\74\10\31\2\74\2\0\12\74" +
                    "\6\0\27\31\3\0\1\31\3\74\62\31\1\74\1\31" +
                    "\3\74\2\31\2\74\5\31\2\74\1\31\1\74\1\31" +
                    "\30\0\3\31\2\0\13\31\5\74\2\0\3\31\2\74" +
                    "\12\0\6\31\2\0\6\31\2\0\6\31\11\0\7\31" +
                    "\1\0\7\31\1\0\53\31\1\0\14\31\10\0\163\31" +
                    "\10\74\1\0\2\74\2\0\12\74\6\0\244\31\14\0" +
                    "\27\31\4\0\61\31\u0104\0\156\31\2\0\152\31\46\0" +
                    "\7\31\14\0\5\31\5\0\1\31\1\74\12\31\1\0" +
                    "\15\31\1\0\5\31\1\0\1\31\1\0\2\31\1\0" +
                    "\2\31\1\0\154\31\41\0\213\31\6\0\332\31\22\0" +
                    "\100\31\2\0\66\31\50\0\12\31\6\0\20\74\20\0" +
                    "\20\74\3\0\2\74\30\0\3\74\41\0\1\31\1\0" +
                    "\1\31\3\0\1\31\1\0\1\31\1\0\1\31\1\0" +
                    "\1\31\1\0\176\31\23\0\12\74\7\0\32\31\4\0" +
                    "\1\74\1\0\32\31\13\0\70\31\2\74\37\31\3\0" +
                    "\6\31\2\0\6\31\2\0\6\31\2\0\3\31\43\0" +
                    "\14\31\1\0\32\31\1\0\23\31\1\0\2\31\1\0" +
                    "\17\31\2\0\16\31\42\0\173\31\105\0\65\31\210\0" +
                    "\1\74\202\0\35\31\3\0\61\31\17\0\1\74\37\0" +
                    "\40\31\15\0\36\31\5\0\46\31\5\74\5\0\36\31" +
                    "\2\0\44\31\4\0\10\31\1\0\5\31\52\0\236\31" +
                    "\2\0\12\74\6\0\44\31\4\0\44\31\4\0\50\31" +
                    "\10\0\64\31\234\0\67\31\11\0\26\31\12\0\10\31" +
                    "\230\0\6\31\2\0\1\31\1\0\54\31\1\0\2\31" +
                    "\3\0\1\31\2\0\27\31\12\0\27\31\11\0\37\31" +
                    "\101\0\23\31\1\0\2\31\12\0\26\31\12\0\32\31" +
                    "\106\0\70\31\6\0\2\31\100\0\1\31\3\74\1\0" +
                    "\2\74\5\0\4\74\4\31\1\0\3\31\1\0\35\31" +
                    "\2\0\3\74\4\0\1\74\40\0\35\31\3\0\35\31" +
                    "\43\0\10\31\1\0\34\31\2\74\31\0\66\31\12\0" +
                    "\26\31\12\0\23\31\15\0\22\31\156\0\111\31\67\0" +
                    "\63\31\15\0\63\31\15\0\44\31\4\74\10\0\12\74" +
                    "\306\0\35\31\12\0\1\31\10\0\26\31\13\74\217\0" +
                    "\27\31\11\0\3\74\65\31\17\74\37\0\12\74\17\0" +
                    "\4\74\55\31\13\74\25\0\31\31\7\0\12\74\6\0" +
                    "\3\74\44\31\16\74\1\0\12\74\4\0\1\31\2\74" +
                    "\11\0\43\31\1\74\2\0\1\31\11\0\3\74\60\31" +
                    "\16\74\4\31\4\0\4\74\3\0\12\74\1\31\1\0" +
                    "\1\31\43\0\22\31\1\0\31\31\14\74\6\0\1\74" +
                    "\101\0\7\31\1\0\1\31\1\0\4\31\1\0\17\31" +
                    "\1\0\12\31\7\0\57\31\14\74\5\0\12\74\6\0" +
                    "\4\74\1\0\10\31\2\0\2\31\2\0\26\31\1\0" +
                    "\7\31\1\0\2\31\1\0\5\31\1\0\2\74\1\31" +
                    "\7\74\2\0\2\74\2\0\3\74\2\0\1\31\6\0" +
                    "\1\74\5\0\5\31\2\74\2\0\7\74\3\0\5\74" +
                    "\213\0\65\31\22\74\4\31\5\0\12\74\4\0\1\74" +
                    "\1\31\40\0\60\31\24\74\2\31\1\0\1\31\10\0" +
                    "\12\74\246\0\57\31\7\74\2\0\11\74\27\0\4\31" +
                    "\2\74\42\0\60\31\21\74\3\0\1\31\13\0\12\74" +
                    "\46\0\53\31\15\74\1\31\7\0\12\74\66\0\33\31" +
                    "\2\0\17\74\4\0\12\74\306\0\54\31\17\74\145\0" +
                    "\100\31\12\74\25\0\1\31\240\0\10\31\2\0\47\31" +
                    "\7\74\2\0\7\74\1\31\1\0\1\31\1\74\33\0" +
                    "\1\31\12\74\50\31\7\74\1\31\4\74\10\0\1\74" +
                    "\10\0\1\31\13\74\56\31\20\74\3\0\1\31\42\0" +
                    "\71\31\7\0\11\31\1\0\45\31\10\74\1\0\10\74" +
                    "\1\31\17\0\12\74\30\0\36\31\2\0\26\74\1\0" +
                    "\16\74\111\0\7\31\1\0\2\31\1\0\46\31\6\74" +
                    "\3\0\1\74\1\0\2\74\1\0\7\74\1\31\1\74" +
                    "\10\0\12\74\6\0\6\31\1\0\2\31\1\0\40\31" +
                    "\5\74\1\0\2\74\1\0\5\74\1\31\7\0\12\74" +
                    "\u0136\0\23\31\4\74\11\0\232\31\146\0\157\31\21\0" +
                    "\304\31\274\0\57\31\321\0\107\31\271\0\71\31\7\0" +
                    "\37\31\1\0\12\74\146\0\36\31\2\0\5\74\13\0" +
                    "\60\31\7\74\11\0\4\31\14\0\12\74\11\0\25\31" +
                    "\5\0\23\31\260\0\100\31\200\0\113\31\4\0\1\74" +
                    "\1\31\67\74\7\0\4\74\15\31\100\0\2\31\1\0" +
                    "\1\31\34\0\370\31\10\0\363\31\15\0\37\31\61\0" +
                    "\3\31\21\0\4\31\10\0\u018c\31\4\0\153\31\5\0" +
                    "\15\31\3\0\11\31\7\0\12\31\3\0\2\74\306\0" +
                    "\5\74\3\0\6\74\10\0\10\74\2\0\7\74\36\0" +
                    "\4\74\224\0\3\74\273\0\125\31\1\0\107\31\1\0" +
                    "\2\31\2\0\1\31\2\0\2\31\2\0\4\31\1\0" +
                    "\14\31\1\0\1\31\1\0\7\31\1\0\101\31\1\0" +
                    "\4\31\2\0\10\31\1\0\7\31\1\0\34\31\1\0" +
                    "\4\31\1\0\5\31\1\0\1\31\3\0\7\31\1\0" +
                    "\u0154\31\2\0\31\31\1\0\31\31\1\0\37\31\1\0" +
                    "\31\31\1\0\37\31\1\0\31\31\1\0\37\31\1\0" +
                    "\31\31\1\0\37\31\1\0\31\31\1\0\10\31\2\0" +
                    "\151\74\4\0\62\74\10\0\1\74\16\0\1\74\26\0" +
                    "\5\74\1\0\17\74\120\0\7\74\1\0\21\74\2\0" +
                    "\7\74\1\0\2\74\1\0\5\74\325\0\55\31\3\0" +
                    "\7\74\7\31\2\0\12\74\4\0\1\31\u0171\0\54\31" +
                    "\16\74\6\0\305\31\13\0\7\74\51\0\104\31\7\74" +
                    "\1\31\4\0\12\74\246\0\4\31\1\0\33\31\1\0" +
                    "\2\31\1\0\1\31\2\0\1\31\1\0\12\31\1\0" +
                    "\4\31\1\0\1\31\1\0\1\31\6\0\1\31\4\0" +
                    "\1\31\1\0\1\31\1\0\1\31\1\0\3\31\1\0" +
                    "\2\31\1\0\1\31\2\0\1\31\1\0\1\31\1\0" +
                    "\1\31\1\0\1\31\1\0\1\31\1\0\2\31\1\0" +
                    "\1\31\2\0\4\31\1\0\7\31\1\0\4\31\1\0" +
                    "\4\31\1\0\1\31\1\0\12\31\1\0\21\31\5\0" +
                    "\3\31\1\0\5\31\1\0\21\31\104\0\327\31\51\0" +
                    "\65\31\13\0\336\31\2\0\u0182\31\16\0\u0131\31\37\0" +
                    "\36\31\342\0\360\74\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[30208];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1" +
                    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\1\1\30\1\31\1\1\22\26\1\32" +
                    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\17" +
                    "\1\42\1\43\1\44\1\45\1\0\1\46\2\0\1\47" +
                    "\1\50\3\0\1\51\1\52\12\26\1\53\2\26\1\54" +
                    "\1\26\1\55\1\56\26\26\1\46\1\57\1\0\1\52" +
                    "\13\26\1\60\1\53\4\26\1\61\3\26\1\62\1\41" +
                    "\1\63\11\26\1\64\10\26\1\65\1\26\1\66\3\26" +
                    "\1\67\1\70\5\26\1\53\7\26\1\71\7\26\1\72" +
                    "\1\64\1\73\5\26\1\74\1\26\1\75\1\26\1\76" +
                    "\1\77\1\100\2\26\1\70\3\26\1\101\1\102\2\26" +
                    "\1\103\3\26\1\104\3\26\1\105\3\26\1\106\1\107" +
                    "\1\110\1\111\1\112\1\113\3\26\1\103\5\26\1\114" +
                    "\1\26\1\115\1\26\1\116\1\117\1\100\1\112\2\26" +
                    "\1\120\10\26\1\121\7\26\1\122\1\123\1\26\1\122" +
                    "\1\124";

    private static int[] zzUnpackAction() {
        int[] result = new int[270];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\105\0\212\0\105\0\317\0\105\0\105\0\u0114" +
                    "\0\105\0\105\0\105\0\105\0\105\0\u0159\0\u019e\0\u01e3" +
                    "\0\105\0\u0228\0\105\0\105\0\105\0\105\0\105\0\105" +
                    "\0\u026d\0\105\0\u02b2\0\105\0\105\0\u02f7\0\u033c\0\u0381" +
                    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9" +
                    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1" +
                    "\0\105\0\105\0\105\0\105\0\u0816\0\105\0\105\0\105" +
                    "\0\105\0\105\0\u085b\0\105\0\105\0\317\0\105\0\u08a0" +
                    "\0\u0114\0\105\0\105\0\u08e5\0\u092a\0\u02f7\0\105\0\u096f" +
                    "\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97" +
                    "\0\u0bdc\0\u0c21\0\u026d\0\u0c66\0\u0cab\0\u026d\0\u0cf0\0\u0d35" +
                    "\0\u026d\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18" +
                    "\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140" +
                    "\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\317" +
                    "\0\105\0\u1368\0\105\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1" +
                    "\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u026d\0\u16a4" +
                    "\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u026d\0\u17fd\0\u1842\0\u1887" +
                    "\0\u026d\0\u026d\0\u026d\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0" +
                    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08" +
                    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\105\0\u1da6\0\u026d" +
                    "\0\u1deb\0\u1e30\0\u1e75\0\u026d\0\u1eba\0\u1eff\0\u1f44\0\u1f89" +
                    "\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1" +
                    "\0\u21f6\0\u223b\0\u026d\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394" +
                    "\0\u23d9\0\u241e\0\u026d\0\105\0\u026d\0\u2463\0\u24a8\0\u24ed" +
                    "\0\u2532\0\u2577\0\u026d\0\u25bc\0\u026d\0\u2601\0\u026d\0\u026d" +
                    "\0\u026d\0\u2646\0\u268b\0\u026d\0\u26d0\0\u2715\0\u275a\0\u026d" +
                    "\0\u026d\0\u279f\0\u27e4\0\u026d\0\u2829\0\u286e\0\u28b3\0\u026d" +
                    "\0\u28f8\0\u293d\0\u2982\0\u026d\0\u29c7\0\u2a0c\0\u2a51\0\u026d" +
                    "\0\u026d\0\u026d\0\u026d\0\u2a96\0\u026d\0\u2adb\0\u2b20\0\u2b65" +
                    "\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u026d\0\u2d48" +
                    "\0\u026d\0\u2d8d\0\u026d\0\u026d\0\u2dd2\0\105\0\u2e17\0\u2e5c" +
                    "\0\u026d\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f" +
                    "\0\u3084\0\u026d\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222" +
                    "\0\u3267\0\u32ac\0\u026d\0\u32f1\0\105\0\u026d";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[270];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\2\31\1\45\2\31\1\46\1\47" +
                    "\1\50\1\51\1\31\1\52\1\53\1\54\1\55\1\56" +
                    "\1\57\1\31\1\60\1\61\1\62\1\63\1\64\1\65" +
                    "\1\2\1\66\1\67\1\70\1\71\1\72\1\73\1\74" +
                    "\1\75\106\0\2\3\102\0\4\76\1\77\26\76\1\100" +
                    "\51\76\7\101\1\102\75\101\25\0\1\103\75\0\1\104" +
                    "\100\0\1\105\113\0\1\72\103\0\1\31\7\0\2\31" +
                    "\5\0\30\31\5\0\1\31\43\0\1\73\51\0\36\106" +
                    "\1\107\46\106\20\0\1\31\7\0\2\31\5\0\21\31" +
                    "\1\110\6\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\20\31\1\111\7\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\1\112\12\31\1\113\2\31\1\114" +
                    "\11\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\4\31\1\115\23\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\13\31\1\116\1\31\1\117\10\31\1\120" +
                    "\1\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\1\121\12\31\1\122\1\31\1\123\1\124\4\31\1\125" +
                    "\4\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\5\31\1\126\6\31\1\127\1\130\3\31\1\131\6\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\1\132" +
                    "\3\31\1\133\23\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\1\134\7\31\1\135\17\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\1\136\3\31\1\137" +
                    "\3\31\1\140\5\31\1\141\4\31\1\142\4\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\1\31\1\143" +
                    "\20\31\1\144\5\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\1\145\3\31\1\146\23\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\22\31\1\147\5\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\20\31" +
                    "\1\150\6\31\1\151\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\15\31\1\152\3\31\1\153\6\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\1\154\27\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\7\31" +
                    "\1\155\1\156\17\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\10\31\1\157\17\31\5\0\1\31\30\0" +
                    "\1\65\7\0\1\65\6\0\6\65\40\0\2\73\1\0" +
                    "\102\73\4\76\1\160\26\76\1\100\51\76\23\0\2\161" +
                    "\60\0\12\105\1\162\72\105\3\0\1\163\14\0\1\31" +
                    "\5\0\1\163\1\0\2\31\5\0\30\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\4\31\1\164\23\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\21\31" +
                    "\1\165\1\166\5\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\1\167\27\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\15\31\1\170\12\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\5\31\1\123\22\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\21\31" +
                    "\1\171\6\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\23\31\1\172\4\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\2\31\1\173\17\31\1\174\5\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\13\31" +
                    "\1\175\14\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\1\176\27\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\20\31\1\177\7\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\15\31\1\200\12\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\17\31\1\201" +
                    "\10\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\3\31\1\202\16\31\1\203\5\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\14\31\1\204\13\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\22\31\1\205" +
                    "\5\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\2\31\1\206\17\31\1\207\5\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\2\31\1\206\25\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\14\31\1\210" +
                    "\13\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\25\31\1\211\2\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\13\31\1\212\14\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\22\31\1\213\5\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\13\31\1\214" +
                    "\14\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\11\31\1\215\16\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\7\31\1\216\20\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\10\31\1\217\17\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\21\31\1\220" +
                    "\1\221\5\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\20\31\1\222\7\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\1\223\22\31\1\224\3\31\1\225" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\17\31" +
                    "\1\226\10\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\10\31\1\227\11\31\1\230\5\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\10\31\1\231\17\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\13\31" +
                    "\1\205\4\31\1\205\7\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\4\31\1\232\3\31\1\233\17\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\22\31" +
                    "\1\234\5\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\4\31\1\235\23\31\5\0\1\31\10\0\12\105" +
                    "\1\162\4\105\1\236\65\105\20\0\1\31\7\0\2\31" +
                    "\5\0\1\237\27\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\4\31\1\240\23\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\2\31\1\241\25\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\21\31\1\242" +
                    "\6\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\22\31\1\243\5\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\4\31\1\244\23\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\14\31\1\245\13\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\13\31\1\246" +
                    "\14\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\4\31\1\247\23\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\13\31\1\250\5\31\1\251\6\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\6\31\1\252" +
                    "\21\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\2\31\1\253\25\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\13\31\1\254\14\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\23\31\1\255\4\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\4\31\1\256" +
                    "\23\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\1\31\1\257\26\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\20\31\1\260\7\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\2\31\1\261\25\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\4\31\1\262" +
                    "\23\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\13\31\1\263\14\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\4\31\1\264\23\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\4\31\1\265\23\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\21\31\1\266" +
                    "\6\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\23\31\1\267\4\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\23\31\1\270\4\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\23\31\1\271\4\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\10\31\1\272" +
                    "\17\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\4\31\1\273\23\31\5\0\1\31\13\0\1\274\14\0" +
                    "\1\31\5\0\1\274\1\0\2\31\5\0\30\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\4\31\1\275" +
                    "\16\31\1\276\4\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\16\31\1\277\3\31\1\300\5\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\10\31\1\301" +
                    "\17\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\15\31\1\302\12\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\15\31\1\303\12\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\13\31\1\304\14\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\7\31\1\305" +
                    "\20\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\13\31\1\306\14\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\12\31\1\307\15\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\7\31\1\310\20\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\21\31\1\311" +
                    "\6\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\10\31\1\312\17\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\4\31\1\313\14\31\1\314\6\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\23\31\1\315" +
                    "\4\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\15\31\1\316\12\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\22\31\1\317\5\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\4\31\1\320\23\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\21\31\1\321" +
                    "\6\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\22\31\1\322\5\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\10\31\1\323\16\31\1\324\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\2\31\1\325\25\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\20\31" +
                    "\1\326\7\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\3\31\1\327\24\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\16\31\1\123\11\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\7\31\1\330\20\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\21\31" +
                    "\1\331\6\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\2\31\1\332\25\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\20\31\1\333\7\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\4\31\1\334\23\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\14\31" +
                    "\1\335\13\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\20\31\1\336\7\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\2\31\1\337\25\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\22\31\1\340\5\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\21\31" +
                    "\1\275\6\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\15\31\1\341\12\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\4\31\1\342\23\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\13\31\1\343\14\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\6\31" +
                    "\1\344\21\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\4\31\1\343\23\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\3\31\1\345\24\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\15\31\1\346\12\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\20\31" +
                    "\1\347\7\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\3\31\1\350\24\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\3\31\1\351\24\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\7\31\1\352\20\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\10\31" +
                    "\1\353\17\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\14\31\1\354\13\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\22\31\1\355\5\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\5\31\1\356\22\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\1\357" +
                    "\27\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\17\31\1\360\10\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\22\31\1\361\5\31\5\0\1\31\30\0" +
                    "\1\31\7\0\2\31\5\0\25\31\1\362\2\31\5\0" +
                    "\1\31\30\0\1\31\7\0\2\31\5\0\4\31\1\363" +
                    "\23\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\15\31\1\364\12\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\22\31\1\365\5\31\5\0\1\31\13\0" +
                    "\1\366\14\0\1\31\5\0\1\366\1\0\2\31\5\0" +
                    "\30\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\23\31\1\367\4\31\5\0\1\31\30\0\1\31\7\0" +
                    "\2\31\5\0\1\370\27\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\4\31\1\371\23\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\21\31\1\324\6\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\20\31" +
                    "\1\372\7\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\16\31\1\373\11\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\4\31\1\374\23\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\10\31\1\375\17\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\1\376" +
                    "\27\31\5\0\1\31\30\0\1\31\7\0\2\31\5\0" +
                    "\1\377\27\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\10\31\1\u0100\17\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\23\31\1\u0101\4\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\4\31\1\u0102\23\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\22\31" +
                    "\1\u0103\5\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\16\31\1\u0104\11\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\15\31\1\123\12\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\15\31\1\u0105\12\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\24\31" +
                    "\1\300\3\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\2\31\1\u0106\25\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\2\31\1\u0107\25\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\21\31\1\u0108\6\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\20\31" +
                    "\1\u0106\7\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\4\31\1\314\23\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\23\31\1\u0109\4\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\22\31\1\351\5\31" +
                    "\5\0\1\31\30\0\1\31\7\0\2\31\5\0\4\31" +
                    "\1\311\23\31\5\0\1\31\30\0\1\31\7\0\2\31" +
                    "\5\0\4\31\1\u010a\23\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\4\31\1\u010b\23\31\5\0\1\31" +
                    "\30\0\1\31\7\0\2\31\5\0\6\31\1\u010c\21\31" +
                    "\5\0\1\31\13\0\1\u010d\14\0\1\31\5\0\1\u010d" +
                    "\1\0\2\31\5\0\30\31\5\0\1\31\30\0\1\31" +
                    "\7\0\2\31\5\0\7\31\1\u010e\20\31\5\0\1\31" +
                    "\10\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[13110];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\1\1\1\11\1\1\2\11\1\1\5\11" +
                    "\3\1\1\11\1\1\6\11\1\1\1\11\1\1\2\11" +
                    "\23\1\4\11\1\1\5\11\1\1\2\11\1\0\1\11" +
                    "\2\0\2\11\3\0\1\11\51\1\1\11\1\0\1\11" +
                    "\52\1\1\11\35\1\1\11\71\1\1\11\26\1\1\11" +
                    "\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[270];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** Number of newlines encountered up to the start of the matched text. */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _ValkyrieLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    public com.intellij.psi.tree.IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 85:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 86:
                        break;
                    case 3: {
                        return OP_BANG;
                    }
                    // fall through
                    case 87:
                        break;
                    case 4: {
                        return HASH;
                    }
                    // fall through
                    case 88:
                        break;
                    case 5: {
                        return DOLLAR;
                    }
                    // fall through
                    case 89:
                        break;
                    case 6: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 90:
                        break;
                    case 7: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 91:
                        break;
                    case 8: {
                        return STAR;
                    }
                    // fall through
                    case 92:
                        break;
                    case 9: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 93:
                        break;
                    case 10: {
                        return COMMA;
                    }
                    // fall through
                    case 94:
                        break;
                    case 11: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 95:
                        break;
                    case 12: {
                        return DOT;
                    }
                    // fall through
                    case 96:
                        break;
                    case 13: {
                        return SLASH;
                    }
                    // fall through
                    case 97:
                        break;
                    case 14: {
                        return INTEGER;
                    }
                    // fall through
                    case 98:
                        break;
                    case 15: {
                        return COLON;
                    }
                    // fall through
                    case 99:
                        break;
                    case 16: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 100:
                        break;
                    case 17: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 101:
                        break;
                    case 18: {
                        return EQUAL;
                    }
                    // fall through
                    case 102:
                        break;
                    case 19: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 103:
                        break;
                    case 20: {
                        return OP_AND_THEN;
                    }
                    // fall through
                    case 104:
                        break;
                    case 21: {
                        return AT;
                    }
                    // fall through
                    case 105:
                        break;
                    case 22: {
                        return SYMBOL;
                    }
                    // fall through
                    case 106:
                        break;
                    case 23: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 107:
                        break;
                    case 24: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 108:
                        break;
                    case 25: {
                        return OP_REMARK;
                    }
                    // fall through
                    case 109:
                        break;
                    case 26: {
                        return BRACE_L;
                    }
                    // fall through
                    case 110:
                        break;
                    case 27: {
                        return OP_OR;
                    }
                    // fall through
                    case 111:
                        break;
                    case 28: {
                        return BRACE_R;
                    }
                    // fall through
                    case 112:
                        break;
                    case 29: {
                        return OP_CONCAT;
                    }
                    // fall through
                    case 113:
                        break;
                    case 30: {
                        return COLOR;
                    }
                    // fall through
                    case 114:
                        break;
                    case 31: {
                        return OFFSET_L;
                    }
                    // fall through
                    case 115:
                        break;
                    case 32: {
                        return OFFSET_R;
                    }
                    // fall through
                    case 116:
                        break;
                    case 33: {
                        return KW_NIL;
                    }
                    // fall through
                    case 117:
                        break;
                    case 34: {
                        return PROPORTION;
                    }
                    // fall through
                    case 118:
                        break;
                    case 35: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 119:
                        break;
                    case 36: {
                        return GENERIC_L;
                    }
                    // fall through
                    case 120:
                        break;
                    case 37: {
                        return GENERIC_R;
                    }
                    // fall through
                    case 121:
                        break;
                    case 38: {
                        return TEXT_DOUBLE;
                    }
                    // fall through
                    case 122:
                        break;
                    case 39: {
                        return TEXT_SINGLE;
                    }
                    // fall through
                    case 123:
                        break;
                    case 40: {
                        return OP_TO;
                    }
                    // fall through
                    case 124:
                        break;
                    case 41: {
                        return SYMBOW_RAW;
                    }
                    // fall through
                    case 125:
                        break;
                    case 42: {
                        return KW_AS;
                    }
                    // fall through
                    case 126:
                        break;
                    case 43: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 127:
                        break;
                    case 44: {
                        return KW_IF;
                    }
                    // fall through
                    case 128:
                        break;
                    case 45: {
                        return KW_IN;
                    }
                    // fall through
                    case 129:
                        break;
                    case 46: {
                        return KW_IS;
                    }
                    // fall through
                    case 130:
                        break;
                    case 47: {
                        return OP_UNTIL;
                    }
                    // fall through
                    case 131:
                        break;
                    case 48: {
                        return KW_FOR;
                    }
                    // fall through
                    case 132:
                        break;
                    case 49: {
                        return KW_LET;
            }
          // fall through
                    case 133:
                        break;
                    case 50: {
                        return KW_NEW;
                    }
                    // fall through
                    case 134:
                        break;
                    case 51: {
                        return KW_NOT;
                    }
                    // fall through
                    case 135:
                        break;
                    case 52: {
                        return KW_TRY;
                    }
                    // fall through
                    case 136:
                        break;
                    case 53: {
                        return COMMENT_BLOCK;
                    }
                    // fall through
                    case 137:
                        break;
                    case 54: {
                        return KW_CASE;
                    }
                    // fall through
                    case 138:
                        break;
                    case 55: {
                        return KW_ELSE;
                    }
                    // fall through
                    case 139:
                        break;
                    case 56: {
                        return KW_ENUMERATE;
                    }
                    // fall through
                    case 140:
                        break;
                    case 57: {
                        return KW_NULL;
                    }
                    // fall through
                    case 141:
                        break;
                    case 58: {
                        return KW_TRUE;
                    }
                    // fall through
                    case 142:
                        break;
                    case 59: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 143:
                        break;
                    case 60: {
                        return KW_WHEN;
                    }
                    // fall through
                    case 144:
                        break;
                    case 61: {
                        return KW_WITH;
                    }
                    // fall through
                    case 145:
                        break;
                    case 62: {
                        return KW_BREAK;
                    }
                    // fall through
                    case 146:
                        break;
                    case 63: {
                        return KW_CATCH;
                    }
                    // fall through
                    case 147:
                        break;
                    case 64: {
                        return KW_CLASS;
                    }
                    // fall through
                    case 148:
                        break;
                    case 65: {
                        return KW_FALSE;
                    }
                    // fall through
                    case 149:
                        break;
                    case 66: {
                        return KW_FLAGS;
                    }
                    // fall through
                    case 150:
                        break;
                    case 67: {
                        return KW_IMPLY;
                    }
                    // fall through
                    case 151:
                        break;
                    case 68: {
                        return KW_MATCH;
                    }
                    // fall through
                    case 152:
                        break;
                    case 69: {
                        return KW_RAISE;
                    }
                    // fall through
                    case 153:
                        break;
                    case 70: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 154:
                        break;
                    case 71: {
                        return KW_UNION;
                    }
                    // fall through
                    case 155:
                        break;
                    case 72: {
                        return KW_UNITE;
                    }
                    // fall through
                    case 156:
                        break;
                    case 73: {
                        return KW_WHILE;
                    }
                    // fall through
                    case 157:
                        break;
                    case 74: {
                        return KW_USING;
                    }
                    // fall through
                    case 158:
                        break;
                    case 75: {
                        return KW_YIELD;
                    }
                    // fall through
                    case 159:
                        break;
                    case 76: {
                        return KW_LAMBDA;
                    }
                    // fall through
                    case 160:
                        break;
                    case 77: {
                        return KW_OBJECT;
                    }
                    // fall through
                    case 161:
                        break;
                    case 78:
            { return KW_RESUME;
            }
          // fall through
                    case 162:
                        break;
                    case 79: {
                        return KW_RETURN;
                    }
                    // fall through
                    case 163:
                        break;
                    case 80:
            { return KW_EXCLUDE;
            }
          // fall through
                    case 164:
                        break;
                    case 81: {
                        return KW_CONTINUE;
                    }
                    // fall through
                    case 165:
                        break;
                    case 82: {
                        return KW_NAMESPACE;
                    }
                    // fall through
                    case 166:
                        break;
                    case 83:
            { return KW_OTHERWISE;
            }
          // fall through
                    case 167: break;
          case 84:
            { return KW_THROUGH;
            }
          // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
