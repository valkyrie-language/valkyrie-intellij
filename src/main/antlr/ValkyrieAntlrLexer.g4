lexer grammar ValkyrieAntlrLexer;
// $antlr-format useTab false, alignColons hanging, alignSemicolons hanging
// $antlr-format alignFirstTokens true
@lexer::members {

} 

DOT:        '.';
COMMA:      ',' | 'Ôºå';
SEMICOLON:  ';';
FAKE_COLON: '‚Åè' | ';;';

// colon
OP_PROPORTION: '‚à∑' | '::';
COLON:         ':' | '‚à∂';

// brackets
PARENTHESES_L: '(';
PARENTHESES_R: ')';
BRACKET_L:     '[';
BRACKET_R:     ']';
BRACE_L:       '{';
BRACE_R:       '}';
GENERIC_L:     '‚ü®';
GENERIC_R:     '‚ü©';
OFFSET_L:      '‚ÅÖ';
OFFSET_R:      '‚ÅÜ';
RANGE_L:       '‚ü¶';
RANGE_R:       '‚üß';
CEILING_L:     '‚åà';
CEILING_R:     '‚åâ';
FLOOR_L:       '‚åä';
FLOOR_R:       '‚åã';
COLLECTION_L:  '‚¶É';
COLLECTION_R:  '‚¶Ñ';

// add
OP_ADD: '+';
OP_SUB: '-';
// append
OP_INC: '++';
OP_DEC: '--';
// mul
OP_MUL:     '*';
OP_DIV:     '‚ÅÑ' | '‚àï' | '/';
OP_REM:     '‚Åí';
OP_DIV_REM: '/%' | '√∑';

// equal
OP_EQ:  '==';
OP_NE:  '‚â†' | '!=';
OP_EEE: '‚â°' | '===';
OP_NEE: '‚â¢' | '!==' | '=!=';
// compare
OP_LEQ: '‚©Ω' | '‚â§' | '<=';
OP_LLE: '<<=';
OP_LLL: '‚ãò' ;
OP_LL:  '‚â™' ;
OP_LT:  '<';
OP_GEQ: '‚©æ' | '‚â•' | '>=';
OP_GGE: '>>=';
OP_GGG: '‚ãô' ;
OP_GG:  '‚â´' ;
OP_GT:  '>';
// arrow
OP_ARROW:  '‚ü∂' | '->';
OP_ARROW2: '‚áí' | '=>';
OP_ARROW3: '==>';

// assign
OP_ASSIGN:     '=';
OP_BIND:       '‚Üê' | '<-';
OP_MAY_ASSIGN: '?=';
OP_ADD_ASSIGN: '+=';
OP_SUB_ASSIGN: '-=';
OP_MUL_ASSIGN: '*=';
OP_DIV_ASSIGN: '/=';
// not
OP_BANG: '!';
OP_NOT:  '¬¨';
KW_NOT:  'not';
// logical
LOGIC_AND:  '&&' | '‚àß';
LOGIC_XAND: '‚©ü';
LOGIC_NAND: '‚äº';
LOGIC_OR:   '||' | '‚à®';
LOGIC_XOR:  '‚äª';
LOGIC_NOR:  '‚äΩ';
// set
SET_INTERSECTION: '‚à©';
SET_UNION:        '‚à™';
// bitwise
OP_AND:    '&';
OP_OR:     '|';
OP_IMPL:   '‚ÄΩ';
OP_IFF:    '‚áî';
OP_MAP:    '/@' | '‚á¥' | '‚®µ';
OP_APPLY2: '@@' | '‚äï';
OP_APPLY3: '@@@' | '‚ü¥';

// macro call
OP_AT:   '@';
OP_HASH: '#' | '##' | '#!';
// macro slot
LAMBDA_SLOT: '$' | '$$';
MACRO_SLOT:  '¬ß' | '¬ß¬ß';
// monadic
OP_UNIMPLEMENTED: '‚Öè' | '‚çº' | '‚üÅ' | '???';
OP_OR_DEFAULT:    '??';
OP_OR_ELSE:       '?:';
OP_AND_THEN:      '?';
// in
OP_IN:        '‚àà' | '‚àä';
KW_IN:        'in';
OP_NOT_IN:    '‚àâ';
OP_CONTINUES: '‚àã' | '‚àç';
// is
KW_IS:       'is';
OP_SUP_TYPE: ':>';
OP_IS:       '‚äë' | '<:';
OP_IS_NOT:   '‚ã¢' | '<!';
// as
KW_AS: 'as' [!?]?;
// until
OP_DOT3:  '‚Ä¶' | '...';
OP_DOT2:  '‚Ä•' | '..';
OP_UNTIL: '..<' | '..=';
OP_POW:   '^';
// prefix
MAIN_PREFIX: [‚Öü‚àõ‚àú];
OP_ROOT2:    '‚àö';
// suffix
MAIN_SUFFIX:  [‚ÑÉ‚Ñâ‚Ä∞‚Ä±‚Ä≤‚Ä≥‚Ä¥‚Åó];
OP_TRANSPOSE: '‚ä§' | '‚Ä†' | '‚äπ'; // ·µÄ,·¥¥ are XIDs
OP_PERCENT:   '%';
// standalone
OP_REFERENCE: '‚Äª';
OP_LABEL:     '¬∂';
OP_OUTPUT:    '‚õ§' | '‚õ•' | '‚õ¶';
OP_LAST:      '‚õß' | '%%';
// keywords
KW_NAMESPACE: 'namespace' [!*?]?;
KW_IMPORT:    'using' [!*?]?;
KW_EXTENSION: 'extension';
// 
KW_CLASS: 'class' | 'structure' | 'vague' | 'fluid';
KW_TRAIT: 'trait' | 'interface';
KW_FLAGS: 'flags' | 'enumerate';
KW_UNION: 'unite' | 'union' | 'variant' | 'inductive';
KW_TYPE:  'typus';
//
KW_TEMPLATE:   'template' | 'generic' | 'constraint';
KW_EXTENDS:    'extends' | 'extend' | 'imply';
KW_IMPLEMENTS: 'implements';
//
KW_WHILE: 'while' | 'until';
KW_FOR:   'for';
//
KW_LET:      'let';
KW_NEW:      'new';
KW_OBJECT:   'object';
KW_LAMBDA:   'lambda';
KW_FUNCTION: 'function' | 'func' | 'fun' | 'fn' | 'micro' | 'macro';
// pattern match
KW_TRY:   'try';
KW_MATCH: 'match' | 'catch';
KW_SWITCH: 'switch';
KW_WITH:  'with';
KW_CASE:  'case';
KW_WHEN:  'when';
KW_WHERE: 'where';
// number
INTEGER: [0] | [1-9]([_]?[0-9])*;
DECIMAL
    : INTEGER DOT INTEGER EXP? // 1.35, 1.35E-9, 0.3, -4.5
    | INTEGER EXP
    ;
fragment EXP: [Ee] [+\-]? INTEGER;
              // $antlr-format off
STRING_START: '\'' -> pushMode(IN_STRING1);
STRING_DOUBLE: '"' -> type(STRING_START), pushMode(IN_STRING2);
STRING_TRIPLE:  '\'\'\'' -> type(STRING_START), pushMode(IN_STRING3);
STRING_SIXFOLD: '"""' -> type(STRING_START), pushMode(IN_STRING6);
// $antlr-format on
// conditional
KW_IF:        'if';
KW_ELSE:      'else';
KW_OTHERWISE: 'otherwise';
// control goto FROM: 'from';
RETURN:       'return';
RESUME:       'resume';
YIELD:        'yield';
BREAK:        'break';
CONTINUE:     'continue';
FALL_THROUGH: 'fallthrough';
RAISE:        'raise';
// atom
SPECIAL: 'true' | 'false' | 'null' | 'nil' | [‚àÖ‚àû‚ßù‚ßû];
// atom
RAW_ID:     '`' ~[`]+ '`';
UNICODE_ID: [_\p{XID_start}\p{Emoji_Presentation}] [\p{XID_continue}\p{Emoji}]*;

// comment
LINE_COMMENT:  ([üó®‚çù]|[\\][\\]) ~[\r\n]* -> channel(HIDDEN);
BLOCK_COMMENT: 'üó®üó®üó®' .*? 'üó©üó©üó©' -> channel(HIDDEN);

WHITE_SPACE:     [\p{White_Space}]+ -> channel(HIDDEN);
ERROR_CHARACTAR: . -> channel(HIDDEN);

// $antlr-format off
mode IN_STRING1;
STRING_TEXT: ~[']+;
STRING_END:  '\'' -> popMode;

mode IN_STRING2;
STRING_TEXT2: ~["]+ -> type(STRING_TEXT);
STRING_OUT2:  '"' -> type(STRING_END), popMode;

mode IN_STRING3;
STRING_TEXT3: ~[']+ -> type(STRING_TEXT);
ESCAPE_TEXT:  '\'' -> type(STRING_TEXT);
STRING_OUT3:  '\'\'\'' -> type(STRING_END), popMode;

mode IN_STRING6;
STRING_TEXT6: ~["]+ -> type(STRING_TEXT);
ESCAPE_TEXT6: '"' -> type(STRING_TEXT);
STRING_OUT6:  '"""' -> type(STRING_END), popMode;
