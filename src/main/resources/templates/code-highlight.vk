<KEYWORD>namespace</KEYWORD> <KEYWORD>package</KEYWORD>.module_path.module_name;

<KEYWORD>using</KEYWORD> dependency.restrict.<SYM_TRAIT>TraitBound</SYM_TRAIT>;
<KEYWORD>using</KEYWORD> dependency.external.<SYM_CLASS>ExternalClass</SYM_CLASS>.{
    <SYM_CLASS>ExternalClass</SYM_CLASS> <KEYWORD>as</KEYWORD> <SYM_CLASS>Ec</SYM_CLASS>,
    <SYM_TRAIT>ExternalTrait</SYM_TRAIT> <KEYWORD>as</KEYWORD> <SYM_TRAIT>Et</SYM_TRAIT>,
    include.{* <KEYWORD>exclude</KEYWORD> {<SYM_FUNCTION_FREE>function</SYM_FUNCTION_FREE>}}
};

<KEYWORD>trait</KEYWORD> <SYM_TRAIT>TraitName</SYM_TRAIT> {
    <SYM_FUNCTION_SELF>trait_method</SYM_FUNCTION_SELF>(<SYM_ARG_SELF>self</SYM_ARG_SELF>) -> <KEYWORD>Self</KEYWORD>;
    <SYM_FUNCTION_SELF>trait_method_mut</SYM_FUNCTION_SELF>(<SYM_MODIFIER>mut</SYM_MODIFIER> <SYM_ARG_SELF_MUT>self</SYM_ARG_SELF_MUT>) -> <KEYWORD>Self</KEYWORD>;
    <SYM_FUNCTION_FREE>trait_static</SYM_FUNCTION_FREE>(<SYM_ARG>arg</SYM_ARG> = 0) -> <KEYWORD>Self</KEYWORD>;
    <SYM_FUNCTION_FREE>trait_static_mut</SYM_FUNCTION_FREE>(<SYM_MODIFIER>mut</SYM_MODIFIER> <SYM_ARG_MUT>arg</SYM_ARG_MUT>) -> <KEYWORD>Self</KEYWORD>;
}

<SYM_MODIFIER>value</SYM_MODIFIER> <KEYWORD>class</KEYWORD> <SYM_STRUCTURE>ClassName</SYM_STRUCTURE>: <SYM_TRAIT>Display</SYM_TRAIT> {
    <SYM_FIELD>field_bool</SYM_FIELD>: <SYM_STRUCTURE>Boolean</SYM_STRUCTURE> = true
    <SYM_FIELD>field_string</SYM_FIELD>: <SYM_CLASS>String</SYM_CLASS> = ""
    <SYM_ATTRIBUTE>#get</SYM_ATTRIBUTE>                // public get
    <SYM_ATTRIBUTE>#set</SYM_ATTRIBUTE>(<SYM_MODIFIER>internal</SYM_MODIFIER>)      // internal set
    <SYM_FIELD>_field_u32</SYM_FIELD>: <KEYWORD>u32</KEYWORD> = 0 // private field
    <SYM_ATTRIBUTE>#get</SYM_ATTRIBUTE>({ <SYM_FIELD>_field_f32</SYM_FIELD> })
    <SYM_ATTRIBUTE>#set</SYM_ATTRIBUTE>({ <SYM_FIELD>_field_f32</SYM_FIELD> = <KEYWORD>value</KEYWORD> })
    <SYM_FIELD>_field_f32</SYM_FIELD>: <KEYWORD>f32</KEYWORD> = 0.0
}

<SYM_ATTRIBUTE>#derive</SYM_ATTRIBUTE>(<SYM_TRAIT>TotalEqual</SYM_TRAIT>)
<KEYWORD>class</KEYWORD> <SYM_CLASS>Point</SYM_CLASS>⟨<SYM_GENERIC>T</SYM_GENERIC>: <SYM_TRAIT>TotalEqual</SYM_TRAIT> = <KEYWORD>f32</KEYWORD>⟩ {
    <SYM_FIELD>x</SYM_FIELD>: <SYM_GENERIC>T</SYM_GENERIC> = <KEYWORD>default</KEYWORD>;
    <SYM_FIELD>y</SYM_FIELD>: <SYM_GENERIC>T</SYM_GENERIC> = <KEYWORD>default</KEYWORD>;
}

<KEYWORD>class</KEYWORD> <SYM_CLASS>Canifelis</SYM_CLASS>(<SYM_CLASS>Dog</SYM_CLASS>, <SYM_MODIFIER>readonly</SYM_MODIFIER> <SYM_FIELD_SUPER>pussy</SYM_FIELD_SUPER>: <SYM_CLASS>Cat</SYM_CLASS>) {
    <SYM_MODIFIER>new</SYM_MODIFIER> <SYM_FIELD>name</SYM_FIELD>: <SYM_CLASS>String</SYM_CLASS>
    <KEYWORD>constructor</KEYWORD>(<SYM_ARG>name</SYM_ARG>: <SYM_CLASS>String</SYM_CLASS>) {
        <KEYWORD>this</KEYWORD>.<SYM_FIELD>name</SYM_FIELD> = <SYM_ARG>name</SYM_ARG>
        <KEYWORD>this</KEYWORD>.<SYM_FIELD_SUPER>dog</SYM_FIELD_SUPER> = <SYM_CLASS>Dog</SYM_CLASS>(<SYM_ARG>name</SYM_ARG>)
        <SYM_FIELD_SUPER>pussy</SYM_FIELD_SUPER>(<SYM_ARG>name</SYM_ARG>)
    }
    <SYM_FUNCTION_SELF>say</SYM_FUNCTION_SELF>(<SYM_ARG_SELF>self</SYM_ARG_SELF>) {
        <SYM_FIELD_SUPER>dog</SYM_FIELD_SUPER>.<SYM_FUNCTION_SELF>say</SYM_FUNCTION_SELF>()
        <SYM_ARG_SELF>self</SYM_ARG_SELF>.<SYM_FIELD_SUPER>pussy</SYM_FIELD_SUPER>.<SYM_FUNCTION_SELF>say</SYM_FUNCTION_SELF>()
    }
    <SYM_DOMAIN>dsl</SYM_DOMAIN> {
        <SYM_FIELD>field</SYM_FIELD>;
        <SYM_FUNCTION_FREE>method</SYM_FUNCTION_FREE>() { }
        <SYM_DOMAIN>domain</SYM_DOMAIN> { }
    }
}

<KEYWORD>unite</KEYWORD> <SYM_CLASS>TaggedName</SYM_CLASS> {
    <SYM_VARIANT>VariantName</SYM_VARIANT>,
    <SYM_VARIANT>VariantClass</SYM_VARIANT> {
        <SYM_FIELD>x</SYM_FIELD>: Type = default
    }
}

<KEYWORD>enums</KEYWORD> <SYM_CLASS>DefineColor</SYM_CLASS>(<KEYWORD>u8</KEYWORD>) {
   <SYM_FIELD>Default</SYM_FIELD> = 0,
   <SYM_FIELD>Red</SYM_FIELD>     = 1,
   <SYM_FIELD>Green</SYM_FIELD>   = 2,
   <SYM_FIELD>Blue</SYM_FIELD>    = 3,
}

<KEYWORD>flags</KEYWORD> <SYM_CLASS>BitsetName</SYM_CLASS>(<KEYWORD>u8</KEYWORD>) {
   <SYM_FIELD>bit_field</SYM_FIELD> = 2⁂0000_0001
}

<KEYWORD>micro</KEYWORD> <SYM_FUNCTION_FREE>is_some</SYM_FUNCTION_FREE>(<SYM_ARG>maybe</SYM_ARG>: <SYM_CLASS>Option</SYM_CLASS><<SYM_GENERIC>T</SYM_GENERIC>>) -> <SYM_CLASS>Boolean</SYM_CLASS> {
    <SYM_ARG>maybe</SYM_ARG> match {
        <KEYWORD>case</KEYWORD> <SYM_VARIANT>Some</SYM_VARIANT>(<SYM_LOCAL>s</SYM_LOCAL>): <KEYWORD>true</KEYWORD>
        <KEYWORD>case</KEYWORD> <SYM_VARIANT>None</SYM_VARIANT>   : <KEYWORD>false</KEYWORD>
    }
}

<SYM_MODIFIER>functional</SYM_MODIFIER> <KEYWORD>macro</KEYWORD> <SYM_MACRO>name_of</SYM_MACRO>(<SYM_ARG>ns</SYM_ARG>: <SYM_CLASS>NamepathNode</SYM_CLASS>) {
    <SYM_ARG>ns</SYM_ARG>.<SYM_FUNCTION_SELF>resolve</SYM_FUNCTION_SELF>()?.<SYM_FIELD>last_name</SYM_FIELD>
}

<SYM_FUNCTION_FREE>print</SYM_FUNCTION_FREE>(<SYM_MACRO>@name_of</SYM_MACRO>(<SYM_CLASS>NamepathNode</SYM_CLASS>))
