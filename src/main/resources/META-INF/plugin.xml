<idea-plugin>
	<id>Valkyrie</id>
	<name>Valkyrie Language</name>
	<vendor>voml</vendor>
	<depends>com.intellij.modules.platform</depends>
	<depends optional="true" config-file="plugin-with-idea.xml">com.intellij.modules.ultimate</depends>
	<depends optional="true" config-file="plugin-with-markdown.xml">org.intellij.plugins.markdown</depends>
	<resource-bundle>messages.ValkyrieBundle</resource-bundle>
	<extensions defaultExtensionNs="com.intellij">
		<fileType
			name="valkyrie"
			language="valkyrie"
			extensions="vk;valkyrie;"
			implementationClass="valkyrie.language.file.ValkyrieFileType"
			fieldName="INSTANCE"/>
		<lang.parserDefinition
			language="valkyrie"
			implementationClass="valkyrie.psi.ParserDefinition"/>
		<multiHostInjector implementation="valkyrie.ide.matcher.LanguageInjector"/>
		<!-- Project -->
		<!--		<projectNameProvider implementation="valkyrie.ide.project.ValkyrieProjectName"/>-->
		<!--		<primaryModuleManager implementation="valkyrie.ide.project.ValkyriePrimaryPackage"/>-->
		<!--		<vfs.asyncListener implementation="valkyrie.ide.project.crate.CrateUpdateListener"/>-->
		<!-- Project SDK -->
		<!--		<sdkType implementation="valkyrie.ide.project.package.sdk.ValkyrieSdkType"/>-->
		<!--		<sdkFinder implementation="valkyrie.ide.project.sdk.ValkyrieSdkFinder"/>-->
		<!--		<projectSdkSetupValidator implementation="valkyrie.ide.project.sdk.ValkyrieSdkValidator"/>-->
		<!--		<sdkDownload implementation="valkyrie.ide.project.package.sdk.ValkyrieSdkDownload"/>-->
		<!--		<projectOpenProcessor implementation="valkyrie.ide.project.ValkyrieOpenProject"/>-->
		<!-- Project Library -->
		<!--		<library.type implementation="valkyrie.ide.project.library.ValkyrieLibraryType"/>-->
		<!--		<librarySettingsProvider implementation="valkyrie.ide.project.library.ValkyrieLibrarySettings"/>-->
		<!--		<packageDependencies.visitor-->
		<!--			language="Valkyrie"-->
		<!--			implementationClass="valkyrie.ide.project.ValkyrieDependencyResolver"/>-->
		<!--		<additionalLibraryRootsProvider implementation="valkyrie.ide.project.library.LibraryRootsProvider"/>-->
		<!-- Project Package, aka. Module in JetBrain's SDK -->
		<!--		<moduleBuilder-->
		<!--			builderClass="valkyrie.ide.project.ValkyrieCreatePackage"-->
		<!--			id="VALKYRIE_MODULE_TYPE"/>-->
		<!--		<moduleNameGenerator implementation="valkyrie.ide.project.crate.ValkyrieNameGenerator"/>-->
		<!--		<module.workingDirectoryProvider implementation="valkyrie.ide.project.crate.ValkyrieWorkingDirectory"/>-->
		<!--		<moduleContextProvider implementation="valkyrie.ide.project.crate.ValkyriePackageContext"/>-->
		<!-- Project Namespace -->
		<!--		<fileBasedIndex implementation="valkyrie.ide.project.ValkyrieFileIndex"/>-->
		<!--		<indexedRootsProvider implementation="valkyrie.ide.project.ExtraIndexContributor"/>-->
		<!--				<generatedSourcesFilter implementation="valkyrie.ide.project.package.ValkyrieGeneratedSource"/>-->
		<!-- Project Facet -->
		<!--		<facetType implementation="valkyrie.ide.project.facet.ValkyrieFacetType"/>-->
		<!-- StructureView -->
		<iconProvider implementation="valkyrie.language.file.ValkyrieIconProvider"/>
		<!--		<projectViewNestingRulesProvider implementation="valkyrie.language.file.ValkyrieFileGroup"/>-->
		<!--		<treeStructureProvider implementation="valkyrie.ide.view.VStructureProvider"/>-->
		<lang.structureViewExtension implementation="valkyrie.ide.view.ValkyrieStructureViewExtension"/>
		<lang.psiStructureViewFactory
			language="valkyrie"
			implementationClass="valkyrie.ide.view.ValkyrieStructureView"
		/>
		<typeHierarchyProvider language="valkyrie" implementationClass="valkyrie.ide.hierarchy.TypeHierarchyProvider"/>
		<methodHierarchyProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.hierarchy.MethodHierarchyProvider"
		/>
		<callHierarchyProvider language="valkyrie" implementationClass="valkyrie.ide.hierarchy.CallHierarchyProvider"/>
		<!-- Highlight -->
		<colorSettingsPage implementation="valkyrie.ide.highlight.HighlightSetting"/>
		<highlightVisitor
			implementation="valkyrie.ide.highlight.NodeHighlighter"
		/>
		<lang.syntaxHighlighter
			language="valkyrie"
			implementationClass="valkyrie.ide.highlight.TokenHighlighter"
		/>
		<colorProvider implementation="valkyrie.ide.line_marker.ValkyrieMarkColor"/>
		<!-- Formatter -->
		<langCodeStyleSettingsProvider implementation="valkyrie.ide.codeStyle.ValkyrieCodeStyleProvider"/>
		<formattingService implementation="valkyrie.ide.formatter.ValkyrieNativeFormat"/>
		<preFormatProcessor implementation="valkyrie.ide.formatter.ValkyrieBeforeFormat"/>
		<lang.formatter language="valkyrie" implementationClass="valkyrie.ide.formatter.ValkyrieFormatBuilder"/>
		<postFormatProcessor implementation="valkyrie.ide.formatter.ValkyrieAfterFormat"/>
		<lang.smartEnterProcessor language="valkyrie" implementationClass="valkyrie.ide.formatter.SmartEnter"/>
		<!-- Tests -->
		<!--		<configurationType implementation="valkyrie.ide.runner.ValkyrieConfigurationType"/>-->
		<!--		<runConfigurationsSettings implementation="valkyrie.ide.runner.ValkyrieRunnerSettings"/>-->
		<!--		<runConfigurationProducer implementation="valkyrie.ide.runner.ValkyrieRunConfigurationProducer"/>-->
		<!--		<runConfigurationTemplateProvider implementation="valkyrie.ide.runner.ValkyrieRunningTemplateProvider"/>-->
		<!--		<importTestOutput implementation="valkyrie.ide.runner.TestOutput"/>-->

		<!--		<testFinder implementation="valkyrie.ide.runner.ValkyrieFindTests"/>-->
		<!--		<testActionProvider implementation="valkyrie.ide.runner.VTestActionProvider"/>-->
		<!--		<testStatusListener implementation="valkyrie.ide.runner.VTestStatusListener"/>-->
		<!--		<testDiffProvider language="Valkyrie" implementationClass="valkyrie.ide.runner.VTestDiffProvider"/>-->
		<!-- Debugger -->
		<!--		<xdebugger.breakpointType implementation="valkyrie.ide.runner.breakpointType"/>-->
		<!--		<xdebugger.breakpointGroupingRule implementation="valkyrie.ide.runner.breakpointGroupingRule"/>-->
		<!--		<xdebugger.attachDebuggerProvider implementation="valkyrie.ide.runner.attachDebuggerProvider"/>-->
		<!--		<xdebugger.attachHostProvider implementation="valkyrie.ide.runner.ValkyrieAttachProvider"/>-->
		<!--		<xdebugger.attachHostSettingsProvider implementation="valkyrie.ide.runner.attachHostSettingsProvider"/>-->
		<!--		<testSourcesFilter implementation="valkyrie.ide.runner.ValkyrieTestSource"/>-->
		<!-- Goto -->
		<navbar implementation="valkyrie.ide.goto.VNavigationBarExtension"/>
		<lang.directNavigationProvider implementation="valkyrie.ide.navigation.ValkyrieDirectNavigationProvider"/>
		<breadcrumbsInfoProvider implementation="valkyrie.ide.navigation.ValkyrieBreadcrumbsProvider"/>
		<breadcrumbsPresentationProvider implementation="valkyrie.ide.navigation.ValkyrieBreadcrumbsPresentation"/>
		<symbolNavigation
			forClass="valkyrie.language.symbol.ValkyrieSymbolTemplate"
			implementationClass="valkyrie.ide.navigation.ValkyrieSymbolNavigationProvider"
		/>
		<codeInsight.gotoSuper language="valkyrie" implementationClass="valkyrie.ide.goto_super.GotoSuperSymbol"/>
		<superMethodsSearch implementation="valkyrie.ide.goto_super.SuperMethodsSearch"/>


		<gotoRelatedProvider implementation="valkyrie.ide.goto_related.GotoRelatedSymbol"/>


		<importFilteringRule implementation="valkyrie.ide.navigation.ValkyrieImportFilter"/>
		<usageFilteringRuleProvider implementation="valkyrie.ide.navigation.usageFiltering"/>
		<bookmarkProvider implementation="valkyrie.ide.navigation.ValkyrieBookmark"/>
		<bookmarksListProvider implementation="valkyrie.ide.goto.ValkyrieBookmarkList"/>
		<!-- Hint Line Marker -->
		<codeInsight.lineMarkerProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.line_marker.LineMarkerProvider"
		/>

		<runLineMarkerContributor language="valkyrie" implementationClass="valkyrie.ide.runner.RunnerProvider"/>
		<!-- Hint Above -->
		<vcs.codeVisionLanguageContext
			language="valkyrie"
			implementationClass="valkyrie.ide.hint.VisionAuthor"
		/>
		<codeInsight.daemonBoundCodeVisionProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.hint.VisionInheritors"
		/>
		<codeInsight.daemonBoundCodeVisionProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.hint.VisionUsage"
		/>
		<codeInsight.daemonBoundCodeVisionProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.hint.ValkyrieMonomorphismProvider"
		/>
		<codeInsight.daemonBoundCodeVisionProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.hint.VisionEffects"
		/>
		<!-- Hint Inlay -->
		<codeInsight.inlayProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.hint.TypeHintProvider"
		/>
		<codeInsight.typeInfo language="valkyrie" implementationClass="valkyrie.ide.hint.TypeInfoHint"/>
		<codeInsight.parameterInfo language="valkyrie" implementationClass="valkyrie.ide.hint.ParameterInfoHint"/>
		<codeInsight.parameterInfo.listener implementation="valkyrie.ide.hint.ParameterInfoListener"/>
		<codeInsight.parameterNameHints
			language="valkyrie"
			implementationClass="valkyrie.ide.hint.ArgumentNameProvider"
		/>
		<!--		<psi.fileReferenceHelper implementation="valkyrie.ide.reference.ValkyrieFileReference"/>-->
		<!--		<psi.treeChangeListener implementation="valkyrie.ide.project.crate.ValkyrieFileListener"/>-->
		<psi.referenceContributor
			language="valkyrie"
			implementation="valkyrie.ide.reference.ValkyrieReferenceContributor"
		/>
		<psi.referenceProvider language="valkyrie" providerClass="valkyrie.ide.reference.ValkyrieReferenceProvider"/>
		<!--		<psi.symbolReferenceProvider-->
		<!--			anyReferenceClass="true"-->
		<!--			implementationClass="valkyrie.ide.reference.ValkyrieReferenceProvider"-->
		<!--			hostLanguage="Valkyrie"-->
		<!--			hostElementClass="com.intellij.psi.xml.XmlAttributeValue"-->
		<!--			targetClass="valkyrie.language.symbol.ValkyrieSymbolTemplate"-->
		<!--		/>-->
		<!-- Lint -->
		<!--		<lang.namesValidator language="Valkyrie" implementationClass="valkyrie.ide.lint.ValkyrieNameValidator"/>-->
		<!--				<qualifiedNameProvider implementation="valkyrie.ide.lint.ValkyrieNameQualifier"/>-->
		<annotator language="valkyrie" implementationClass="valkyrie.ide.annotator.ValkyrieCheckNamespace"/>
		<annotator language="valkyrie" implementationClass="valkyrie.ide.annotator.AnnotateControlFlow"/>
		<annotator language="valkyrie" implementationClass="valkyrie.ide.annotator.AnnotateLiterals"/>
		<annotator language="valkyrie" implementationClass="valkyrie.ide.annotator.AnnotateInferType"/>
		<annotator language="valkyrie" implementationClass="valkyrie.ide.annotator.LegacyExpression"/>
		<!-- Declaration -->
		<typeDeclarationProvider implementation="valkyrie.ide.reference.declaration.ValkyrieDeclarationProvider"/>
		<usageTargetProvider implementation="valkyrie.ide.reference.declaration.ValkyrieUsageTargetProvider"/>

		<implicitUsageProvider implementation="valkyrie.ide.hint.ImplicitUsage"/>
		<!--		<psi.declarationProvider implementation="valkyrie.ide.reference.declaration.SymbolDeclarationProvider"/>-->
		<!--		<declarationRangeHandler-->
		<!--			key="org.rust.lang.core.psi.ValkyrieClass"-->
		<!--			implementationClass="valkyrie.ide.reference.declaration.ClassDeclarationHandler"-->
		<!--		/>-->
		<findUsagesHandlerFactory implementation="valkyrie.ide.usages.ValkyrieUsagesFactory"/>
		<definitionsSearch implementation="valkyrie.ide.annotator.SearchDefinitions"/>
		<allOverridingMethodsSearch
			language="valkyrie"
			implementation="valkyrie.ide.annotator.ValkyrieAllOverridingMethodsSearch"
		/>
		<classInheritorsSearch
			language="valkyrie"
			implementation="valkyrie.ide.annotator.ValkyrieClassInheritorsSearch"
		/>
		<directClassInheritorsSearch
			language="valkyrie"
			implementation="valkyrie.ide.annotator.DirectClassInheritorsSearch"
		/>
		<overridingMethodsSearch
			language="valkyrie"
			implementation="valkyrie.ide.annotator.OverridingMethodsSearch"
		/>


		<annotator language="valkyrie" implementationClass="valkyrie.ide.annotator.LegacyExpression"/>
		<!-- Rename -->
		<renameHandler implementation="valkyrie.ide.refactor.ValkyrieRenameHandler"/>
		<rename.inplace.resolveSnapshotProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.refactor.ValkyrieRenameInPlace"
		/>
		<renameInputValidator implementation="valkyrie.ide.refactor.ValkyrieRenameInputValidator"/>
		<renameRefactoringDialogProvider implementation="valkyrie.ide.refactor.ValkyrieRenameDialog"/>
		<!-- Completion -->
		<typedHandler implementation="valkyrie.ide.completion.AutoInsertBrace"/>
		<backspaceHandlerDelegate implementation="valkyrie.ide.completion.AutoDeleteBrace"/>
		<lookup.charFilter implementation="valkyrie.ide.completion.CompletionInterrupter"/>
		<lang.commenter language="valkyrie" implementationClass="valkyrie.ide.formatter.ValkyrieCommenter"/>
		<lang.braceMatcher
			language="valkyrie"
			implementationClass="valkyrie.ide.matcher.BraceMatchAdapter"
		/>
		<codeBlockSupportHandler language="valkyrie" implementationClass="valkyrie.ide.matcher.CodeBlockSupport"/>
		<lang.quoteHandler
			language="valkyrie"
			implementationClass="valkyrie.ide.matcher.ValkyrieQuoteHandler"
		/>
		<codeCompletionConfigurable instance="valkyrie.ide.completion.CompletionConfig"/>
		<completion.contributor
			language="valkyrie"
			implementationClass="valkyrie.ide.completion.CompletionRegistrar"
		/>
		<controlFlowProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.completion.ValkyrieControlFlowProvider"
		/>
		<nameSuggestionProvider implementation="valkyrie.ide.completion.CompletionSuggestion"/>
		<!-- Folding -->
		<codeFoldingOptionsProvider instance="valkyrie.ide.folding.ValkyrieFoldingOptions"/>
		<lang.foldingBuilder language="valkyrie" implementationClass="valkyrie.ide.folding.ValkyrieFoldingBuilder"/>
		<customFoldingProvider language="valkyrie" implementationClass="valkyrie.ide.completion.ValkyrieFoldingRegion"/>
		<!-- codeBlockProvider -->
		<codeBlockProvider language="valkyrie" implementationClass="valkyrie.ide.matcher.ValkyrieCodeBlockProvider"/>
		<referenceImporter implementation="valkyrie.ide.completion.ValkyrieImportInsert"/>
		<lang.importOptimizer
			language="valkyrie"
			implementationClass="valkyrie.ide.completion.ValkyrieImportOptimizer"
		/>

		<!-- Codegen -->
		<codeInsight.implementMethod language="valkyrie" implementationClass="valkyrie.ide.codegen.GenerateImplements"/>
		<codeInsight.overrideMethod language="valkyrie" implementationClass="valkyrie.ide.codegen.GenerateOverrides"/>
		<codeInsight.delegateMethods language="valkyrie" implementationClass="valkyrie.ide.codegen.GenerateDelegates"/>
		<testCreator language="valkyrie" implementationClass="valkyrie.ide.codegen.GenerateTests"/>
		<customFileDropHandler language="valkyrie"
		                       implementationClass="valkyrie.ide.completion.ValkyrieFileDropHandler"/>

		<!-- Live Template -->
		<liveTemplateContextProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.live_template.ValkyrieLiveTemplateContext"
		/>
		<defaultLiveTemplates file="templates/liveTemplate.xml"/>
		<defaultTemplatePropertiesProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.live_template.ValkyrieDefaultTemplatePropertiesProvider"
		/>
		<customLiveTemplate language="valkyrie" implementationClass="valkyrie.ide.live_template.ValkyrieLiveTemplate"/>
		<liveTemplateMacro
			language="valkyrie"
			implementationClass="valkyrie.ide.live_template.LiveTemplateSafeIdentifier"
		/>
		<fileTemplateGroup
			language="valkyrie"
			implementationClass="valkyrie.ide.live_template.ValkyrieFileTemplateGroupDescriptorFactory"
		/>
		<!-- Document -->
		<lang.documentationProvider
			language="valkyrie"
			implementationClass="valkyrie.ide.doc.DocumentationProvider"
		/>
		<!--				<indexPatternBuilder-->
		<!--						implementation="valkyrie.ide.lint.VomlTodoIndexPatternBuilder"-->
		<!--				/>-->
		<!--				<todoIndexer-->
		<!--						filetype="Fluent"-->
		<!--						implementationClass="valkyrie.ide.lint.VomlTodoIndexer"-->
		<!--				/>-->

	</extensions>
	<actions>
		<action id="valkyrie.create.file" class="valkyrie.ide.actions.ValkyrieCreateFile">
			<add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewHtmlFile"/>
		</action>
		<!--		<action id="jss.JssConvertJson" class="valkyrie.ide.actions.FluentConvertMo"/>-->
		<action id="valkyrie.macro.expand-to-file" class="valkyrie.ide.actions.ExpandMacroToFile">
			<keyboard-shortcut keymap="$default" first-keystroke="control shift G"/>
		</action>
		<!-- Generated	-->
		<action id="valkyrie.generate.operators" class="valkyrie.ide.codegen.GenerateOperators">
			<add-to-group group-id="GenerateGroup" anchor="first"/>
		</action>
		<action id="valkyrie.generate.properties" class="valkyrie.ide.codegen.GenerateProperties">
			<add-to-group group-id="GenerateGroup"/>
		</action>
		<action id="valkyrie.macro.expand" class="valkyrie.ide.codegen.ExpandMacro">
			<add-to-group group-id="GenerateGroup" anchor="last"/>
		</action>


	</actions>
</idea-plugin>
