{
    parserClass = "valkyrie.psi.parser.YggdrasilParser"
    parserUtilClass = "valkyrie.psi.ParserExtension"

    extends = "valkyrie.psi.ValkyrieElement"

    psiClassPrefix = "Valkyrie"
    psiImplClassSuffix = "Node"
    psiPackage = "valkyrie.psi.node"
    psiImplPackage = "valkyrie.psi.node"

    elementTypeHolderClass = "valkyrie.psi.ValkyrieTypes"
    elementTypeClass = "valkyrie.psi.ValkyrieElementType"
    tokenTypeClass = "valkyrie.psi.ValkyrieTokenType"

    psiImplUtilClass = "valkyrie.psi.node.YggdrasilPsiExtension"

    tokens = [
        // comment
        COMMENT_LINE = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL    = "Symbol"
        ESCAPED   = "\escaped"
        INTEGER   = "<<INTEGER>>"

        REFERENCE = "$Symbol"

        SELECTION_LINE = "SELECTION_LINE"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        EQUAL = '='
        COLON = ':'
        PROPORTION = '∷'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        OP_MANY = '*'
        AT = '@'
        TO = "->"
        HYPHEN = "-"
        OP_DIV = '/'
        OP_OR = '|'
        OP_CONCAT = '~'
        PLACE_HOLDER = "_"

        OP_LLL = "⋘"
        OP_GGG = "⋙"
        OP_LL = "≪"
        OP_GG = "≫"
    ]
}

// https://github.com/bytecodealliance/fluent/blob/master/spec/fluent.ebnf
root ::= statements*
private statements ::=
    declare-namespace
  | using
  | type-alias
  | trait-alias
  | declare-flags
  | declare-enumerate
  | declare-unite
  | declare-class
  | declare-union
  | declare-trait
  | declare-imply
  | declare-function
  | declare-component
  | declare-macro
  | block-statement
private block-statement ::=
    declare-variable
  | new-lambda
  | attribute-above
  | control-statement
  | inline-statement
private inline-statement ::= SEMICOLON
  | if-case-statement
  | if-statement

  | expression-root
// === grammar statement ===
declare-namespace ::= annotations KW_NAMESPACE namepath-free {
	pin = 2
    mixin = "valkyrie.psi.mixin.MixinNamespace"
}
// === class statement ===
using ::= annotations KW_USING (using-body|using-term) {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinUsing"
}
using-term ::= SEMICOLON | COMMA
  | using-any
  | using-alias
  | using-block
  | namepath-free
using-any     ::= (namepath-free using-dot?) STAR using-exclude?
using-exclude ::= KW_EXCLUDE (identifier|BRACE_L (identifier (COMMA identifier)* COMMA?) BRACE_R)
using-block   ::= namepath-free using-dot? using-body
using-body    ::= BRACE_L using-term* BRACE_R;
using-alias   ::= identifier KW_AS identifier;
private using-dot ::= DOT|PROPORTION|OP_DIV
// === forall statement ===
declare-template ::= annotations KW_TEMPLATE (identifier (COMMA identifier)* COMMA?)? template-body {
    pin = 2
}
template-body ::= BRACE_L template-item* BRACE_R;
template-item ::= SEMICOLON
  | declare-where
// === class statement ===
type-alias ::= annotations KW_TYPE identifier EQUAL type-expression {
    pin = 2
}
declare-where ::= KW_WHERE where-body;
where-body    ::= BRACE_L BRACE_R

declare-class ::= declare-template? annotations KW_CLASS identifier declare-generic? class-inherit? type-hint? class-body {
    pin = 3
    mixin = "valkyrie.psi.mixin.MixinClass"
}
class-inherit ::= PARENTHESIS_L (inherit-item (COMMA inherit-item)* COMMA?)? PARENTHESIS_R;
inherit-item  ::= (annotations identifier EQUAL)? type-expression {
    mixin = "valkyrie.psi.mixin.MixinClassInherit"
}
// === class body ===
class-body ::= BRACE_L class-item* BRACE_R;
private class-item ::= SEMICOLON | COMMA
  | declare-domain
  | declare-method
  | declare-field
// === class field statement ===
declare-field ::= annotations identifier type-hint? default-value? {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinField"
}
type-hint     ::= COLON type-expression {
    mixin = "valkyrie.psi.mixin.MixinTypeHint"
}
default-value ::= EQUAL expression-root;
default-type  ::= EQUAL type-expression;
// === class method statement ===
declare-method ::= annotations identifier declare-generic? parameter-body return-type? effect-type? block-body? {
    mixin = "valkyrie.psi.mixin.MixinMethod"
}
// === class domain statement ===
declare-domain ::= annotations identifier class-body {
    mixin = "valkyrie.psi.mixin.MixinDomain"
}
// === union statement ===
declare-union ::= annotations KW_UNION identifier class-body {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinUnion"
}
// === enumerate statement ===
declare-flags ::= annotations KW_FLAGS identifier class-inherit? type-hint? enumerate-body {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinFlags"
}
declare-enumerate ::= annotations KW_ENUMERATE identifier class-inherit? type-hint? enumerate-body {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinEnumerate"
}
enumerate-body ::= BRACE_L enumerate-item* BRACE_R;
private enumerate-item ::= SEMICOLON | COMMA
  | declare-method
  | declare-semantic
  | declare-domain
declare-semantic ::= annotations identifier default-value? {
    mixin = "valkyrie.psi.mixin.MixinSemantic"
}
// === union statement ===
declare-unite ::= declare-template? annotations KW_UNITE identifier unite-body {
    pin = 3
    mixin = "valkyrie.psi.mixin.MixinUnite"
}
unite-body ::= BRACE_L unite-item* BRACE_R;
private unite-item ::= SEMICOLON | COMMA
  | declare-variant
  | declare-method
declare-variant ::= annotations identifier class-body? {
    mixin = "valkyrie.psi.mixin.MixinVariant"
}
// === group statement ===
trait-alias ::= annotations KW_TRAIT identifier EQUAL type-expression {
    pin = 4
    mixin = "valkyrie.psi.mixin.MixinTraitAlias"
}
declare-trait ::= annotations KW_TRAIT identifier declare-generic? type-hint? class-body {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinTrait"
}
declare-imply ::= annotations KW_IMPLY declare-generic? namepath generic-call-free? type-hint class-body {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinImply"
}
// === generic statement ===
declare-generic ::=
    PROPORTION? GENERIC_L (generic-parameter (COMMA generic-parameter)* COMMA?)? GENERIC_R
  | PROPORTION? ANGLE_L   (generic-parameter (COMMA generic-parameter)* COMMA?)? ANGLE_R
{

}
generic-parameter ::= annotations identifier type-hint? default-type? {
    mixin = "valkyrie.psi.mixin.MixinTypeParameter"
}
/// === function definition ===
declare-function ::= annotations KW_FUNCTION declare-generic? identifier parameter-body return-type? effect-type? block-body {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinFunction"
}
declare-macro ::= annotations KW_MACRO declare-generic? identifier parameter-body return-type? effect-type? block-body {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinMacro"
}
declare-component ::= annotations KW_COMPONENT declare-generic? identifier parameter-body return-type? effect-type? block-body {
    pin = 2
    mixin = "valkyrie.psi.mixin.MixinComponent"
}
parameter-body ::= PARENTHESIS_L (parameter-item (COMMA parameter-item)* COMMA?)? PARENTHESIS_R;
parameter-item ::= annotations identifier type-hint? default-value? {
    mixin = "valkyrie.psi.mixin.MixinValueParameter"
}
return-type ::= (OP_ARROW1|COLON) type-expression;
effect-type ::= OP_DIV type-expression;
block-body  ::= BRACE_L block-statement* BRACE_R;
block-bare  ::= block-statement*;
// === function statement ===
declare-variable ::= KW_LET let-pattern type-hint? EQUAL inline-statement {
    pin = 1
    mixin = "valkyrie.psi.mixin.MixinVariable"
}
let-pattern ::=
    pattern-bare
  | pattern-unapply
  | pattern-sequence
  | pattern-object
// === function statement ===
function-call ::=
    namepath argument-body? block-body
  | namepath argument-body;
function-call-inline ::= namepath argument-body;
macro-call    ::= AT namepath (argument-body? class-body|argument-body)? {
    pin = 1
}
localize-call ::= OP_L10N (identifier ((DOT|PROPORTION|OP_DIV) identifier)*)? argument-body? {
    pin = 1
    mixin = "valkyrie.psi.mixin.MixinLocalize"
}
macro-call-inline ::= AT namepath argument-body?

dot-call        ::= OP_AND_THEN? DOT namepath (argument-body | argument-body? block-body)?;
dot-call-inline ::= OP_AND_THEN? DOT namepath argument-body?

dot-call-match ::= OP_AND_THEN? DOT KW_MATCH match-body {
    pin = 3
}
// === if statement ===
if-case-statement ::= KW_IF (KW_LET|KW_CASE) pattern EQUAL expression-inline block-body {
    pin=2
}
if-statement ::= if-condition block-body else-if-statement* else-statement? {

}
if-condition ::= KW_IF expression-inline {
    pin = 1
}
else-if-statement ::= KW_ELSE KW_IF expression-inline block-body {
    pin = 2
}
else-statement ::= KW_ELSE block-body {
    pin = 1
}
// === if statement ===
while-statement ::= attribute-below* KW_WHILE expression-inline block-body {
    pin = 2
}
for-statement ::= attribute-below* KW_FOR let-pattern KW_IN expression-inline if-condition? block-body {
    pin = 2
}
dot-call-for    ::= OP_AND_THEN? DOT KW_FOR for-pattern-dot expression-inline if-condition? block-body {
    pin = 3
}
for-pattern-dot ::=
    pattern-bare
  | pattern-unapply
  | pattern-sequence
// === if statement ===
try-statement ::= KW_TRY type-expression? block-body {
    pin = 1
}
match-statement ::= KW_MATCH expression-inline match-body {
    pin = 1
}
match-body ::= BRACE_L match-item* BRACE_R;
private match-item ::=
    match-with
  | match-case
  | match-when
  | match-else
match-with ::= KW_WITH pattern COLON block-bare {
    pin = 1
}
match-case ::= KW_CASE case-item COLON block-bare {
    pin = 1
}
case-item ::= namepath|number|pattern;
match-when ::= KW_WHEN expression-inline COLON block-bare {
    pin = 1
}
match-else ::= KW_ELSE COLON block-bare {
    pin = 1
}
// === pattern expression ===
pattern ::=
    pattern-unapply
  | pattern-sequence
  | pattern-object
  | pattern-literal

pattern-bare         ::= pattern-literal (COMMA pattern-literal)* COMMA? !(PARENTHESIS_L|BRACKET_L|BRACE_L)
pattern-unapply      ::= annotations namepath-free? pattern-unapply-body;
pattern-unapply-body ::= PARENTHESIS_L (pattern (COMMA pattern)* COMMA?)? PARENTHESIS_R {
    pin = 1
}
pattern-sequence      ::= pattern-sequence-body;
pattern-sequence-body ::= BRACKET_L (pattern (COMMA pattern)* COMMA?)? BRACKET_R {
    pin = 1
}
pattern-object      ::= annotations namepath-free? pattern-object-body;
pattern-object-body ::= BRACE_L (pattern-pair (COMMA pattern-pair)* COMMA?)? BRACE_R {
    pin = 1
}
pattern-pair      ::= annotations identifier COLON pattern;
pattern-literal   ::= annotations (identifier|string|special)
// === pattern expression ===
// new Self { r: red, g: green, b: blue, a: alpha}
new-value  ::= KW_NEW modifier* type-expression? argument-body? new-body {
    pin = 1
    mixin = "valkyrie.psi.mixin.MixinBuilder"
}
new-body ::= BRACE_L new-item* BRACE_R;
private new-item ::= SEMICOLON | COMMA
  | inline-statement
new-object ::= KW_OBJECT class-inherit? type-hint? class-body {
    pin = 1
    mixin = "valkyrie.psi.mixin.MixinObject"
}
new-lambda ::= KW_LAMBDA declare-generic? parameter-body return-type? effect-type? {
    pin = 1
    mixin = "valkyrie.psi.mixin.MixinLambda"
}
lambda-block  ::= BRACE_L new-lambda? block-statement* BRACE_R;
// === slot statement ===
slot ::=
    slot-named
  | slot-index
slot-named ::= DOLLAR identifier;
slot-index ::= DOLLAR INTEGER;
// === control expression ===
control-statement ::=
    control-return
  | control-yield-send    // generator<Yield=T, Return=()>
  | control-yield-stop    // generator<Yield=R, Return=()>
  | control-yield-from
  | control-continue
  | control-break
  | control-through
  | control-resume
control-break  ::= KW_BREAK control-label?
control-return ::= KW_RETURN control-label? expression-root?;
control-continue ::= KW_CONTINUE control-label?

control-yield-send ::=
    KW_YIELD KW_WITH KW_CONTINUE? expression-root
  | KW_YIELD KW_CONTINUE? control-label? expression-root
control-yield-stop ::=
    KW_YIELD KW_WITH KW_RETURN expression-root?
  | KW_YIELD KW_WITH KW_BREAK expression-root?
  | KW_YIELD KW_RETURN control-label? expression-root?
  | KW_YIELD KW_BREAK control-label? expression-root?
control-yield-from ::=
    KW_YIELD KW_WITH KW_FROM expression-root
  | KW_YIELD KW_FROM control-label? expression-root;
control-label ::= OP_POW (identifier| INTEGER|KW_MACRO|KW_FOR|KW_WHILE);
control-raise ::= KW_RAISE expression-root
control-resume ::= KW_RESUME control-label? expression-root
control-through ::= KW_THROUGH control-label?
// === common expression ===
expression-root ::= expression OP_AND_THEN? {

};
expression ::= term (infix term)*;
term ::= prefix* atomic suffix* {

}
prefix ::= OP_PLUS | OP_MINUS | OP_BANG;
infix  ::=
    OP_PLUS | OP_MINUS
  | STAR | OP_DIV | OP_REM | OP_DIV_REM
  | OP_OR
  | OP_AND
  | OP_LLL | bad-lll  // <<<
  | OP_GGG | bad-rrr  // >>>
  | OP_LL  | bad-ll   // <<
  | OP_GG  | bad-rr   // >>
  | OP_LEQ | ANGLE_L  // <
  | OP_GEQ | ANGLE_R  // >
  | OP_UNTIL
  | EQUAL | OP_EE | OP_NE
  | KW_AS
  | is_not | KW_IS
bad-lll ::= ANGLE_L ANGLE_L ANGLE_L
  | OP_LL ANGLE_L
  | ANGLE_L OP_LL
bad-rrr ::= ANGLE_R ANGLE_R ANGLE_R
  | OP_RR ANGLE_R
  | ANGLE_R OP_RR
bad-ll  ::= ANGLE_L ANGLE_L
bad-rr  ::= ANGLE_R ANGLE_R
is_not ::= KW_IS KW_NOT | OP_BANG KW_IS;
suffix ::= OP_BANG
    | dot-call | dot-call-for | dot-call-match
    | generic-call;
inline-suffix ::= OP_BANG
    | dot-call-inline
    | generic-call
// === inline expression statement ===
expression-inline ::= inline-term (infix inline-term)* {

};
inline-term ::= prefix* inline-atomic inline-suffix* {

}
inline-atomic ::=
    PARENTHESIS_L expression-root PARENTHESIS_R
  | macro-call
  | function-call-inline
  | ordinal-range
  | offset-range
  | literal
// === expression statement ===
type-expression ::= type-term (type-infix type-term)* {
    mixin = "valkyrie.psi.mixin.MixinTypeExpression"
    methods=[highlight_trait highlight_class]
};
type-term ::= type-prefix* type-atomic type-suffix* {

}
type-prefix ::= OP_PLUS | OP_MINUS | OP_BANG;
type-infix  ::= OP_PLUS | OP_ARROW1 | OP_OR;
type-suffix ::= OP_AND_THEN | generic-call-free;
type-atomic ::= namepath | string;
// === generic statement ===
generic-call ::=
    PROPORTION? GENERIC_L (generic-argument (COMMA generic-argument)* COMMA?)? GENERIC_R
  | PROPORTION  ANGLE_L   (generic-argument (COMMA generic-argument)* COMMA?)? ANGLE_R
generic-call-free ::=
    PROPORTION? GENERIC_L (generic-argument (COMMA generic-argument)* COMMA?)? GENERIC_R
  | PROPORTION? ANGLE_L   (generic-argument (COMMA generic-argument)* COMMA?)? ANGLE_R

generic-argument ::= (annotations identifier EQUAL)? type-expression;
// === atomic statement ===
atomic ::=
    PARENTHESIS_L expression-root PARENTHESIS_R
  | tuple           // ( )
  | lambda-block    // { }
  | ordinal-range   // [ ]
  | offset-range    // ⁅ ⁆
  | macro-call      // @path::id() { }
  | slot            // $id
  | localize-call   // ⸿scope.path
  | for-statement   // for ... {...}
  | while-statement // while/until {...}
  | try-statement   // try T {...}
  | control-raise   // raise T
  | match-statement // match ... { ... }
  | new-value       // new T { ... }
  | new-object      // object(base): Interface { }
  | string          // handler"..."
  | special         // true false
  | function-call   // path::id() { }
  | namepath
  | number
// === atomic statement ===
ordinal-range ::= BRACKET_L (range-item (COMMA range-item)* COMMA?)? BRACKET_R;
offset-range  ::= OFFSET_L (range-item (COMMA range-item)* COMMA?)? OFFSET_R;
range-item ::=
    range-lower? COLON range-upper? COLON range-step?
  | range-lower? c2 range-upper?
  | range-lower? COLON range-upper?
  | range-index
range-lower ::= expression-root;
range-upper ::= expression-root;
range-step  ::= expression-root;
range-index ::= expression-root;
private c2  ::= PROPORTION | COLON COLON;
tuple       ::=
    PARENTHESIS_L PARENTHESIS_R
  | PARENTHESIS_L argument COMMA PARENTHESIS_R
  | PARENTHESIS_L (argument (COMMA argument)+ COMMA?)? PARENTHESIS_R
{
  //    mixin = "valkyrie.psi.mixin.MixinTuple"
}
argument-body ::= PARENTHESIS_L (argument (COMMA argument)* COMMA?)? PARENTHESIS_R;
argument ::= (identifier EQUAL)? expression-root {

}
// === literal items ===
literal ::= special | namepath | number;
number ::=
    INTEGER identifier?
  | DECIMAL identifier?;
string ::= identifier? STRING_L STRING_TEXT STRING_R {
    mixin = "valkyrie.psi.mixin.MixinString"
}
special ::= KW_NULL | KW_NIL | KW_BOOLEAN | COLOR;

// === annotation statement ===
annotations ::= attribute-below* modifier*
modifier    ::= (SYMBOL | SYMBOW_RAW) !modifier-stop {
    mixin = "valkyrie.psi.mixin.MixinModifier"
}
private modifier-stop ::= KW_IN | KW_IF
    | COMMA | COLON | PROPORTION | DOT | SEMICOLON | EQUAL
    | PARENTHESIS_L | PARENTHESIS_R
    | BRACE_L | BRACE_R
attribute-below ::= HASH attribute-item
attribute-above ::= HASH OP_POW attribute-item;
attribute-item  ::= namepath argument-body? class-body? {
    mixin = "valkyrie.psi.mixin.MixinAttribute"
}
// === identifiers ===
namepath      ::= identifier (PROPORTION identifier)* {
    mixin = "valkyrie.psi.mixin.MixinNamepath"
    methods=[highlight_fake]
}
namepath-free ::= identifier ((PROPORTION|DOT) identifier)* {
    extends = namepath
}


identifier ::= SYMBOL | SYMBOW_RAW
    | KW_CLASS
    | KW_FUNCTION | KW_MACRO | KW_COMPONENT
    | KW_UNION | KW_IMPORT | KW_AS
    | KW_FROM
{
    mixin = "valkyrie.psi.mixin.MixinIdentifier"
}
unused ::= BUILDER_L BUILDER_R DOMAIN_L DOMAIN_R OP_ARROW2 OP_ARROW3