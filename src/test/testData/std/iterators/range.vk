namespace std.iterators;

micro range(max: int)-> Range {
    range(1, max, 1)
}

micro range(min: int, max: int)-> Range {
    range(1, max, 1)
}

micro range(min: i32, max: i32, step: i32)-> Range {
    new Range {
    from = min,
    till = max,
    step = step,
    _current = min
    }
}
\\ import { render } from "solid-js/web";
\\import { createSignal } from "solid-js";

\\function Counter() {
\\return <div>Count: 0</div>;
\\

\\render(() => <Counter />, document.getElementById('app'));

class ThemeConfig {

}

#component
class ThemeProvider {
    #react(provider)
    theme: ThemeConfig

    render() {
        Text {}
    }
}

#component
class Counter {
    #react(read, write, provider)
    count: i32
    #react(context, read)
    theme: ThemeConfig


    render() {
        render_once {

        }
        Text {
            if theme.red {

            }
            else {

            }
        }

    }

}

trait Iterator {

}

extends Counter: Iterator⟨Integer⟩ {
    next() {}
}

extends Counter: RandomIterator {

}


new Counter {

}



regex"""
d[ijk]star*
"""





re"d[ijk]star*"



json"""
{
a: 2
}
"""





xml"""
<tag/>
"""




20m
30m

40cm

1分钟
2℃
3℉


f"{slot a b c}"

java"""
public static void main(String[] args){

}
"""

