namespace ad.bd.cd

let a = true;

type A = a;

alias type `null` = Null;

generic T {}
extends Vec<T>: Iterable {

}

function method(mut arg: int)
{
    arg = arg + 44;
}

let a = scope {

}

class A {
    i: int,
}

#[open, parameter]
class WorldOptions {

}

function world(..options: WorldOptions) {

}

trait TestTrait {

}


function test(
    \\ 1
    #[nice(#boat args)]
    \\ 2
    placeholder mut a: A = 0,
    \\ 3
    `b`: `B` = null
) -> ReturnType {
    if err != nil {
        return a
    }

    if self.index >= self.term.length() {
        return None;
    };
    let item = self.term.get(self.index);
    self.index += 1;
    return item;
}

"{text}"




std::test⟨T⟩(arg)[index];
std::test⟨T⟩(arg)⁅index⁆;


a?.like

a?()


30℃ == 60℉;

for i in tes {
    +retst
}


